var searchIndex = JSON.parse('{\
"bit_field":{"doc":"Provides the abstraction of a bit field, which allows for …","t":[8,8,10,10,10,10,10,10,10,10,10,10],"n":["BitArray","BitField","bit_length","bit_length","get_bit","get_bit","get_bits","get_bits","set_bit","set_bit","set_bits","set_bits"],"q":["bit_field","","","","","","","","","","",""],"d":["","A generic trait which provides methods for extracting and …","Returns the length, eg number of bits, in this bit field.","Returns the length, eg number of bits, in this bit array.","Obtains the bit at the index <code>bit</code>; note that index 0 is …","Obtains the bit at the index <code>bit</code>; note that index 0 is …","Obtains the range of bits specified by <code>range</code>; note that …","Obtains the range of bits specified by <code>range</code>; note that …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the range of bits defined by the range <code>range</code> to the …","Sets the range of bits defined by the range <code>range</code> to the …"],"i":[0,0,1,2,1,2,1,2,1,2,1,2],"f":[null,null,[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15],["range",3,["usize"]]]],[[["usize",15],["range",3,["usize"]]]],[[["usize",15],["bool",15]]],[[["usize",15],["bool",15]]],[[["usize",15],["range",3,["usize"]]]],[[["usize",15],["range",3,["usize"]]]]],"p":[[8,"BitField"],[8,"BitArray"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":[14],"n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structure."],"i":[0],"f":[null],"p":[]},\
"raw_cpuid":{"doc":"A library to parse the x86 CPUID instruction, written in …","tn":["CACHE_INFO_TABLE","Cache","CacheInfo","CacheInfoIter","CacheInfoType","CacheParameter","CacheParametersIter","CacheType","Core","CpuId","CpuIdResult","DTLB","DatInfo","DatIter","DatType","Data","DataTLB","DirectCacheAccessInfo","DirectMapped","Disabled","EightWay","Epc","EpcSection","ExtendedFeatures","ExtendedFunctionInfo","ExtendedState","ExtendedStateInfo","ExtendedStateIter","ExtendedTopologyIter","ExtendedTopologyLevel","FeatureInfo","FourWay","FullyAssiciative","General","HyperV","Hypervisor","HypervisorInfo","Instruction","InstructionTLB","Invalid","KVM","L2Associativity","L2CatInfo","L3CatInfo","L3MonitoringInfo","MemBwAllocationInfo","MemoryEncryptionInfo","MonitorMwaitInfo","Null","Null","PerformanceMonitoringInfo","Prefetch","ProcessorFrequencyInfo","ProcessorSerial","ProcessorTraceInfo","RdtAllocationInfo","RdtMonitoringInfo","Reserved","SMT","STLB","SgxInfo","SgxSectionInfo","SgxSectionIter","SixteenWay","SoCVendorAttributesIter","SoCVendorBrand","SoCVendorInfo","TLB","ThermalPowerInfo","TopologyType","TscInfo","TwoWay","Unified","UnifiedTLB","Unknown","Unknown","Unknown","VMware","VendorInfo","Xen","all_zero","apic_frequency","as_string","as_string","associativity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brand_index","bus_frequency","c_bit_position","cache_level","cache_line_size","cache_size","cache_type","cache_type","capacity_mask_length","capacity_mask_length","cflush_cache_line_size","clone","clone","clone","clone","clone","clone","clone","clone","clone","coherency_line_size","configurable_address_ranges","conversion_factor","counter_bit_width","cpuid","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","denominator","desc","deterministic_address_translation_info","dts_irq_threshold","eax","ebx","ebx_length","ecx","edx","eq","eq","eq","eq","eq","extended_family_id","extended_model_id","extended_signature","extensions_supported","family_id","fixed_function_counters","fixed_function_counters_bit_width","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_cache_info","get_cache_parameters","get_dca_cap_value","get_direct_cache_access_info","get_extended_feature_info","get_extended_function_info","get_extended_state_info","get_extended_topology_info","get_feature_info","get_hypervisor_info","get_memory_encryption_info","get_monitor_mwait_info","get_performance_monitoring_info","get_processor_frequency_info","get_processor_serial","get_processor_trace_info","get_project_id","get_rdt_allocation_info","get_rdt_monitoring_info","get_sgx_info","get_soc_vendor_id","get_soc_vendor_info","get_stepping_id","get_thermal_power_info","get_tsc_info","get_vendor_attributes","get_vendor_brand","get_vendor_info","has_1gb_entries","has_1gib_pages","has_2mb_entries","has_4k_entries","has_4mb_entries","has_64bit_mode","has_acpi","has_adx","has_aesni","has_any_thread_deprecation","has_apic","has_arat","has_avx","has_avx2","has_avx512_ifma","has_avx512bw","has_avx512cd","has_avx512dq","has_avx512er","has_avx512f","has_avx512pf","has_avx512vl","has_bmi1","has_bmi2","has_clflush","has_clflushopt","has_clwb","has_cmov","has_cmpxchg16b","has_cmpxchg8b","has_cnxtid","has_code_data_prioritization","has_complex_indexing","has_configurable_psb_and_cycle_accurate_mode","has_cpl","has_dca","has_de","has_ds","has_ds_area","has_dts","has_ecmd","has_eist","has_encls_leaves_etrackc_erdinfo_eldbc_elduc","has_enclv_leaves_einvirtchild_edecvirtchild_esetcontext","has_energy_bias_pref","has_execute_disable","has_f16c","has_fdp","has_flexible_hwp","has_fma","has_fpu","has_fpu_cs_ds_deprecated","has_fsgsbase","has_fxsave_fxstor","has_hdc","has_hle","has_htt","has_hw_coord_feedback","has_hwp","has_hwp_activity_window","has_hwp_capabilities","has_hwp_energy_performance_preference","has_hwp_fast_access_mode","has_hwp_notification","has_hwp_package_level_request","has_hwp_peci_override","has_hypervisor","has_ignore_idle_processor_hwp_request","has_invariant_tsc","has_invpcid","has_ip_tracestop_filtering","has_l2_cat","has_l3_cat","has_l3_monitoring","has_lahf_sahf","has_linear_response_delay","has_lip_with_cs_base","has_local_bandwidth_monitoring","has_lzcnt","has_mca","has_mce","has_memory_bandwidth_allocation","has_mmx","has_monitor_mwait","has_movbe","has_mpx","has_msr","has_mtc_timing_packet_coefi_suppression","has_mtrr","has_occupancy_monitoring","has_ospke","has_oxsave","has_pae","has_page_flush_msr","has_pat","has_pbe","has_pcid","has_pclmulqdq","has_pdcm","has_pge","has_pku","has_pln","has_popcnt","has_power_event_trace","has_prefetchw","has_prefetchwt1","has_processor_trace","has_pse","has_pse36","has_psn","has_ptm","has_ptwrite","has_rdpid","has_rdrand","has_rdseed","has_rdseet","has_rdta","has_rdtm","has_rdtscp","has_rep_movsb_stosb","has_rtit_cr3_match","has_rtm","has_sev","has_sev_es","has_sgx","has_sgx1","has_sgx2","has_sgx_lc","has_sha","has_single_range_output_scheme","has_smap","has_sme","has_smep","has_smx","has_ss","has_sse","has_sse2","has_sse3","has_sse41","has_sse42","has_ssse3","has_syscall_sysret","has_sysenter_sysexit","has_tm","has_tm2","has_topa","has_topa_maximum_entries","has_total_bandwidth_monitoring","has_trace_transport_subsystem","has_tsc","has_tsc_adjust_msr","has_tsc_deadline","has_turbo_boost","has_turbo_boost3","has_umip","has_vme","has_vmx","has_x2apic","has_xgetbv","has_xsave","has_xsavec","has_xsaveopt","has_xsaves_xrstors","highest_cos","highest_cos","highest_cos","ia32_xss_supports_hdc","ia32_xss_supports_pt","identify","initial_local_apic_id","interrupts_as_break_event","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_branch_inst_ret_ev_unavailable","is_branch_midpred_ev_unavailable","is_cache_ref_ev_unavailable","is_compacted_format","is_core_cyc_ev_unavailable","is_fully_associative","is_fully_associative","is_in_ia32_xss","is_in_xcr0","is_inclusive","is_inst_ret_ev_unavailable","is_ll_cache_miss_ev_unavailable","is_ref_cycle_ev_unavailable","is_self_initializing","is_write_back_invalidate","isolation_bitmap","isolation_bitmap","iter","iter","l2_associativity","l2_cat","l3_cat","l3_monitoring","largest_monitor_line","level","level_number","level_type","linear_address_bits","mawau_value","max_addressable_ids","max_cores_for_cache","max_cores_for_package","max_enclave_size_64bit","max_enclave_size_non_64bit","max_encrypted_guests","max_hba_throttling","max_logical_processor_ids","maximum_rmid_range","memory_bandwidth_allocation","min_sev_no_es_asid","miscselect","model_id","native_cpuid","ne","ne","new","next","next","next","next","next","next","next","nominal_frequency","num","number_of_counters","numerator","offset","partitioning","physical_address_bits","physical_address_reduction","physical_base","physical_line_partitions","processor_base_frequency","processor_brand_string","processor_max_frequency","processors","rmid_range","secs_attributes","serial","serial_lower","serial_middle","sets","sets","shift_right_for_next_apic_id","size","size","smallest_monitor_line","stepping_id","subleaf","supported_c0_states","supported_c1_states","supported_c2_states","supported_c3_states","supported_c4_states","supported_c5_states","supported_c6_states","supported_c7_states","supported_cycle_threshold_value_encodings","supported_mtc_period_encodings","supported_psb_frequency_encodings","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tsc_frequency","tsc_frequency","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version_id","ways","with_cpuid_fn","x2apic_id","xcr0_supports_avx512_opmask","xcr0_supports_avx512_zmm_hi16","xcr0_supports_avx512_zmm_hi256","xcr0_supports_avx_256","xcr0_supports_legacy_x87","xcr0_supports_mpx_bndcsr","xcr0_supports_mpx_bndregs","xcr0_supports_pkru","xcr0_supports_sse_128","xsave_area_size_enabled_features","xsave_area_size_supported_features","xsave_size","cpuid_count"],"q":["raw_cpuid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","raw_cpuid::native_cpuid"],"d":["This table is taken from Intel manual (Section CPUID …","","Describes any kind of cache (TLB, Data and Instruction …","Used to iterate over cache information contained in cpuid …","What type of cache are we dealing with?","","","","","Main type used to query for information about the CPU we…","Low-level data-structure to store result of cpuid …","","Deterministic Address Translation Structure","Deterministic Address Translation Structure Iterator","Deterministic Address Translation cache type (EDX bits 04 …","Data cache","","","","","","","EBX:EAX and EDX:ECX provide information on the Enclave …","","","","","","Iterates over the system topology in order to retrieve …","Gives detailed information about the current level in the …","","","","","","Identifies the different Hypervisor products.","Information about Hypervisor","Instruction cache","","","","","L2 Cache Allocation Technology Enumeration Sub-leaf (EAX …","L3 Cache Allocation Technology Enumeration Sub-leaf (EAX …","","Memory Bandwidth Allocation Enumeration Sub-leaf (EAX = …","","","Null - No more caches","Null (indicates this sub-leaf is not valid).","","","Processor Frequency Information","","","","","4-31 = Reserved","Hyper-thread (Simultaneous multithreading)","","Intel SGX Capability Enumeration Leaf, sub-leaf 0 (EAX = …","Intel SGX EPC Enumeration Leaf, sub-leaves (EAX = 12H, …","Iterator over the SGX sub-leafs (ECX &gt;= 2).","","","","","","","What type of core we have at this level in the topology …","Time Stamp Counter and Nominal Core Crystal Clock …","","Data and Instruction cache","Some unified TLBs will allow a single TLB entry to …","","","","","","","","(Virtual) Bus (local apic timer) frequency in kHz.","Return vendor identification as human readable string.","","Ways of associativity (Bits 31-22)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Brand Index","Bus (Reference) Frequency (in MHz).","","Translation cache level (starts at 1)","Cache Line size in bytes","Cache size in 1K units","Cache Type","Translation cache type field.","Length of the capacity bit mask.","Length of the capacity bit mask.","CLFLUSH line size (Value ∗ 8 = cache line size in bytes)","","","","","","","","","","System Coherency Line Size (Bits 11-00)","Number of configurable Address Ranges for filtering (Bits …","Conversion factor from reported IA32_QM_CTR value to …","Bit width of general-purpose, performance monitoring …","Macro which queries cpuid directly.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An unsigned integer which is the denominator of the …","Description of the cache (from Intel Manual)","","Number of Interrupt Thresholds in Digital Thermal Sensor","Return value EAX register","Return value EBX register","Length of EBX bit vector to enumerate architectural …","Return value ECX register","Return value EDX register","","","","","","Version Information: Extended Family","Version Information: Extended Model","Extended Processor Signature and Feature Bits.","Enumeration of Monitor-Mwait extensions (beyond EAX and …","Version Information: Family","Number of fixed-function performance counters (if Version …","Bit width of fixed-function performance counters (if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Query basic information about caches. This will just …","Retrieve more elaborate information about caches (as …","Value of bits [31:0] of IA32_PLATFORM_DCA_CAP MSR …","Direct cache access info.","Find out about more features supported by this CPU.","Extended functionality of CPU described here (including …","Information for saving/restoring extended register state.","Information about topology (how many cores and what kind …","Query a set of features that are available on this CPU.","","","Information about how monitor/mwait works on this CPU.","Info about performance monitoring (how many counters …","Processor Frequency Information.","Retrieve serial number of processor.","Intel Processor Trace Enumeration Information.","","Quality of service enforcement information.","Quality of service informations.","","","","","Query information about thermal and power management …","Time Stamp Counter/Core Crystal Clock Information.","","","Return information about vendor. This is typically a …","1GB page size entries supported by this structure","Is there support for 1GiB pages.","2MB page size entries supported by this structure","4K page size entries supported by this structure","4MB page size entries supported by this structure","Check support for 64-bit mode.","Thermal Monitor and Software Controlled Clock Facilities. …","Supports ADX.","A value of 1 indicates that the processor supports the …","AnyThread deprecation","APIC On-Chip. The processor contains an Advanced …","ARAT. APIC-Timer-always-running feature is supported if …","A value of 1 indicates the processor supports the AVX …","AVX2","AVX512_IFMA","AVX512BW","AVX512CD","Supports AVX512DQ.","AVX512ER","Supports AVX512F.","AVX512PF","AVX512VL","BMI1","BMI2","CLFLUSH Instruction. CLFLUSH Instruction is supported.","Supports CLFLUSHOPT.","CLWB","Conditional Move Instructions. The conditional move …","CMPXCHG16B Available. A value of 1 indicates that the …","CMPXCHG8B Instruction. The compare-and-exchange 8 bytes …","L1 Context ID. A value of 1 indicates the L1 data cache …","Is Code and Data Prioritization Technology supported?","Complex Cache Indexing (Bit 2) False: Direct mapped cache.…","If true, Indicates support of Configurable PSB and …","CPL Qualified Debug Store. A value of 1 indicates the …","A value of 1 indicates the processor supports the ability …","Debugging Extensions. Support for I/O breakpoints, …","Debug Store. The processor supports the ability to write …","64-bit DS Area. A value of 1 indicates the processor …","Digital temperature sensor is supported if set.","ECMD. Clock modulation duty cycle extension is supported …","Enhanced Intel SpeedStep® technology. A value of 1 …","Supports ENCLS instruction leaves ETRACKC, ERDINFO, …","Supports ENCLV instruction leaves EINCVIRTCHILD, …","The processor supports performance-energy bias preference …","Is there support for execute disable bit.","A value of 1 indicates that processor supports 16-bit …","FDP_EXCPTN_ONLY. x87 FPU Data Pointer updated only on x87 …","Flexible HWP is supported if set.","A value of 1 indicates the processor supports FMA …","Floating Point Unit On-Chip. The processor contains an …","Deprecates FPU CS and FPU DS values if 1.","FSGSBASE. Supports RDFSBASE/RDGSBASE/WRFSBASE/WRGSBASE if …","FXSAVE and FXRSTOR Instructions. The FXSAVE and FXRSTOR …","HDC. HDC base registers IA32_PKG_HDC_CTL, IA32_PM_CTL1, …","HLE","Max APIC IDs reserved field is Valid. A value of 0 for …","Hardware Coordination Feedback Capability (Presence of …","HWP. HWP base registers (IA32_PM_ENABLE[bit 0], …","HWP Activity Window. IA32_HWP_REQUEST[bits 41:32] is …","HWP Capabilities. Highest Performance change is supported …","HWP Energy Performance Preference. IA32_HWP_REQUEST[bits …","Fast access mode for the IA32_HWP_REQUEST MSR is …","HWP Notification. IA32_HWP_INTERRUPT MSR is supported if …","HWP Package Level Request. IA32_HWP_REQUEST_PKG MSR is …","HWP PECI override is supported if set.","A value of 1 indicates the indicates the presence of a …","Ignoring Idle Logical Processor HWP request is supported …","Is Invariant TSC available?","INVPCID. If 1, supports INVPCID instruction for system …","If true, Indicates support of IP Filtering, TraceStop …","Supports L2 Cache Allocation.","Supports L3 Cache Allocation.","Supports L3 Cache Intel RDT Monitoring.","Is LAHF/SAHF available in 64-bit mode?","Reports whether the response of the delay values is …","If true, Generated packets which contain IP payloads have …","Supports local bandwidth monitoring.","Is LZCNT available?","Machine Check Architecture. A value of 1 indicates the …","Machine Check Exception. Exception 18 is defined for …","Supports Memory Bandwidth Allocation.","Intel MMX Technology. The processor supports the Intel …","MONITOR/MWAIT. A value of 1 indicates the processor …","A value of 1 indicates that the processor supports MOVBE …","MPX. Supports Intel Memory Protection Extensions if 1.","Model Specific Registers RDMSR and WRMSR Instructions. …","If true, Indicates support of MTC timing packet and …","Memory Type Range Registers. MTRRs are supported. The …","Supports occupancy monitoring.","OS has set CR4.PKE to enable protection keys (and the …","A value of 1 indicates that the OS has enabled …","Physical Address Extension. Physical addresses greater …","The Page Flush MSR is available if set.","Page Attribute Table. Page Attribute Table is supported. …","Pending Break Enable. The processor supports the use of …","Process-context identifiers. A value of 1 indicates that …","PCLMULQDQ. A value of 1 indicates the processor supports …","Perfmon and Debug Capability: A value of 1 indicates the …","Page Global Bit. The global bit is supported in …","Supports protection keys for user-mode pages.","PLN. Power limit notification controls are supported if …","A value of 1 indicates that the processor supports the …","Support of Power Event Trace. Writes can set IA32_RTIT_CTL…","Is PREFETCHW available?","Has PREFETCHWT1 (Intel® Xeon Phi™ only).","Supports Intel Processor Trace.","Page Size Extension. Large pages of size 4 MByte are …","36-Bit Page Size Extension. 4-MByte pages addressing …","Processor Serial Number. The processor supports the …","PTM. Package thermal management is supported if set.","Indicates support of PTWRITE. Writes can set IA32_RTIT_CTL…","RDPID and IA32_TSC_AUX are available.","A value of 1 indicates that processor supports RDRAND …","Supports RDSEED.","Supports RDSEED (deprecated alias).","Supports Intel Resource Director Technology (RDT) …","Supports Intel Resource Director Technology (RDT) …","Check support for rdtscp instruction.","Supports Enhanced REP MOVSB/STOSB if 1.","If true, Indicates that IA32_RTIT_CTL.CR3Filter can be …","RTM","Secure Encrypted Virtualization is supported if set.","SEV Encrypted State is supported if set.","Supports Intel® Software Guard Extensions (Intel® SGX …","Has SGX1 support.","Has SGX2 support.","Supports SGX Launch Configuration.","Supports SHA Instructions.","If true, Indicates support of Single-Range Output scheme.","SMAP. Supports Supervisor-Mode Access Prevention (and the …","Secure Memory Encryption is supported if set.","SMEP. Supports Supervisor-Mode Execution Prevention if 1.","Safer Mode Extensions. A value of 1 indicates that the …","Self Snoop. The processor supports the management of …","SSE. The processor supports the SSE extensions.","SSE2. The processor supports the SSE2 extensions.","Streaming SIMD Extensions 3 (SSE3). A value of 1 …","A value of 1 indicates that the processor supports SSE4.1.","A value of 1 indicates that the processor supports SSE4.2.","A value of 1 indicates the presence of the Supplemental …","Are fast system calls available.","SYSENTER and SYSEXIT Instructions. The SYSENTER and …","Thermal Monitor. The processor implements the thermal …","Thermal Monitor 2. A value of 1 indicates whether the …","If true, Tracing can be enabled with IA32_RTIT_CTL.ToPA = …","If true, ToPA tables can hold any number of output …","Supports total bandwidth monitoring.","If true, Indicates support of output to Trace Transport …","Time Stamp Counter. The RDTSC instruction is supported, …","IA32_TSC_ADJUST MSR is supported if 1.","A value of 1 indicates that the processors local APIC …","Intel Turbo Boost Technology Available (see description …","Intel® Turbo Boost Max Technology 3.0 available.","Supports user-mode instruction prevention if 1.","Virtual 8086 Mode Enhancements. Virtual 8086 mode …","Virtual Machine Extensions. A value of 1 indicates that …","A value of 1 indicates that the processor supports x2APIC …","Supports XGETBV with ECX = 1 if set.","A value of 1 indicates that the processor supports the …","Supports XSAVEC and the compacted form of XRSTOR if set.","CPU has xsaveopt feature.","Supports XSAVES/XRSTORS and IA32_XSS if set.","Highest COS number supported for this Leaf.","Highest COS number supported for this Leaf.","Highest COS number supported for this Leaf.","Support for HDC in IA32_XSS.","Support for PT in IA32_XSS.","","Initial APIC ID","Supports treating interrupts as break-event for MWAIT, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Branch instruction retired event not available if 1.","Branch mispredict retired event not available if 1.","Last-level cache reference event not available if 1.","Returns true when the compacted format of an XSAVE area …","Core cycle event not available if 1.","Fully Associative cache","Fully associative structure","True if the bit n (corresponding to the sub-leaf index) …","True if bit n is supported in XCR0.","Cache Inclusiveness (Bit 1) False: Cache is not inclusive …","Instruction retired event not available if 1.","Last-level cache misses event not available if 1.","Reference cycles event not available if 1.","Self Initializing cache level (does not need SW …","Write-Back Invalidate/Invalidate (Bit 0) False: …","Bit-granular map of isolation/contention of allocation …","Bit-granular map of isolation/contention of allocation …","Iterator over extended state enumeration levels &gt;= 2.","Iterator over SGX sub-leafs.","L2 Associativity field","L2 Cache Allocation Information.","L3 Cache Allocation Information.","L3 Cache Monitoring.","Largest monitor-line size in bytes (default is processor…","Cache Level (starts at 1)","Level number.","","#Linear Address Bits","The value of MAWAU used by the BNDLDX and BNDSTX …","Maximum number of addressable IDs for logical processors …","Maximum number of addressable IDs for logical processors …","Maximum number of addressable IDs for processor cores in …","The maximum supported enclave size in 64-bit mode is …","The maximum supported enclave size in non-64-bit mode is …","","Reports the maximum MBA throttling value supported for …","Maximum number of addressable IDs for logical processors …","Maximum range (zero-based) of RMID of L3.","Memory Bandwidth Allocation Information.","","Bit vector of supported extended SGX features.","Version Information: Model","Uses Rust’s <code>cpuid</code> function from the <code>arch</code> module.","","","Return new CPUID struct.","Iterate over all cache information.","Iterate over all caches for this CPU. Note: cpuid is …","","","","Iterate over each sub-leaf with an  address translation …","Iterate over all SoC vendor specific attributes.","An unsigned integer which is the nominal frequency of the …","Number as retrieved from cpuid","Number of general-purpose performance monitoring counter …","An unsigned integer which is the numerator of the …","The offset in bytes of this extended state components …","Partitioning (0: Soft partitioning between the logical …","#Physical Address Bits","","The physical address of the base of the EPC section","Physical Line partitions (Bits 21-12)","Processor Base Frequency (in MHz).","Retrieve processor brand string. For example “11th Gen …","Maximum Frequency (in MHz).","Number of logical processors at this level type. The …","Maximum range (zero-based) of RMID within this physical …","Reports the valid bits of SECS.ATTRIBUTES[127:0] that …","","Bits 00-31 of 96 bit processor serial number. (Available …","Bits 32-63 of 96 bit processor serial number. (Available …","Number of Sets (Bits 31-00)","Number of Sets.","Number of bits to shift right on x2APIC ID to get a …","The size in bytes (from the offset specified in EBX) of …","Size of the corresponding EPC section within the …","Smallest monitor-line size in bytes (default is processor…","Version Information: Stepping ID","","Number of C0 sub C-states supported using MWAIT (Bits 03 …","Number of C1 sub C-states supported using MWAIT (Bits 07 …","Number of C2 sub C-states supported using MWAIT (Bits 11 …","Number of C3 sub C-states supported using MWAIT (Bits 15 …","Number of C4 sub C-states supported using MWAIT (Bits 19 …","Number of C5 sub C-states supported using MWAIT (Bits 23 …","Number of C6 sub C-states supported using MWAIT (Bits 27 …","Number of C7 sub C-states supported using MWAIT (Bits 31 …","Bitmap of supported Cycle Threshold value encodings (Bits …","Bitmap of supported MTC period encodings (Bit 31:16).","Bitmap of supported Configurable PSB frequency encodings …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","“TSC frequency” = “core crystal clock frequency” …","TSC frequency in kHz.","Cache type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Version ID of architectural performance monitoring. (Bits …","Ways of associativity.","","x2APIC ID the current logical processor. (Bits 31-00)","Support for AVX512 OPMASK in XCR0.","Support for AVX512 ZMM Hi16 in XCR0.","Support for AVX512 ZMM Hi256 XCR0.","Support for AVX 256-bit in XCR0.","Support for legacy x87 in XCR0.","Support for MPX BNDCSR in XCR0.","Support for MPX BNDREGS in XCR0.","Support for PKRU in XCR0.","Support for SSE 128-bit in XCR0.","Maximum size (bytes, from the beginning of the …","Maximum size (bytes, from the beginning of the …","The size in bytes of the XSAVE area containing all states …",""],"i":[0,1,0,0,0,0,0,0,2,0,0,1,0,0,0,3,4,0,5,5,5,6,0,0,0,0,0,0,0,0,0,5,5,1,7,0,0,3,4,2,7,0,0,0,0,0,0,0,3,4,0,1,0,0,0,0,0,3,2,1,0,0,0,5,0,0,0,1,0,0,0,5,3,4,4,7,5,7,0,7,8,9,10,11,12,13,8,10,14,1,15,16,17,18,12,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,11,9,7,45,5,46,13,8,10,14,1,15,16,17,18,12,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,11,9,7,45,5,46,17,40,46,42,45,45,12,42,32,33,17,8,14,1,15,18,12,24,27,41,12,38,30,23,0,13,8,10,14,1,15,16,17,18,12,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,11,9,45,5,46,39,15,13,20,8,8,23,8,8,8,3,2,7,5,17,17,45,19,17,23,23,13,8,10,10,14,1,15,15,16,17,18,12,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,11,11,9,7,45,5,46,13,8,10,14,1,15,16,17,18,12,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,11,9,7,45,5,46,13,13,22,13,13,13,13,13,13,13,13,13,13,13,13,13,43,13,13,13,43,13,43,13,13,43,43,13,42,45,42,42,42,45,17,21,17,23,17,20,17,21,21,21,21,21,21,21,21,21,21,21,17,21,21,17,17,17,17,32,12,38,17,17,17,17,17,20,20,17,35,35,20,45,17,21,20,17,17,21,21,17,20,21,17,20,20,20,20,20,20,20,20,20,17,20,45,21,38,31,31,29,45,34,38,30,45,17,17,31,17,17,17,21,17,38,17,30,21,17,17,46,17,17,17,17,17,17,21,20,17,38,45,21,21,17,17,17,20,38,21,17,21,21,21,21,45,21,38,21,46,46,21,35,35,21,21,38,21,46,21,17,17,17,17,17,17,17,17,45,17,17,17,38,38,30,38,17,21,17,20,20,21,17,17,17,26,17,26,26,26,32,33,34,26,26,9,17,19,13,8,10,14,1,15,16,17,18,12,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,11,9,7,45,5,46,14,18,24,27,36,41,44,23,23,23,28,23,12,42,28,28,12,23,23,23,12,12,32,33,26,35,45,31,31,29,19,12,25,25,45,21,42,12,12,35,35,46,34,17,30,31,46,35,17,0,8,7,13,14,18,24,27,36,41,44,39,15,23,39,28,42,45,46,37,12,40,45,40,25,29,35,16,16,16,12,42,25,28,37,19,17,28,19,19,19,19,19,19,19,19,38,38,38,13,8,10,14,1,15,16,17,18,12,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,11,9,7,45,5,46,13,8,10,14,1,15,16,17,18,12,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,11,9,7,45,5,46,39,9,15,13,8,10,14,1,15,16,17,18,12,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,11,9,7,45,5,46,23,42,13,25,26,26,26,26,26,26,26,26,26,26,26,26,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],[["u32",15],["option",4,["u32"]]]],[[],["str",15]],[[],["str",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u8",15]],[[],["u16",15]],[[],["u8",15]],[[],["u8",15]],[[],[["option",4,["u8"]],["u8",15]]],[[],[["option",4,["u16"]],["u16",15]]],[[],["cachetype",4]],[[],["dattype",4]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["cpuidresult",3]],[[],["cacheinfoiter",3]],[[],["cacheinfotype",4]],[[],["cacheinfo",3]],[[],["cacheparametersiter",3]],[[],["cacheparameter",3]],[[],["extendedtopologyiter",3]],[[],["extendedstateiter",3]],[[],["datiter",3]],[[],["usize",15]],[[],["u8",15]],[[],["u32",15]],[[],["u8",15]],null,[[],["cpuid",3]],[[],["cpuidresult",3]],[[],["vendorinfo",3]],[[],["cacheinfoiter",3]],[[],["cacheinfotype",4]],[[],["cacheinfo",3]],[[],["processorserial",3]],[[],["featureinfo",3]],[[],["cacheparametersiter",3]],[[],["cacheparameter",3]],[[],["cachetype",4]],[[],["monitormwaitinfo",3]],[[],["thermalpowerinfo",3]],[[],["extendedfeatures",3]],[[],["directcacheaccessinfo",3]],[[],["performancemonitoringinfo",3]],[[],["extendedtopologyiter",3]],[[],["extendedtopologylevel",3]],[[],["topologytype",4]],[[],["extendedstateinfo",3]],[[],["extendedstateiter",3]],[[],["extendedstate",3]],[[],["rdtmonitoringinfo",3]],[[],["l3monitoringinfo",3]],[[],["rdtallocationinfo",3]],[[],["l3catinfo",3]],[[],["l2catinfo",3]],[[],["membwallocationinfo",3]],[[],["sgxinfo",3]],[[],["sgxsectioniter",3]],[[],["sgxsectioninfo",4]],[[],["epcsection",3]],[[],["processortraceinfo",3]],[[],["tscinfo",3]],[[],["processorfrequencyinfo",3]],[[],["datiter",3]],[[],["datinfo",3]],[[],["dattype",4]],[[],["socvendorinfo",3]],[[],["socvendorattributesiter",3]],[[],["socvendorbrand",3]],[[],["hypervisorinfo",3]],[[],["extendedfunctioninfo",3]],[[],["l2associativity",4]],[[],["memoryencryptioninfo",3]],[[],["u32",15]],[[],["str",15]],[[],[["option",4,["datiter"]],["datiter",3]]],[[],["u8",15]],null,null,[[],["u8",15]],null,null,[[["cpuidresult",3]],["bool",15]],[[["cachetype",4]],["bool",15]],[[["topologytype",4]],["bool",15]],[[["hypervisor",4]],["bool",15]],[[["l2associativity",4]],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],[["u32",15],["option",4,["u32"]]]],[[],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["cacheinfoiter"]],["cacheinfoiter",3]]],[[],[["option",4,["cacheparametersiter"]],["cacheparametersiter",3]]],[[],["u32",15]],[[],[["option",4,["directcacheaccessinfo"]],["directcacheaccessinfo",3]]],[[],[["option",4,["extendedfeatures"]],["extendedfeatures",3]]],[[],[["option",4,["extendedfunctioninfo"]],["extendedfunctioninfo",3]]],[[],[["extendedstateinfo",3],["option",4,["extendedstateinfo"]]]],[[],[["extendedtopologyiter",3],["option",4,["extendedtopologyiter"]]]],[[],[["featureinfo",3],["option",4,["featureinfo"]]]],[[],[["option",4,["hypervisorinfo"]],["hypervisorinfo",3]]],[[],[["memoryencryptioninfo",3],["option",4,["memoryencryptioninfo"]]]],[[],[["option",4,["monitormwaitinfo"]],["monitormwaitinfo",3]]],[[],[["option",4,["performancemonitoringinfo"]],["performancemonitoringinfo",3]]],[[],[["processorfrequencyinfo",3],["option",4,["processorfrequencyinfo"]]]],[[],[["option",4,["processorserial"]],["processorserial",3]]],[[],[["option",4,["processortraceinfo"]],["processortraceinfo",3]]],[[],["u32",15]],[[],[["option",4,["rdtallocationinfo"]],["rdtallocationinfo",3]]],[[],[["rdtmonitoringinfo",3],["option",4,["rdtmonitoringinfo"]]]],[[],[["option",4,["sgxinfo"]],["sgxinfo",3]]],[[],["u16",15]],[[],[["socvendorinfo",3],["option",4,["socvendorinfo"]]]],[[],["u32",15]],[[],[["option",4,["thermalpowerinfo"]],["thermalpowerinfo",3]]],[[],[["option",4,["tscinfo"]],["tscinfo",3]]],[[],[["option",4,["socvendorattributesiter"]],["socvendorattributesiter",3]]],[[],[["socvendorbrand",3],["option",4,["socvendorbrand"]]]],[[],[["vendorinfo",3],["option",4,["vendorinfo"]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["bool",15]],[[],["bool",15]],[[],["hypervisor",4]],[[],["u8",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["extendedstateiter",3]],[[],["sgxsectioniter",3]],[[],[["l2associativity",4],["option",4,["l2associativity"]]]],[[],[["option",4,["l2catinfo"]],["l2catinfo",3]]],[[],[["option",4,["l3catinfo"]],["l3catinfo",3]]],[[],[["option",4,["l3monitoringinfo"]],["l3monitoringinfo",3]]],[[],["u16",15]],[[],["u8",15]],[[],["u8",15]],[[],["topologytype",4]],[[],[["option",4,["u8"]],["u8",15]]],[[],["u8",15]],[[],["u16",15]],[[],["usize",15]],[[],["usize",15]],[[],["u8",15]],[[],["u8",15]],[[],["u32",15]],[[],["u16",15]],[[],["u8",15]],[[],["u32",15]],[[],[["option",4,["membwallocationinfo"]],["membwallocationinfo",3]]],[[],["u32",15]],[[],["u32",15]],[[],["u8",15]],null,[[["cpuidresult",3]],["bool",15]],[[["hypervisor",4]],["bool",15]],[[]],[[],[["option",4,["cacheinfo"]],["cacheinfo",3]]],[[],[["cacheparameter",3],["option",4,["cacheparameter"]]]],[[],[["extendedtopologylevel",3],["option",4,["extendedtopologylevel"]]]],[[],[["option",4,["extendedstate"]],["extendedstate",3]]],[[],[["sgxsectioninfo",4],["option",4,["sgxsectioninfo"]]]],[[],[["datinfo",3],["option",4,["datinfo"]]]],[[],[["option",4,["cpuidresult"]],["cpuidresult",3]]],[[],["u32",15]],null,[[],["u8",15]],[[],["u32",15]],[[],["u32",15]],[[],["u8",15]],[[],[["option",4,["u8"]],["u8",15]]],[[],["u8",15]],[[],["u64",15]],[[],["usize",15]],[[],["u16",15]],[[],[["option",4,["str"]],["str",15]]],[[],["u16",15]],[[],["u16",15]],[[],["u32",15]],[[]],[[],["u64",15]],[[],["u32",15]],[[],["u32",15]],[[],["usize",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u16",15]],[[],["u8",15]],null,[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["u64",15],["option",4,["u64"]]]],[[],[["u32",15],["option",4,["u32"]]]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u8",15]],[[],["u16",15]],[[]],[[],["u32",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["u32",15]],["cpuidresult",3]]],"p":[[4,"CacheInfoType"],[4,"TopologyType"],[4,"CacheType"],[4,"DatType"],[4,"L2Associativity"],[4,"SgxSectionInfo"],[4,"Hypervisor"],[3,"CpuIdResult"],[3,"HypervisorInfo"],[3,"VendorInfo"],[3,"SoCVendorBrand"],[3,"CacheParameter"],[3,"CpuId"],[3,"CacheInfoIter"],[3,"CacheInfo"],[3,"ProcessorSerial"],[3,"FeatureInfo"],[3,"CacheParametersIter"],[3,"MonitorMwaitInfo"],[3,"ThermalPowerInfo"],[3,"ExtendedFeatures"],[3,"DirectCacheAccessInfo"],[3,"PerformanceMonitoringInfo"],[3,"ExtendedTopologyIter"],[3,"ExtendedTopologyLevel"],[3,"ExtendedStateInfo"],[3,"ExtendedStateIter"],[3,"ExtendedState"],[3,"RdtMonitoringInfo"],[3,"L3MonitoringInfo"],[3,"RdtAllocationInfo"],[3,"L3CatInfo"],[3,"L2CatInfo"],[3,"MemBwAllocationInfo"],[3,"SgxInfo"],[3,"SgxSectionIter"],[3,"EpcSection"],[3,"ProcessorTraceInfo"],[3,"TscInfo"],[3,"ProcessorFrequencyInfo"],[3,"DatIter"],[3,"DatInfo"],[3,"SoCVendorInfo"],[3,"SoCVendorAttributesIter"],[3,"ExtendedFunctionInfo"],[3,"MemoryEncryptionInfo"]]},\
"trapframe":{"doc":"","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,5,11,11,12,11,11,11,11,11,11],"n":["GeneralRegs","UserContext","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","error_code","fmt","fmt","from","from","fsbase","general","get_sp","get_syscall_args","get_syscall_num","get_syscall_ret","gsbase","into","into","ne","ne","r10","r11","r12","r13","r14","r15","r8","r9","rax","rbp","rbx","rcx","rdi","rdx","rflags","rip","rsi","rsp","run_fncall","set_ip","set_sp","set_syscall_ret","set_tls","syscall_fn_entry","to_owned","to_owned","trap_num","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["trapframe","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["General registers","User space context","","","","","","","","","","","","","","","","","","","","Get stack pointer","Get syscall args","Get number of syscall","Get return value of syscall","","","","","","","","","","","","","","","","","","","","","","","","Go to user context by function return, within the same …","Set instruction pointer","Set stack pointer","Set return value of syscall","Set tls pointer","The syscall entry of function call.","","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,2,2,1,1,1,1,1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,1,2,1,1,2,1,2,1,2],"f":[null,null,[[]],[[]],[[]],[[]],[[],["usercontext",3]],[[],["generalregs",3]],[[]],[[]],[[],["usercontext",3]],[[],["generalregs",3]],[[["usercontext",3]],["bool",15]],[[["generalregs",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],null,null,[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[["usercontext",3]],["bool",15]],[[["generalregs",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"UserContext"],[3,"GeneralRegs"]]},\
"volatile":{"doc":"Provides the wrapper type <code>Volatile</code>, which wraps a …","t":[3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Volatile","access","borrow","borrow_mut","clone","extract_inner","fmt","fmt","from","index","index_mut","into","map","map_mut","new","new_read_only","new_write_only","read","read_only","try_from","try_into","type_id","update","write","write_only","ReadOnly","ReadWrite","Readable","Writable","WriteOnly","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","fmt","fmt","fmt","from","from","from","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["volatile","","","","","","","","","","","","","","","","","","","","","","","","","volatile::access","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Wraps a reference to make accesses to the referenced …","Allows creating read-only and write-only <code>Volatile</code> values.","","","","Extracts the inner value stored in the wrapper type.","","","","Applies the index operation on the wrapped slice.","Applies the mutable index operation on the wrapped slice.","","Constructs a new <code>Volatile</code> reference by mapping the …","Constructs a new mutable <code>Volatile</code> reference by mapping …","Constructs a new volatile instance wrapping the given …","Constructs a new read-only volatile instance wrapping the …","Constructs a new write-only volatile instance wrapping …","Performs a volatile read of the contained value.","Restricts access permissions to read-only.","","","","Updates the contained value using the given closure and …","Performs a volatile write, setting the contained value to …","Restricts access permissions to write-only.","Zero-sized marker type for allowing only read access.","Zero-sized marker type for allowing both read and write …","Helper trait that is implemented by <code>ReadWrite</code> and <code>ReadOnly</code>…","Helper trait that is implemented by <code>ReadWrite</code> and …","Zero-sized marker type for allowing only write access.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4],"f":[null,null,[[]],[[]],[[],["volatile",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["volatile",3]],[[],["volatile",3]],[[]],[[],["volatile",3]],[[],["volatile",3]],[[],["volatile",3]],[[],[["volatile",3,["readonly"]],["readonly",3]]],[[],[["writeonly",3],["volatile",3,["writeonly"]]]],[[]],[[],[["volatile",3,["readonly"]],["readonly",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],[["writeonly",3],["volatile",3,["writeonly"]]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["readwrite",3]],[[],["readonly",3]],[[],["writeonly",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Volatile"],[3,"ReadWrite"],[3,"ReadOnly"],[3,"WriteOnly"]]},\
"x86_64":{"doc":"This crate provides x86_64 specific functions and data …","t":[4,13,13,13,13,0,11,11,11,11,11,11,11,0,11,0,14,0,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,0,5,0,0,5,0,0,0,5,5,5,5,5,5,6,3,8,6,8,6,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,3,3,3,3,3,8,8,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,10,11,11,5,10,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,10,11,11,5,5,5,5,5,13,13,13,4,3,13,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,18,18,18,3,3,3,3,3,3,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,18,3,3,3,18,18,18,3,18,18,18,18,18,18,18,3,18,18,3,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,3,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,5,5,18,18,18,18,18,18,18,18,3,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,0,0,11,12,0,0,11,11,0,11,12,18,18,18,18,18,18,18,4,3,18,18,3,18,18,18,18,18,18,18,3,13,18,18,18,18,13,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,4,6,6,3,3,13,6,6,18,13,3,3,3,13,18,18,3,6,3,18,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,12,12,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,8,10,10,0,0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,4,4,13,4,3,8,8,3,3,13,13,13,3,13,13,13,13,8,13,13,13,13,3,13,13,13,8,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,12,12,3,8,3,3,3,8,18,18,18,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,4,13,18,18,13,18,18,18,3,3,3,3,3,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,10,10,3,11,11,11,11,11,12,11,12,11,12,11,11,11],"n":["PrivilegeLevel","Ring0","Ring1","Ring2","Ring3","addr","borrow","borrow_mut","clone","eq","fmt","from","from_u16","instructions","into","registers","software_interrupt","structures","try_from","try_into","type_id","PhysAddr","PhysAddrNotValid","VirtAddr","VirtAddrNotValid","add","add","add","add","add_assign","add_assign","add_assign","add_assign","align_down","align_down","align_down","align_up","align_up","align_up","as_mut_ptr","as_ptr","as_u64","as_u64","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","cmp","cmp","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_ptr","into","into","into","into","is_aligned","is_aligned","is_null","is_null","ne","ne","new","new","new_truncate","new_truncate","new_unsafe","new_unsafe","p1_index","p2_index","p3_index","p4_index","page_offset","partial_cmp","partial_cmp","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","try_new","type_id","type_id","type_id","type_id","zero","zero","bochs_breakpoint","hlt","interrupts","nop","port","random","read_rip","segmentation","tables","tlb","are_enabled","disable","enable","enable_and_hlt","int3","without_interrupts","Port","PortGeneric","PortReadAccess","PortReadOnly","PortWriteAccess","PortWriteOnly","ReadOnlyAccess","ReadWriteAccess","WriteOnlyAccess","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","new","read","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","RdRand","borrow","borrow_mut","clone","fmt","from","get_u16","get_u32","get_u64","into","new","try_from","try_into","type_id","BASE","CS","DS","ES","FS","GS","SS","Segment","Segment64","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cs","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_reg","get_reg","get_reg","get_reg","get_reg","get_reg","get_reg","into","into","into","into","into","into","load_ds","load_es","load_fs","load_gs","load_ss","rdfsbase","rdgsbase","read_base","read_base","read_base","set_cs","set_reg","set_reg","set_reg","set_reg","set_reg","set_reg","set_reg","swap","swap_gs","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","wrfsbase","wrgsbase","write_base","write_base","write_base","lgdt","lidt","load_tss","sgdt","sidt","Address","All","AllExceptGlobal","InvPicdCommand","Pcid","Single","borrow","borrow","borrow_mut","borrow_mut","flush","flush_all","flush_pcid","fmt","fmt","from","from","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","value","control","model_specific","rflags","xcontrol","ALIGNMENT_MASK","CACHE_DISABLE","CONTROL_FLOW_ENFORCEMENT","Cr0","Cr0Flags","Cr2","Cr3","Cr3Flags","Cr4","Cr4Flags","DEBUGGING_EXTENSIONS","EMULATE_COPROCESSOR","EXTENSION_TYPE","FSGSBASE","KEY_LOCKER","L5_PAGING","MACHINE_CHECK_EXCEPTION","MONITOR_COPROCESSOR","NOT_WRITE_THROUGH","NUMERIC_ERROR","OSFXSR","OSXMMEXCPT_ENABLE","OSXSAVE","PAGE_GLOBAL","PAGE_LEVEL_CACHE_DISABLE","PAGE_LEVEL_WRITETHROUGH","PAGE_SIZE_EXTENSION","PAGING","PCID","PERFORMANCE_MONITOR_COUNTER","PHYSICAL_ADDRESS_EXTENSION","PROTECTED_MODE_ENABLE","PROTECTED_MODE_VIRTUAL_INTERRUPTS","PROTECTION_KEY","PROTECTION_KEY_SUPERVISOR","SAFER_MODE_EXTENSIONS","SUPERVISOR_MODE_ACCESS_PREVENTION","SUPERVISOR_MODE_EXECUTION_PROTECTION","TASK_SWITCHED","TIMESTAMP_DISABLE","USER_MODE_INSTRUCTION_PREVENTION","VIRTUAL_8086_MODE_EXTENSIONS","VIRTUAL_MACHINE_EXTENSIONS","WRITE_PROTECT","all","all","all","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","contains","contains","contains","empty","empty","empty","eq","eq","eq","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","hash","hash","hash","insert","insert","insert","intersects","intersects","intersects","into","into","into","into","into","into","into","is_all","is_all","is_all","is_empty","is_empty","is_empty","ne","ne","ne","not","not","not","partial_cmp","partial_cmp","partial_cmp","read","read","read","read","read_pcid","read_raw","read_raw","read_raw","remove","remove","remove","set","set","set","sub","sub","sub","sub_assign","sub_assign","sub_assign","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update","write","write","write","write_pcid","write_raw","write_raw","Efer","EferFlags","FAST_FXSAVE_FXRSTOR","FsBase","GsBase","KernelGsBase","LONG_MODE_ACTIVE","LONG_MODE_ENABLE","LONG_MODE_SEGMENT_LIMIT_ENABLE","LStar","MSR","MSR","MSR","MSR","MSR","MSR","MSR","Msr","NO_EXECUTE_ENABLE","SECURE_VIRTUAL_MACHINE_ENABLE","SFMask","SYSTEM_CALL_EXTENSIONS","Star","TRANSLATION_CACHE_EXTENSION","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","cmp","contains","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersects","into","into","into","into","into","into","into","into","into","is_all","is_empty","ne","new","not","partial_cmp","read","read","read","read","read","read","read","read","read_raw","read_raw","remove","set","sub","sub_assign","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","write","write","write","write","write","write","write","write","write_raw","write_raw","ALIGNMENT_CHECK","AUXILIARY_CARRY_FLAG","CARRY_FLAG","DIRECTION_FLAG","ID","INTERRUPT_FLAG","IOPL_HIGH","IOPL_LOW","NESTED_TASK","OVERFLOW_FLAG","PARITY_FLAG","RESUME_FLAG","RFlags","SIGN_FLAG","TRAP_FLAG","VIRTUAL_8086_MODE","VIRTUAL_INTERRUPT","VIRTUAL_INTERRUPT_PENDING","ZERO_FLAG","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","cmp","contains","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersects","into","is_all","is_empty","ne","not","partial_cmp","read","read_raw","remove","set","sub","sub_assign","toggle","try_from","try_into","type_id","write","write_raw","BNDCSR","BNDREG","HI16_ZMM","LWP","MPK","OPMASK","SSE","X87","XCr0","XCr0Flags","YMM","ZMM_HI256","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","cmp","contains","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersects","into","into","is_all","is_empty","ne","not","partial_cmp","read","read_raw","remove","set","sub","sub_assign","toggle","try_from","try_from","try_into","try_into","type_id","type_id","write","write_raw","DescriptorTablePointer","base","borrow","borrow_mut","clone","fmt","from","gdt","idt","into","limit","paging","port","try_from","try_into","tss","type_id","0","ACCESSED","AVAILABLE","BASE_0_23","BASE_24_31","CONFORMING","DEFAULT_SIZE","DPL_RING_3","Descriptor","DescriptorFlags","EXECUTABLE","GRANULARITY","GlobalDescriptorTable","KERNEL_CODE32","KERNEL_CODE64","KERNEL_DATA","LIMIT_0_15","LIMIT_16_19","LONG_MODE","PRESENT","SegmentSelector","SystemSegment","USER_CODE32","USER_CODE64","USER_DATA","USER_SEGMENT","UserSegment","WRITABLE","add_entry","all","as_raw_slice","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","contains","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_raw_slice","hash","index","insert","intersects","into","into","into","into","is_all","is_empty","kernel_code_segment","kernel_data_segment","load","load_unsafe","ne","ne","new","new","not","partial_cmp","remove","rpl","set","set_rpl","sub","sub_assign","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tss_segment","type_id","type_id","type_id","type_id","user_code_segment","user_data_segment","CAUSED_BY_WRITE","DescriptorTable","DivergingHandlerFunc","DivergingHandlerFuncWithErrCode","Entry","EntryOptions","Gdt","HandlerFunc","HandlerFuncWithErrCode","INSTRUCTION_FETCH","Idt","InterruptDescriptorTable","InterruptStackFrame","InterruptStackFrameValue","Ldt","MALFORMED_TABLE","PROTECTION_VIOLATION","PageFaultErrorCode","PageFaultHandlerFunc","SelectorErrorCode","USER_MODE","alignment_check","all","as_mut","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_range_exceeded","breakpoint","clone","clone","clone","clone","clone","clone","clone","cmp","code_segment","contains","cpu_flags","debug","deref","descriptor_table","device_not_available","disable_interrupts","divide_error","double_fault","empty","eq","eq","eq","eq","eq","extend","external","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","general_protection_fault","hash","hash","hash","index","index","index_mut","insert","instruction_pointer","intersects","into","into","into","into","into","into","into","into","invalid_opcode","invalid_tss","is_all","is_empty","is_null","load","load_unsafe","machine_check","missing","ne","ne","ne","new","new","new_truncate","non_maskable_interrupt","not","overflow","page_fault","partial_cmp","remove","reset","security_exception","segment_not_present","set","set_handler_addr","set_handler_fn","set_handler_fn","set_handler_fn","set_handler_fn","set_handler_fn","set_present","set_privilege_level","set_stack_index","simd_floating_point","slice","slice_mut","stack_pointer","stack_segment","stack_segment_fault","sub","sub_assign","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","virtualization","x87_floating_point","FrameAllocator","FrameDeallocator","allocate_frame","deallocate_frame","frame","mapper","page","page_table","PhysFrame","PhysFrameRange","PhysFrameRangeInclusive","add","add_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","containing_address","end","end","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_start_address","from_start_address_unchecked","into","into","into","into_iter","into_iter","is_empty","is_empty","ne","ne","ne","next","next","partial_cmp","range","range_inclusive","size","start","start","start_address","sub","sub","sub_assign","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","FlagUpdateError","FrameAllocationFailed","InvalidFrameAddress","InvalidFrameAddress","InvalidFrameAddress","InvalidPageTable","MapToError","Mapped","MappedFrame","MappedPageTable","Mapper","MapperAllSizes","MapperFlush","MapperFlushAll","NotActive","NotMapped","NotRecursive","OffsetPageTable","PageAlreadyMapped","PageNotMapped","PageNotMapped","PageNotMapped","PageTableFrameMapping","ParentEntryHugePage","ParentEntryHugePage","ParentEntryHugePage","ParentEntryHugePage","RecursivePageTable","Size1GiB","Size2MiB","Size4KiB","Translate","TranslateError","TranslateResult","UnmapError","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","flush","flush_all","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame_to_pointer","from","from","from","from","from","from","from","from","from","from","from","from","identity_map","ignore","ignore","into","into","into","into","into","into","into","into","into","into","into","into","level_4_table","level_4_table","level_4_table","map_to","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","new","new","new","new_unchecked","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","size","start_address","translate","translate","translate","translate","translate_addr","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","flags","frame","offset","AddressNotAligned","NotGiantPageSize","Page","PageRange","PageRangeInclusive","PageSize","SIZE","SIZE","SIZE_AS_DEBUG_STR","Size1GiB","Size2MiB","Size4KiB","add","add_assign","as_4kib_page_range","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","containing_address","end","end","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_page_table_indices","from_page_table_indices_1gib","from_page_table_indices_2mib","from_start_address","from_start_address_unchecked","into","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_empty","ne","ne","ne","next","next","p1_index","p2_index","p3_index","p4_index","partial_cmp","partial_cmp","partial_cmp","partial_cmp","range","range_inclusive","size","start","start","start_address","sub","sub","sub_assign","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ACCESSED","BIT_10","BIT_11","BIT_52","BIT_53","BIT_54","BIT_55","BIT_56","BIT_57","BIT_58","BIT_59","BIT_60","BIT_61","BIT_62","BIT_9","DIRTY","FrameError","FrameNotPresent","GLOBAL","HUGE_PAGE","HugeFrame","NO_CACHE","NO_EXECUTE","PRESENT","PageOffset","PageTable","PageTableEntry","PageTableFlags","PageTableIndex","USER_ACCESSIBLE","WRITABLE","WRITE_THROUGH","addr","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","contains","default","empty","eq","eq","eq","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","index","index","index_mut","index_mut","insert","intersects","into","into","into","into","into","into","is_all","is_empty","is_unused","iter","iter_mut","ne","ne","ne","new","new","new","new","new_truncate","new_truncate","not","partial_cmp","partial_cmp","partial_cmp","remove","set","set_addr","set_flags","set_frame","set_unused","sub","sub_assign","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","zero","PortRead","PortWrite","read_from_port","write_to_port","TaskStateSegment","borrow","borrow_mut","clone","fmt","from","interrupt_stack_table","into","iomap_base","new","privilege_stack_table","try_from","try_into","type_id"],"q":["x86_64","","","","","","","","","","","","","","","","","","","","","x86_64::addr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::instructions","","","","","","","","","","x86_64::instructions::interrupts","","","","","","x86_64::instructions::port","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::instructions::random","","","","","","","","","","","","","","x86_64::instructions::segmentation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::instructions::tables","","","","","x86_64::instructions::tlb","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::registers","","","","x86_64::registers::controlx86_64::registers::model_specific","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::registers::rflags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::registers::xcontrol","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures","","","","","","","","","","","","","","","","","x86_64::structures::gdt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::idtx86_64::structures::paging","","","","","","","","x86_64::structures::paging::frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::paging::mapper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::paging::mapper::TranslateResult","","","x86_64::structures::paging::page","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::paging::page_table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::port","","","","x86_64::structures::tss","","","","","","","","","","","","",""],"d":["Represents a protection ring level.","Privilege-level 0 (most privilege): This level is used by …","Privilege-level 1 (moderate privilege): This level is …","Privilege-level 2 (moderate privilege): Like level 1, …","Privilege-level 3 (least privilege): This level is used …","Physical and virtual addresses manipulation","","","","","","","Creates a <code>PrivilegeLevel</code> from a numeric value. The value …","Special x86_64 instructions.","","Access to various system and model specific registers.","Generate a software interrupt by invoking the <code>int</code> …","Representations of various x86 specific structures and …","","","","A 64-bit physical memory address.","A passed <code>u64</code> was not a valid physical address.","A canonical 64-bit virtual memory address.","A passed <code>u64</code> was not a valid virtual address.","","","","","","","","","Align address downwards.","Aligns the virtual address downwards to the given …","Aligns the physical address downwards to the given …","Align address upwards.","Aligns the virtual address upwards to the given alignment.","Aligns the physical address upwards to the given …","Converts the address to a mutable raw pointer.","Converts the address to a raw pointer.","Converts the address to an <code>u64</code>.","Converts the address to an <code>u64</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a virtual address from the given pointer","","","","","Checks whether the virtual address has the demanded …","Checks whether the physical address has the demanded …","Convenience method for checking if a virtual address is …","Convenience method for checking if a physical address is …","","","Creates a new canonical virtual address.","Creates a new physical address.","Creates a new canonical virtual address, throwing out …","Creates a new physical address, throwing bits 52..64 away.","Creates a new virtual address, without any checks.","Creates a new physical address, without any checks.","Returns the 9-bit level 1 page table index.","Returns the 9-bit level 2 page table index.","Returns the 9-bit level 3 page table index.","Returns the 9-bit level 4 page table index.","Returns the 12-bit page offset of this virtual address.","","","","","","","","","","","","","","","","","","","","","Tries to create a new canonical virtual address.","Tries to create a new physical address.","","","","","Creates a virtual address that points to <code>0</code>.","Creates a physical address that points to <code>0</code>.","Emits a ‘magic breakpoint’ instruction for the Bochs …","Halts the CPU until the next interrupt arrives.","Enabling and disabling interrupts","Executes the <code>nop</code> instructions, which performs no …","Access to I/O ports","Support for build-in RNGs","Gets the current instruction pointer. Note that this is …","Provides functions to read and write segment registers.","Functions to load GDT, IDT, and TSS structures.","Functions to flush the translation lookaside buffer (TLB).","Returns whether interrupts are enabled.","Disable interrupts.","Enable interrupts.","Atomically enable interrupts and put the CPU to sleep","Cause a breakpoint exception by invoking the <code>int3</code> …","Run a closure with disabled interrupts.","A read-write I/O port.","An I/O port.","A marker trait for access types which allow reading port …","A read-only I/O port.","A marker trait for access types which allow writing port …","A write-only I/O port.","An access marker type indicating that a port is only …","An access marker type indicating that a port is allowed …","An access marker type indicating that a port is only …","","","","","","","","","","","","","","","","","","","","","","","Creates an I/O port with the given port number.","Reads from the port.","","","","","","","","","","","","","Writes to the port.","Used to obtain random numbers using x86_64’s RDRAND …","","","","","","Uniformly sampled u16. May fail in rare circumstances or …","Uniformly sampled u32. May fail in rare circumstances or …","Uniformly sampled u64. May fail in rare circumstances or …","","Creates Some(RdRand) if RDRAND is supported, None …","","","","MSR containing the segment base. This MSR can be used to …","Code Segment","Data Segment","ES Segment","FS Segment","GS Segment","Stack Segment","An x86 segment","An x86 segment which is actually used in 64-bit mode","","","","","","","","","","","","","Alias for <code>CS::get_reg()</code>","","","","","","","","","","","","","Returns the current value of the segment register.","","","","","","","","","","","","","Alias for <code>DS::set_reg()</code>","Alias for <code>ES::set_reg()</code>","Alias for <code>FS::set_reg()</code>","Alias for <code>GS::set_reg()</code>","Alias for <code>SS::set_reg()</code>","Alias for <code>FS::read_base()</code>","Alias for <code>GS::read_base()</code>","Reads the segment base address","","","Alias for <code>CS::set_reg()</code>","Reload the segment register. Depending on the segment, …","Note this is special since we cannot directly move to <code>CS</code>; …","","","","","","Swap <code>KernelGsBase</code> MSR and <code>GsBase</code> MSR.","Alias for <code>GS::swap()</code>","","","","","","","","","","","","","","","","","","","Alias for <code>FS::write_base()</code>.","Alias for <code>GS::write_base()</code>.","Writes the segment base address","","","Load a GDT.","Load an IDT.","Load the task state register using the <code>ltr</code> instruction.","Get the address of the current GDT.","Get the address of the current IDT.","The logical processor invalidates mappings—except …","The logical processor invalidates all …","The logical processor invalidates all mappings—except …","The Invalidate PCID Command to execute.","Structure of a PCID. A PCID has to be &lt;= 4096 for x86_64.","The logical processor invalidates all mappings—except …","","","","","Invalidate the given address in the TLB using the <code>invlpg</code> …","Invalidate the TLB completely by reloading the CR3 …","Invalidate the given address in the TLB using the <code>invpcid</code> …","","","","","","","Create a new PCID. Will result in a failure if the value …","","","","","","","Get the value of the current PCID.","Functions to read and write control registers.","Functions to read and write model specific registers.","Processor state stored in the RFLAGS register.","Access to various extended system registers","Enables automatic usermode alignment checking if […","Disables some processor caches, specifics are …","Enables Control-flow Enforcement Technology (CET)","Various control flags modifying the basic operation of …","Configuration flags of the <code>Cr0</code> register.","Contains the Page Fault Linear Address (PFLA).","Contains the physical address of the highest-level page …","Controls cache settings for the highest-level page table.","Contains various control flags that enable architectural …","Configuration flags of the <code>Cr4</code> register.","Enables I/O breakpoint capability and enforces treatment …","Force all x87 and MMX instructions to cause an <code>#NE</code> …","Indicates support of 387DX math coprocessor instructions.","Enables software running in 64-bit mode at any privilege …","Enables the Key Locker feature (Intel Only).","Enables 5-level paging on supported CPUs (Intel Only).","Enables the machine-check exception mechanism.","Enables monitoring of the coprocessor, typical for x87 …","Ignored, should always be unset.","Enables the native (internal) error reporting mechanism …","Enables the use of legacy SSE instructions; allows using …","Enables the SIMD floating-point exception (<code>#XF</code>) for …","Enables extended processor state management instructions, …","Enables the global page feature, allowing some page …","Disable caching for the table.","Use a writethrough cache policy for the table (otherwise …","Enables the use of 4MB physical frames; ignored if …","Enables paging.","Enables process-context identifiers (PCIDs).","Allows software running at any privilege level to use the …","Enables physical address extensions and 2MB physical …","Enables protected mode.","Enables support for protected-mode virtual interrupts.","Enables protection keys for user-mode pages.","Enables protection keys for supervisor-mode pages (Intel …","Enables SMX instructions (Intel Only).","Enables restrictions for supervisor-mode software when …","Prevents the execution of instructions that reside in …","Automatically set to 1 on <em>hardware</em> task switch.","When set, only privilege-level 0 can execute the <code>RDTSC</code> or …","Prevents the execution of the <code>SGDT</code>, <code>SIDT</code>, <code>SLDT</code>, <code>SMSW</code>, and …","Enables hardware-supported performance enhancements for …","Enables VMX instructions (Intel Only).","Controls whether supervisor-level writes to read-only …","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","Returns an empty set of flags","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Convert from underlying bit representation, preserving all…","Convert from underlying bit representation, preserving all…","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","Read the current set of CR0 flags.","Read the current page fault linear address from the CR2 …","Read the current P4 table address from the CR3 register.","Read the current set of CR4 flags.","Read the current P4 table address from the CR3 register …","Read the current raw CR0 value.","Read the current P4 table address from the CR3 register","Read the current raw CR4 value.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","Updates CR0 flags.","Updates CR4 flags.","Write CR0 flags.","Write a new P4 table address into the CR3 register.","Write CR4 flags.","Write a new P4 table address into the CR3 register.","Write raw CR0 flags.","Write raw CR4 flags.","The Extended Feature Enable Register.","Flags of the Extended Feature Enable Register.","Enable the <code>fxsave</code> and <code>fxrstor</code> instructions to execute …","[FS].Base Model Specific Register.","[GS].Base Model Specific Register.","KernelGsBase Model Specific Register.","Indicates that long mode is active.","Activates long mode, requires activating paging.","Enable certain limit checks in 64-bit mode.","Syscall Register: LSTAR","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","A model specific register.","Enables the no-execute page-protection feature.","Enables SVM extensions.","Syscall Register: SFMASK","Enables the <code>syscall</code> and <code>sysret</code> instructions.","Syscall Register: STAR","Changes how the <code>invlpg</code> instruction operates on TLB …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Create an instance from a register.","Returns the complement of this set of flags.","","Read 64 bits msr register.","Read the current EFER flags.","Read the current FsBase register.","Read the current GsBase register.","Read the current KernelGsBase register.","Read the Ring 0 and Ring 3 segment bases. Returns","Read the current LStar register. This holds the target …","Read to the SFMask register. The SFMASK register is used …","Read the current raw EFER flags.","Read the Ring 0 and Ring 3 segment bases. The remaining …","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update EFER flags.","Write 64 bits to msr register.","Write the EFER flags, preserving reserved values.","Write a given virtual address to the FS.Base register.","Write a given virtual address to the GS.Base register.","Write a given virtual address to the KernelGsBase …","Write the Ring 0 and Ring 3 segment bases. The remaining …","Write a given virtual address to the LStar register. This …","Write to the SFMask register. The SFMASK register is used …","Write the EFER flags.","Write the Ring 0 and Ring 3 segment bases. The remaining …","Enable automatic alignment checking if CR0.AM is set. …","Set by hardware if last arithmetic operation generated a …","Set by hardware if last arithmetic operation generated a …","Determines the order in which strings are processed.","Processor feature identification flag.","Enable interrupts.","The high bit of the I/O Privilege Level field.","The low bit of the I/O Privilege Level field.","Used by <code>iret</code> in hardware task switch mode to determine if …","Set by hardware to indicate that the sign bit of the …","Set by hardware if last result has an even number of 1 …","Allows to restart an instruction following an instrucion …","The RFLAGS register.","Set by hardware if last arithmetic operation resulted in …","Enable single-step mode for debugging.","Enable the virtual-8086 mode.","Virtual image of the INTERRUPT_FLAG bit.","Indicates that an external, maskable interrupt is pending.","Set by hardware if last arithmetic operation resulted in …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Returns the current value of the RFLAGS register.","Returns the raw current value of the RFLAGS register.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","Writes the RFLAGS register, preserves reserved bits.","Writes the RFLAGS register.","Enables MPX instructions and using the BNDCFGU and …","Enables MPX instructions and using the BND0-BND3 bound …","Enables AVX-512 instructions and using the upper ZMM …","Enables Lightweight Profiling extensions and managing LWP …","Enables using the PKRU register with <code>XSAVE</code>/<code>XRSTOR</code>.","Enables AVX-512 instructions and using the K0-K7 mask …","Enables using MXCSR and the XMM registers with <code>XSAVE</code>/…","Enables using the x87 FPU state with <code>XSAVE</code>/<code>XRSTOR</code>.","Extended feature enable mask register","Configuration flags of the XCr0 register.","Enables AVX instructions and using the upper halves of …","Enables AVX-512 instructions and using the upper halves …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Read the current set of XCR0 flags.","Read the current raw XCR0 value.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","","","","Write XCR0 flags.","Write raw XCR0 flags.","A struct describing a pointer to a descriptor table (GDT …","Pointer to the memory region containing the DT.","","","","","","Types for the Global Descriptor Table and segment …","Provides types for the Interrupt Descriptor Table and its …","","Size of the DT.","Abstractions for page tables and other paging related …","Traits for accessing I/O ports.","","","Provides a type for the task state segment structure.","","","Set by the processor if this segment has been accessed. …","Available for use by the Operating System","Bits <code>0..=23</code> of the base field (ignored in 64-bit mode, …","Bits <code>24..=31</code> of the base field (ignored in 64-bit mode, …","For code segments, sets the segment as “conforming”, …","Use 32-bit (as opposed to 16-bit) operands. If <code>LONG_MODE</code> …","The DPL for this descriptor is Ring 3. In 64-bit mode, …","A 64-bit mode segment descriptor.","Flags for a GDT descriptor. Not all flags are valid for …","This flag must be set for code segments and unset for …","Limit field is scaled by 4096 bytes. In 64-bit mode, …","A 64-bit mode global descriptor table (GDT).","A flat 32-bit kernel code segment","A 64-bit kernel code segment","A kernel data segment (64-bit or flat 32-bit)","Bits <code>0..=15</code> of the limit field (ignored in 64-bit mode)","Bits <code>16..=19</code> of the limit field (ignored in 64-bit mode)","Must be set for 64-bit code segments, unset otherwise.","Must be set for any segment, causes a segment not present …","Specifies which element to load into a segment from …","A system segment descriptor such as a LDT or TSS …","A flat 32-bit user code segment","A 64-bit user code segment","A user data segment (64-bit or flat 32-bit)","This flag must be set for user segments (in contrast to …","Descriptor for a code or data segment.","For 32-bit data segments, sets the segment as writable. …","Adds the given segment descriptor to the GDT, returning …","Returns the set containing all flags.","Get a reference to the internal table.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","Forms a GDT from a slice of <code>u64</code>.","","Returns the GDT index.","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Creates a segment descriptor for a 64-bit kernel code …","Creates a segment descriptor for a kernel data segment …","Loads the GDT in the CPU using the <code>lgdt</code> instruction. This …","Loads the GDT in the CPU using the <code>lgdt</code> instruction. This …","","","Creates a new SegmentSelector","Creates an empty GDT.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Returns the requested privilege level.","Inserts or removes the specified flags depending on the …","Set the privilege level for this Segment selector.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","","","","","","Creates a TSS system descriptor for the given TSS.","","","","","Creates a segment descriptor for a 64-bit ring 3 code …","Creates a segment descriptor for a ring 3 data segment …","If this flag is set, the memory access that caused the …","The possible descriptor table values.","A handler function that must not return, e.g. for a …","A handler function with an error code that must not …","An Interrupt Descriptor Table entry.","Represents the options field of an IDT entry.","Global Descriptor Table.","A handler function for an interrupt or an exception …","A handler function for an exception that pushes an error …","If this flag is set, it indicates that the access that …","Interrupt Descriptor Table.","An Interrupt Descriptor Table with 256 entries.","Wrapper type for the interrupt stack frame pushed by the …","Represents the interrupt stack frame pushed by the CPU on …","Logical Descriptor Table.","If this flag is set, the page fault is a result of the …","If this flag is set, the page fault was caused by a …","Describes an page fault error code.","A page fault handler function that pushes a page fault …","Describes an error code referencing a segment selector.","If this flag is set, an access in user mode (CPL=3) …","An alignment check exception (<code>#AC</code>) occurs when an …","Returns the set containing all flags.","Gives mutable access to the contents of the interrupt …","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","A bound-range exception (<code>#BR</code>) exception can occur as a …","A breakpoint (<code>#BP</code>) exception occurs when an <code>INT3</code> …","","","","","","","","","The code segment selector, padded with zeros.","Returns <code>true</code> all of the flags in <code>other</code> are contained …","The flags register before the interrupt handler was …","When the debug-exception mechanism is enabled, a <code>#DB</code> …","","The descriptor table this error code refers to.","A device not available exception (<code>#NM</code>) occurs under any …","Let the CPU disable hardware interrupts when the handler …","A divide error (<code>#DE</code>) occurs when the denominator of a DIV …","A double fault (<code>#DF</code>) exception can occur when a second …","Returns an empty set of flags","","","","","","","If true, indicates that the exception occurred during …","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","A general protection fault (<code>#GP</code>) can occur in various …","","","","Returns the IDT entry with the specified index.","The index of the selector which caused the error.","Returns a mutable reference to the IDT entry with the …","Inserts the specified flags in-place.","This value points to the instruction that should be …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","An invalid opcode exception (<code>#UD</code>) occurs when an attempt …","An invalid TSS exception (<code>#TS</code>) occurs only as a result of …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","If true, the #SS or #GP has returned zero as opposed to a …","Loads the IDT in the CPU using the <code>lidt</code> command.","Loads the IDT in the CPU using the <code>lidt</code> command.","The machine check exception (<code>#MC</code>) is model specific. …","Creates a non-present IDT entry (but sets the must-be-one …","","","","Creates a new IDT filled with non-present entries.","Create a SelectorErrorCode. Returns None is any of the …","Create a new SelectorErrorCode dropping any reserved bits …","An non maskable interrupt exception (NMI) occurs as a …","Returns the complement of this set of flags.","An overflow exception (<code>#OF</code>) occurs as a result of …","A page fault (<code>#PF</code>) can occur during a memory access in …","","Removes the specified flags in-place.","Resets all entries of this IDT in place.","The Security Exception (<code>#SX</code>) signals security-sensitive …","An segment-not-present exception (<code>#NP</code>) occurs when an …","Inserts or removes the specified flags depending on the …","Set the handler address for the IDT entry and sets the …","Set the handler function for the IDT entry and sets the …","Set the handler function for the IDT entry and sets the …","Set the handler function for the IDT entry and sets the …","Set the handler function for the IDT entry and sets the …","Set the handler function for the IDT entry and sets the …","Set or reset the preset bit.","Set the required privilege level (DPL) for invoking the …","Assigns a Interrupt Stack Table (IST) stack to this …","The SIMD Floating-Point Exception (<code>#XF</code>) is used to handle …","Returns slice of IDT entries with the specified range.","Returns a mutable slice of IDT entries with the specified …","The stack pointer at the time of the interrupt.","The stack segment descriptor at the time of the interrupt …","An stack segment exception (<code>#SS</code>) can occur in the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","vector nr. 20","The x87 Floating-Point Exception-Pending exception (<code>#MF</code>) …","A trait for types that can allocate a frame of memory.","A trait for types that can deallocate a frame of memory.","Allocate a frame of the appropriate size and return it if …","Deallocate the given unused frame.","Abstractions for default-sized and huge physical memory …","Abstractions for reading and modifying the mapping of …","Abstractions for default-sized and huge virtual memory …","Abstractions for page tables and page table entries.","A physical memory frame.","An range of physical memory frames, exclusive the upper …","An range of physical memory frames, inclusive the upper …","","","","","","","","","","","","","Returns the frame that contains the given physical …","The end of the range, exclusive.","The start of the range, inclusive.","","","","","","","","","","Returns the frame that starts at the given virtual …","Returns the frame that starts at the given virtual …","","","","","","Returns whether the range contains no frames.","Returns whether the range contains no frames.","","","","","","","Returns a range of frames, exclusive <code>end</code>.","Returns a range of frames, inclusive <code>end</code>.","Returns the size the frame (4KB, 2MB or 1GB).","The start of the range, inclusive.","The start of the range, inclusive.","Returns the start address of the frame.","","","","","","","","","","","","","An error indicating that an <code>update_flags</code> call failed.","An additional frame was needed for the mapping process, …","The page table entry for the given virtual address points …","The page table entry for the given page points to an …","The page table entry for the given page points to an …","The given page table was not suitable to create a …","This error is returned from <code>map_to</code> and similar methods.","The virtual address is mapped to a physical frame.","Represents a physical frame mapped in a page table.","A Mapper implementation that relies on a PhysAddr to …","A trait for common page table operations on pages of size …","An empty convencience trait that requires the <code>Mapper</code> …","This type represents a page whose mapping has changed in …","This type represents a change of a page table requiring a …","The given page table was not active on the CPU.","The given virtual address is not mapped to a physical …","The given page table was not at an recursive address.","A Mapper implementation that requires that the complete …","The given page is already mapped to a physical frame.","The given page is not mapped to a physical frame.","The given page is not mapped to a physical frame.","The given page is not mapped to a physical frame.","Provides a virtual address mapping for physical page …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","A recursive page table is a last level page table with an …","The virtual address is mapped to a “huge” 1GiB frame.","The virtual address is mapped to a “large” 2MiB frame.","The virtual address is mapped to a 4KiB frame.","Provides methods for translating virtual addresses.","An error indicating that an <code>translate</code> call failed.","The return value of the <code>Translate::translate</code> function.","An error indicating that an <code>unmap</code> call failed.","","","","","","","","","","","","","","","","","","","","","","","","","Flush the page from the TLB to ensure that the newest …","Flush all pages from the TLB to ensure that the newest …","","","","","","","","","","","","","","Translate the given physical frame to a virtual page …","","","","","","","","","","","","","Maps the given frame to the virtual page with the same …","Don’t flush the TLB and silence the “must be used” …","Don’t flush the TLB and silence the “must be used” …","","","","","","","","","","","","","Returns a mutable reference to the wrapped level 4 …","Returns a mutable reference to the wrapped level 4 …","Returns a mutable reference to the wrapped level 4 …","Creates a new mapping in the page table.","Creates a new mapping in the page table.","","","","","","","","","","Creates a new <code>MappedPageTable</code> that uses the passed …","Creates a new <code>OffsetPageTable</code> that uses the given offset …","Creates a new RecursivePageTable from the passed level 4 …","Creates a new RecursivePageTable without performing any …","Set the flags of an existing page table level 2 entry","","","","","","","","","","Set the flags of an existing page table level 3 entry","","","","","","","","","","Set the flags of an existing page level 4 table entry","","","","","","","","","","Returns the size the frame (4KB, 2MB or 1GB).","Returns the start address of the frame.","Return the frame that the given virtual address is mapped …","","","","Translates the given virtual address to the physical …","Return the frame that the specified page is mapped to.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Removes a mapping from the page table and returns the …","","","","","","","","","","Updates the flags of an existing mapping.","","","","","","","","","","The entry flags in the lowest-level page table.","The mapped frame.","The offset whithin the mapped frame.","The given address was not sufficiently aligned.","This trait is implemented for 4KiB and 2MiB pages, but …","A virtual memory page.","A range of pages with exclusive upper bound.","A range of pages with inclusive upper bound.","Trait for abstracting over the three possible page sizes …","The page size in bytes.","The page size in bytes.","A string representation of the page size for debug output.","A “giant” 1GiB page.","A “huge” 2MiB page.","A standard 4KiB page.","","","Converts the range of 2MiB pages to a range of 4KiB pages.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the page that contains the given virtual address.","The end of the range, exclusive.","The end of the range, inclusive.","","","","","","","","","","","","","","","","","","","","","","Returns the 4KiB memory page with the specified page …","Returns the 1GiB memory page with the specified page …","Returns the 2MiB memory page with the specified page …","Returns the page that starts at the given virtual address.","Returns the page that starts at the given virtual address.","","","","","","","","","","Returns wether this range contains no pages.","Returns wether this range contains no pages.","","","","","","Returns the level 1 page table index of this page.","Returns the level 2 page table index of this page.","Returns the level 3 page table index of this page.","Returns the level 4 page table index of this page.","","","","","Returns a range of pages, exclusive <code>end</code>.","Returns a range of pages, inclusive <code>end</code>.","Returns the size the page (4KB, 2MB or 1GB).","The start of the range, inclusive.","The start of the range, inclusive.","Returns the start address of the page.","","","","","","","","","","","","","","","","","","","","","","","","","Set by the CPU when the mapped frame or page table is …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Set by the CPU on a write to the mapped frame.","The error returned by the <code>PageTableEntry::frame</code> method.","The entry does not have the <code>PRESENT</code> flag set, so it isn’…","Indicates that the mapping is present in all address …","Specifies that the entry maps a huge frame instead of a …","The entry does have the <code>HUGE_PAGE</code> flag set. The <code>frame</code> …","Disables caching for the pointed entry is cacheable.","Forbid code execution from the mapped frames.","Specifies whether the mapped frame or page table is …","A 12-bit offset into a 4KiB Page.","Represents a page table.","A 64-bit page table entry.","Possible flags for a page table entry.","A 9-bit index into a page table.","Controls whether accesses from userspace (i.e. ring 3) …","Controls whether writes to the mapped frames are allowed.","If this bit is set, a “write-through” policy is used …","Returns the physical address mapped by this entry, might …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","Returns an empty set of flags","","","","","","Returns the flags of this entry.","","","","","","","","","","","Returns the physical frame mapped by this entry.","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns whether this entry is zero.","Returns an iterator over the entries of the page table.","Returns an iterator that allows modifying the entries of …","","","","Creates an unused page table entry.","Creates an empty page table.","Creates a new index from the given <code>u16</code>. Panics if the …","Creates a new offset from the given <code>u16</code>. Panics if the …","Creates a new index from the given <code>u16</code>. Throws away bits …","Creates a new offset from the given <code>u16</code>. Throws away bits …","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Map the entry to the specified physical address with the …","Sets the flags of this entry.","Map the entry to the specified physical frame with the …","Sets this entry to zero.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","Clears all entries.","A helper trait that implements the read port operation.","A helper trait that implements the write port operation.","Reads a <code>Self</code> value from the given port.","Writes a <code>Self</code> value to the given port.","In 64-bit mode the TSS holds information that is not …","","","","","","The full 64-bit canonical forms of the interrupt stack …","","The 16-bit offset to the I/O permission bit map from the …","Creates a new TSS with zeroed privilege and interrupt …","The full 64-bit canonical forms of the stack pointers …","","",""],"i":[0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,2,2,3,3,2,2,3,3,0,2,3,0,2,3,2,2,2,3,2,3,4,5,2,3,4,5,2,3,2,3,2,3,2,2,2,2,2,2,3,3,3,3,3,3,4,5,2,3,4,5,2,2,3,4,5,2,3,2,3,2,3,2,3,2,3,2,3,2,2,2,2,2,2,3,2,2,2,3,3,3,2,2,3,3,2,3,4,5,2,3,4,5,2,3,2,3,4,5,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,8,9,6,7,8,9,6,6,6,7,8,9,6,7,8,9,6,7,8,9,6,6,6,7,8,9,6,7,8,9,6,7,8,9,6,0,10,10,10,10,10,10,10,10,10,10,10,10,10,11,0,0,0,0,0,0,0,0,12,13,14,15,16,17,12,13,14,15,16,17,0,12,13,14,15,16,17,12,13,14,15,16,17,18,12,13,14,15,16,17,12,13,14,15,16,17,0,0,0,0,0,0,0,11,16,17,0,18,12,13,14,15,16,17,17,0,12,13,14,15,16,17,12,13,14,15,16,17,12,13,14,15,16,17,0,0,11,16,17,0,0,0,0,0,19,19,19,0,0,19,19,20,19,20,0,0,0,19,20,19,20,19,20,20,19,20,19,20,19,20,20,0,0,0,0,21,21,22,0,0,0,0,0,0,0,22,21,21,22,22,22,22,21,21,21,22,22,22,22,23,23,22,21,22,22,22,21,22,22,22,22,22,22,21,22,22,22,22,21,21,23,22,21,23,22,21,23,22,21,23,22,21,23,22,21,23,22,21,23,22,21,23,22,24,21,25,26,23,27,22,24,21,25,26,23,27,22,21,23,22,21,23,22,21,23,22,21,23,22,21,23,22,21,23,22,24,21,21,21,21,21,25,26,23,23,23,23,23,27,22,22,22,22,22,24,21,25,26,23,27,22,21,23,22,21,23,22,21,23,22,21,23,22,21,23,22,21,23,22,21,23,22,24,21,25,26,23,27,22,21,23,22,21,23,22,21,23,22,21,23,22,21,23,22,24,25,26,27,26,24,26,27,21,23,22,21,23,22,21,23,22,21,23,22,21,23,22,24,21,25,26,23,27,22,24,21,25,26,23,27,22,24,21,25,26,23,27,22,24,27,24,26,27,26,24,27,0,0,28,0,0,0,28,28,28,0,29,30,31,32,33,34,35,0,28,28,0,28,0,28,28,28,28,28,28,28,28,28,36,29,30,31,32,33,34,35,28,36,29,30,31,32,33,34,35,28,28,28,28,28,28,28,36,29,30,31,32,33,34,35,28,28,28,28,28,36,29,30,31,32,33,34,35,28,28,28,28,28,28,28,28,36,29,30,31,32,33,34,35,28,28,28,28,36,28,28,36,29,30,31,32,33,34,35,29,33,28,28,28,28,28,36,29,30,31,32,33,34,35,28,36,29,30,31,32,33,34,35,28,36,29,30,31,32,33,34,35,28,29,36,29,30,31,32,33,34,35,29,33,37,37,37,37,37,37,37,37,37,37,37,37,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,37,37,37,37,37,37,37,37,0,0,38,38,38,38,38,38,38,38,0,0,38,38,38,38,38,38,38,38,38,38,39,38,39,38,38,38,38,38,38,38,39,38,38,38,38,38,39,38,38,38,38,38,38,38,38,39,38,38,38,38,38,38,39,39,38,38,38,38,38,39,38,39,38,39,38,39,39,0,40,40,40,40,40,40,0,0,40,40,0,0,40,40,0,40,41,42,42,42,42,42,42,42,0,0,42,42,0,42,42,42,42,42,42,42,0,43,42,42,42,42,43,42,44,42,44,42,42,42,42,42,42,42,41,44,43,42,41,44,43,42,41,44,43,42,42,42,42,41,42,42,41,44,43,42,42,42,42,42,41,44,43,42,42,42,42,42,44,42,41,42,42,41,44,43,42,42,42,43,43,44,44,41,42,41,44,42,42,42,41,42,41,42,42,42,41,44,43,42,41,44,43,42,43,41,44,43,42,43,43,45,0,0,0,0,0,46,0,0,45,46,0,0,0,46,45,45,0,0,0,45,47,45,48,45,45,45,45,45,45,45,48,47,49,50,51,45,52,46,48,47,49,50,51,45,52,46,47,47,47,49,50,51,45,52,46,45,51,45,51,47,48,52,47,50,47,47,45,49,50,45,52,46,45,52,48,47,49,50,51,45,45,45,45,45,52,46,48,47,49,50,51,45,52,46,45,45,45,45,47,45,52,46,47,52,47,45,51,45,48,47,49,50,51,45,52,46,47,47,45,45,52,47,47,47,49,50,45,52,47,52,52,47,45,47,47,45,45,47,47,47,45,49,49,49,49,49,49,50,50,50,47,47,47,51,51,47,45,45,45,48,47,49,50,51,45,52,46,48,47,49,50,51,45,52,46,48,47,49,50,51,45,52,46,47,47,0,0,53,54,0,0,0,0,0,0,0,55,55,55,56,57,55,56,57,55,56,57,55,55,56,57,55,56,57,55,56,57,55,56,57,55,55,55,56,57,56,57,56,57,55,56,57,56,57,55,55,55,55,56,57,55,55,55,55,55,56,57,55,56,57,55,56,57,0,58,59,60,61,0,0,59,0,0,0,0,0,0,62,59,62,0,58,60,63,61,0,58,60,63,61,0,64,64,64,0,0,0,0,65,66,67,62,59,64,68,69,58,60,63,61,65,66,67,62,59,64,68,69,58,60,63,61,68,69,65,66,67,62,62,59,64,68,69,58,60,63,61,70,65,66,67,62,59,64,68,69,58,60,63,61,71,68,69,65,66,67,62,59,64,68,69,58,60,63,61,65,66,67,71,71,65,65,65,66,66,66,67,67,67,65,66,67,67,71,65,65,65,66,66,66,67,67,67,71,65,65,65,66,66,66,67,67,67,71,65,65,65,66,66,66,67,67,67,64,64,72,65,66,67,72,71,65,65,65,66,66,66,67,67,67,65,66,67,62,59,64,68,69,58,60,63,61,65,66,67,62,59,64,68,69,58,60,63,61,65,66,67,62,59,64,68,69,58,60,63,61,71,65,65,65,66,66,66,67,67,67,71,65,65,65,66,66,66,67,67,67,73,73,73,0,0,0,0,0,0,74,75,74,0,0,0,75,75,76,77,78,79,75,76,80,81,77,78,79,75,76,80,81,77,78,79,75,76,80,77,78,79,75,75,76,80,77,78,79,75,76,80,77,78,79,75,76,80,81,81,77,78,79,75,76,80,81,75,75,75,75,75,77,78,79,75,76,80,81,76,80,76,80,75,76,80,76,80,75,75,75,75,77,78,79,75,75,75,75,76,80,75,75,75,75,77,78,79,75,76,80,81,77,78,79,75,76,80,81,77,78,79,75,76,80,81,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,83,82,82,83,82,82,82,0,0,0,0,0,82,82,82,84,82,82,82,82,82,82,82,82,83,84,82,85,86,87,83,84,82,85,86,87,83,84,82,85,86,87,82,86,87,82,85,82,83,82,86,87,82,84,83,84,82,82,82,82,82,85,86,87,84,83,84,82,85,86,87,82,82,82,82,82,85,85,85,85,82,82,83,84,82,85,86,87,82,82,84,85,85,82,86,87,84,85,86,87,86,87,82,82,86,87,82,82,84,84,84,84,82,82,82,83,84,82,85,86,87,83,84,82,85,86,87,83,84,82,85,86,87,85,0,0,88,89,0,90,90,90,90,90,90,90,90,90,90,90,90,90],"f":[null,null,null,null,null,null,[[]],[[]],[[],["privilegelevel",4]],[[["privilegelevel",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["u16",15]],["privilegelevel",4]],null,[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[["u64",15]]],[[["usize",15]]],[[["usize",15]]],[[["u64",15]]],[[["usize",15]]],[[["u64",15]]],[[["u64",15]]],[[["usize",15]]],[[["u64",15]],["u64",15]],[[]],[[]],[[["u64",15]],["u64",15]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["virtaddr",3]],[[],["physaddr",3]],[[["virtaddr",3]],["ordering",4]],[[["physaddr",3]],["ordering",4]],[[["virtaddr",3]],["bool",15]],[[["physaddr",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["virtaddr",3]],["bool",15]],[[["physaddr",3]],["bool",15]],[[["u64",15]],["virtaddr",3]],[[["u64",15]],["physaddr",3]],[[["u64",15]],["virtaddr",3]],[[["u64",15]],["physaddr",3]],[[["u64",15]],["virtaddr",3]],[[["u64",15]],["physaddr",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pageoffset",3]],[[["virtaddr",3]],[["option",4,["ordering"]],["ordering",4]]],[[["physaddr",3]],[["option",4,["ordering"]],["ordering",4]]],[[["usize",15]]],[[["u64",15]]],[[["virtaddr",3]]],[[["usize",15]]],[[["physaddr",3]]],[[["u64",15]]],[[["u64",15]]],[[["usize",15]]],[[["u64",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15]],[["virtaddr",3],["result",4,["virtaddr","virtaddrnotvalid"]],["virtaddrnotvalid",3]]],[[["u64",15]],[["physaddr",3],["physaddrnotvalid",3],["result",4,["physaddr","physaddrnotvalid"]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["virtaddr",3]],[[],["physaddr",3]],[[]],[[]],null,[[]],null,null,[[],["virtaddr",3]],null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u16",15]],["portgeneric",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["rdrand",3]],[[["formatter",3]],["result",6]],[[]],[[],[["option",4,["u16"]],["u16",15]]],[[],[["u32",15],["option",4,["u32"]]]],[[],[["u64",15],["option",4,["u64"]]]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["segmentselector",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[],["u64",15]],[[],["u64",15]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15]]],[[["u64",15]]],[[["virtaddr",3]]],[[["virtaddr",3]]],[[["virtaddr",3]]],[[["descriptortablepointer",3]]],[[["descriptortablepointer",3]]],[[["segmentselector",3]]],[[],["descriptortablepointer",3]],[[],["descriptortablepointer",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["virtaddr",3]]],[[]],[[["invpicdcommand",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u16",15]],[["pcid",3],["str",15],["result",4,["pcid","str"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["u16",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["cr0flags",3]],[[],["cr3flags",3]],[[],["cr4flags",3]],[[["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cr0flags",3]],[[],["cr3flags",3]],[[],["cr4flags",3]],[[["cr0flags",3]],["ordering",4]],[[["cr3flags",3]],["ordering",4]],[[["cr4flags",3]],["ordering",4]],[[["cr0flags",3]],["bool",15]],[[["cr3flags",3]],["bool",15]],[[["cr4flags",3]],["bool",15]],[[],["cr0flags",3]],[[],["cr3flags",3]],[[],["cr4flags",3]],[[["cr0flags",3]],["bool",15]],[[["cr3flags",3]],["bool",15]],[[["cr4flags",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["cr0flags",3],["option",4,["cr0flags"]]]],[[["u64",15]],[["cr3flags",3],["option",4,["cr3flags"]]]],[[["u64",15]],[["cr4flags",3],["option",4,["cr4flags"]]]],[[["u64",15]],["cr0flags",3]],[[["u64",15]],["cr3flags",3]],[[["u64",15]],["cr4flags",3]],[[["u64",15]],["cr0flags",3]],[[["u64",15]],["cr3flags",3]],[[["u64",15]],["cr4flags",3]],[[["intoiterator",8]],["cr0flags",3]],[[["intoiterator",8]],["cr3flags",3]],[[["intoiterator",8]],["cr4flags",3]],[[]],[[]],[[]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[["cr0flags",3]],["bool",15]],[[["cr3flags",3]],["bool",15]],[[["cr4flags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["cr0flags",3]],["bool",15]],[[["cr3flags",3]],["bool",15]],[[["cr4flags",3]],["bool",15]],[[],["cr0flags",3]],[[],["cr3flags",3]],[[],["cr4flags",3]],[[["cr0flags",3]],[["option",4,["ordering"]],["ordering",4]]],[[["cr3flags",3]],[["option",4,["ordering"]],["ordering",4]]],[[["cr4flags",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["cr0flags",3]],[[],["virtaddr",3]],[[]],[[],["cr4flags",3]],[[]],[[],["u64",15]],[[]],[[],["u64",15]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[["cr0flags",3],["bool",15]]],[[["bool",15],["cr3flags",3]]],[[["cr4flags",3],["bool",15]]],[[["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["cr0flags",3]]],[[["cr3flags",3],["physframe",3]]],[[["cr4flags",3]]],[[["pcid",3],["physframe",3]]],[[["u64",15]]],[[["u64",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["eferflags",3]],[[["eferflags",3]],["eferflags",3]],[[["eferflags",3]]],[[["eferflags",3]],["eferflags",3]],[[["eferflags",3]]],[[],["u64",15]],[[["eferflags",3]],["eferflags",3]],[[["eferflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["eferflags",3]],[[["eferflags",3]],["ordering",4]],[[["eferflags",3]],["bool",15]],[[],["eferflags",3]],[[["eferflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["eferflags",3],["option",4,["eferflags"]]]],[[["u64",15]],["eferflags",3]],[[["u64",15]],["eferflags",3]],[[["intoiterator",8]],["eferflags",3]],[[]],[[["eferflags",3]]],[[["eferflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["eferflags",3]],["bool",15]],[[["u32",15]],["msr",3]],[[],["eferflags",3]],[[["eferflags",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["u64",15]],[[],["eferflags",3]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[]],[[],["virtaddr",3]],[[],["rflags",3]],[[],["u64",15]],[[]],[[["eferflags",3]]],[[["bool",15],["eferflags",3]]],[[["eferflags",3]],["eferflags",3]],[[["eferflags",3]]],[[["eferflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["u64",15]]],[[["eferflags",3]]],[[["virtaddr",3]]],[[["virtaddr",3]]],[[["virtaddr",3]]],[[["segmentselector",3]],[["result",4,["str"]],["str",15]]],[[["virtaddr",3]]],[[["rflags",3]]],[[["u64",15]]],[[["u16",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["rflags",3]],[[["rflags",3]],["rflags",3]],[[["rflags",3]]],[[["rflags",3]],["rflags",3]],[[["rflags",3]]],[[],["u64",15]],[[["rflags",3]],["rflags",3]],[[["rflags",3]]],[[]],[[]],[[],["rflags",3]],[[["rflags",3]],["ordering",4]],[[["rflags",3]],["bool",15]],[[],["rflags",3]],[[["rflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u64",15]],[["rflags",3],["option",4,["rflags"]]]],[[["u64",15]],["rflags",3]],[[["u64",15]],["rflags",3]],[[["intoiterator",8]],["rflags",3]],[[]],[[["rflags",3]]],[[["rflags",3]],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["rflags",3]],["bool",15]],[[],["rflags",3]],[[["rflags",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["rflags",3]],[[],["u64",15]],[[["rflags",3]]],[[["rflags",3],["bool",15]]],[[["rflags",3]],["rflags",3]],[[["rflags",3]]],[[["rflags",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["rflags",3]]],[[["u64",15]]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["xcr0flags",3]],[[["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3]]],[[["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3]]],[[],["u64",15]],[[["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3]]],[[]],[[]],[[]],[[]],[[],["xcr0flags",3]],[[["xcr0flags",3]],["ordering",4]],[[["xcr0flags",3]],["bool",15]],[[],["xcr0flags",3]],[[["xcr0flags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u64",15]],[["xcr0flags",3],["option",4,["xcr0flags"]]]],[[["u64",15]],["xcr0flags",3]],[[["u64",15]],["xcr0flags",3]],[[["intoiterator",8]],["xcr0flags",3]],[[]],[[["xcr0flags",3]]],[[["xcr0flags",3]],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["xcr0flags",3]],["bool",15]],[[],["xcr0flags",3]],[[["xcr0flags",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["xcr0flags",3]],[[],["u64",15]],[[["xcr0flags",3]]],[[["bool",15],["xcr0flags",3]]],[[["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3]]],[[["xcr0flags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["xcr0flags",3]]],[[["u64",15]]],null,null,[[]],[[]],[[],["descriptortablepointer",3]],[[["formatter",3]],["result",6]],[[]],null,null,[[]],null,null,null,[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["descriptor",4]],["segmentselector",3]],[[],["descriptorflags",3]],[[]],[[["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3]]],[[["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3]]],[[],["u64",15]],[[["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["segmentselector",3]],[[],["globaldescriptortable",3]],[[],["descriptor",4]],[[],["descriptorflags",3]],[[["descriptorflags",3]],["ordering",4]],[[["descriptorflags",3]],["bool",15]],[[],["descriptorflags",3]],[[["segmentselector",3]],["bool",15]],[[["descriptorflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u64",15]],[["descriptorflags",3],["option",4,["descriptorflags"]]]],[[["u64",15]],["descriptorflags",3]],[[["u64",15]],["descriptorflags",3]],[[["intoiterator",8]],["descriptorflags",3]],[[],["globaldescriptortable",3]],[[]],[[],["u16",15]],[[["descriptorflags",3]]],[[["descriptorflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["descriptor",4]],[[],["descriptor",4]],[[]],[[]],[[["segmentselector",3]],["bool",15]],[[["descriptorflags",3]],["bool",15]],[[["u16",15],["privilegelevel",4]],["segmentselector",3]],[[],["globaldescriptortable",3]],[[],["descriptorflags",3]],[[["descriptorflags",3]],[["option",4,["ordering"]],["ordering",4]]],[[["descriptorflags",3]]],[[],["privilegelevel",4]],[[["descriptorflags",3],["bool",15]]],[[["privilegelevel",4]]],[[["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3]]],[[["descriptorflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["taskstatesegment",3]],["descriptor",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["descriptor",4]],[[],["descriptor",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["pagefaulterrorcode",3]],[[],[["interruptstackframevalue",3],["volatile",3,["interruptstackframevalue"]]]],[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3]]],[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3]]],[[],["u64",15]],[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["interruptdescriptortable",3]],[[],["entry",3]],[[],["entryoptions",3]],[[],["interruptstackframevalue",3]],[[],["pagefaulterrorcode",3]],[[],["selectorerrorcode",3]],[[],["descriptortable",4]],[[["pagefaulterrorcode",3]],["ordering",4]],null,[[["pagefaulterrorcode",3]],["bool",15]],null,null,[[]],[[],["descriptortable",4]],null,[[["bool",15]]],null,null,[[],["pagefaulterrorcode",3]],[[],["bool",15]],[[["entryoptions",3]],["bool",15]],[[["pagefaulterrorcode",3]],["bool",15]],[[["selectorerrorcode",3]],["bool",15]],[[["descriptortable",4]],["bool",15]],[[["intoiterator",8]]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["pagefaulterrorcode",3],["option",4,["pagefaulterrorcode"]]]],[[["u64",15]],["pagefaulterrorcode",3]],[[["u64",15]],["pagefaulterrorcode",3]],[[["intoiterator",8]],["pagefaulterrorcode",3]],null,[[]],[[]],[[]],[[["usize",15]]],[[],["u64",15]],[[["usize",15]]],[[["pagefaulterrorcode",3]]],null,[[["pagefaulterrorcode",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],null,[[]],[[["entryoptions",3]],["bool",15]],[[["pagefaulterrorcode",3]],["bool",15]],[[["selectorerrorcode",3]],["bool",15]],[[],["interruptdescriptortable",3]],[[["u64",15]],["option",4]],[[["u64",15]]],null,[[],["pagefaulterrorcode",3]],null,null,[[["pagefaulterrorcode",3]],[["option",4,["ordering"]],["ordering",4]]],[[["pagefaulterrorcode",3]]],[[]],null,null,[[["pagefaulterrorcode",3],["bool",15]]],[[["virtaddr",3]],["entryoptions",3]],[[["diverginghandlerfuncwitherrcode",6]],["entryoptions",3]],[[["handlerfuncwitherrcode",6]],["entryoptions",3]],[[["handlerfunc",6]],["entryoptions",3]],[[["pagefaulthandlerfunc",6]],["entryoptions",3]],[[["diverginghandlerfunc",6]],["entryoptions",3]],[[["bool",15]]],[[["privilegelevel",4]]],[[["u16",15]]],null,[[]],[[]],null,null,null,[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3]]],[[["pagefaulterrorcode",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[],[["option",4,["physframe"]],["physframe",3]]],[[["physframe",3]]],null,null,null,null,null,null,null,[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["physframe",3]],[[],["physframerange",3]],[[],["physframerangeinclusive",3]],[[["physframe",3]],["ordering",4]],[[["physaddr",3]]],null,null,[[["physframe",3]],["bool",15]],[[["physframerange",3]],["bool",15]],[[["physframerangeinclusive",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["physaddr",3]],[["result",4,["addressnotaligned"]],["addressnotaligned",3]]],[[["physaddr",3]]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["physframe",3]],["bool",15]],[[["physframerange",3]],["bool",15]],[[["physframerangeinclusive",3]],["bool",15]],[[],["option",4]],[[],["option",4]],[[["physframe",3]],[["option",4,["ordering"]],["ordering",4]]],[[["physframe",3]],["physframerange",3]],[[["physframe",3]],["physframerangeinclusive",3]],[[],["u64",15]],null,null,[[],["physaddr",3]],[[["physframe",3]]],[[["u64",15]]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["physframe",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pagetableflags",3],["physframe",3]],[["result",4,["mapperflush","maptoerror"]],["maptoerror",4],["mapperflush",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pagetable",3]],[[],["pagetable",3]],[[],["pagetable",3]],[[["page",3],["pagetableflags",3],["physframe",3]],[["result",4,["mapperflush","maptoerror"]],["maptoerror",4],["mapperflush",3]]],[[["pagetableflags",3],["page",3],["physframe",3]],[["result",4,["mapperflush","maptoerror"]],["maptoerror",4],["mapperflush",3]]],[[["page",3,["size1gib"]],["pagetableflags",3],["physframe",3,["size1gib"]],["size1gib",4]],[["result",4,["mapperflush","maptoerror"]],["mapperflush",3,["size1gib"]],["maptoerror",4,["size1gib"]]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4],["physframe",3,["size4kib"]]],[["mapperflush",3,["size4kib"]],["result",4,["mapperflush","maptoerror"]],["maptoerror",4,["size4kib"]]]],[[["size2mib",4],["pagetableflags",3],["physframe",3,["size2mib"]],["page",3,["size2mib"]]],[["result",4,["mapperflush","maptoerror"]],["mapperflush",3,["size2mib"]],["maptoerror",4,["size2mib"]]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4],["physframe",3,["size4kib"]]],[["mapperflush",3,["size4kib"]],["result",4,["mapperflush","maptoerror"]],["maptoerror",4,["size4kib"]]]],[[["page",3,["size1gib"]],["pagetableflags",3],["physframe",3,["size1gib"]],["size1gib",4]],[["result",4,["mapperflush","maptoerror"]],["mapperflush",3,["size1gib"]],["maptoerror",4,["size1gib"]]]],[[["size2mib",4],["pagetableflags",3],["physframe",3,["size2mib"]],["page",3,["size2mib"]]],[["result",4,["mapperflush","maptoerror"]],["mapperflush",3,["size2mib"]],["maptoerror",4,["size2mib"]]]],[[["page",3,["size1gib"]],["pagetableflags",3],["physframe",3,["size1gib"]],["size1gib",4]],[["result",4,["mapperflush","maptoerror"]],["mapperflush",3,["size1gib"]],["maptoerror",4,["size1gib"]]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4],["physframe",3,["size4kib"]]],[["mapperflush",3,["size4kib"]],["result",4,["mapperflush","maptoerror"]],["maptoerror",4,["size4kib"]]]],[[["size2mib",4],["pagetableflags",3],["physframe",3,["size2mib"]],["page",3,["size2mib"]]],[["result",4,["mapperflush","maptoerror"]],["mapperflush",3,["size2mib"]],["maptoerror",4,["size2mib"]]]],[[["pagetable",3]]],[[["virtaddr",3],["pagetable",3]]],[[["pagetable",3]],[["invalidpagetable",4],["result",4,["invalidpagetable"]]]],[[["pagetableindex",3],["pagetable",3]]],[[["page",3],["pagetableflags",3]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size1gib"]],["size1gib",4],["pagetableflags",3]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["size2mib",4],["pagetableflags",3],["page",3,["size2mib"]]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size1gib"]],["size1gib",4],["pagetableflags",3]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["size2mib",4],["pagetableflags",3],["page",3,["size2mib"]]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size1gib"]],["size1gib",4],["pagetableflags",3]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["size2mib",4],["pagetableflags",3],["page",3,["size2mib"]]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3],["pagetableflags",3]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["size2mib",4],["pagetableflags",3],["page",3,["size2mib"]]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size1gib"]],["size1gib",4],["pagetableflags",3]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size1gib"]],["size1gib",4],["pagetableflags",3]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["size2mib",4],["pagetableflags",3],["page",3,["size2mib"]]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["size2mib",4],["pagetableflags",3],["page",3,["size2mib"]]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size1gib"]],["size1gib",4],["pagetableflags",3]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3],["pagetableflags",3]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["size2mib",4],["pagetableflags",3],["page",3,["size2mib"]]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size1gib"]],["size1gib",4],["pagetableflags",3]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["size2mib",4],["pagetableflags",3],["page",3,["size2mib"]]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size1gib"]],["size1gib",4],["pagetableflags",3]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["size2mib",4],["pagetableflags",3],["page",3,["size2mib"]]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[["page",3,["size1gib"]],["size1gib",4],["pagetableflags",3]],[["mapperflushall",3],["flagupdateerror",4],["result",4,["mapperflushall","flagupdateerror"]]]],[[],["u64",15]],[[],["physaddr",3]],[[["virtaddr",3]],["translateresult",4]],[[["virtaddr",3]],["translateresult",4]],[[["virtaddr",3]],["translateresult",4]],[[["virtaddr",3]],["translateresult",4]],[[["virtaddr",3]],[["physaddr",3],["option",4,["physaddr"]]]],[[["page",3]],[["physframe",3],["translateerror",4],["result",4,["physframe","translateerror"]]]],[[["page",3,["size4kib"]],["size4kib",4]],[["physframe",3,["size4kib"]],["result",4,["physframe","translateerror"]],["translateerror",4]]],[[["size2mib",4],["page",3,["size2mib"]]],[["physframe",3,["size2mib"]],["translateerror",4],["result",4,["physframe","translateerror"]]]],[[["page",3,["size1gib"]],["size1gib",4]],[["result",4,["physframe","translateerror"]],["physframe",3,["size1gib"]],["translateerror",4]]],[[["size2mib",4],["page",3,["size2mib"]]],[["physframe",3,["size2mib"]],["translateerror",4],["result",4,["physframe","translateerror"]]]],[[["page",3,["size1gib"]],["size1gib",4]],[["result",4,["physframe","translateerror"]],["physframe",3,["size1gib"]],["translateerror",4]]],[[["page",3,["size4kib"]],["size4kib",4]],[["physframe",3,["size4kib"]],["result",4,["physframe","translateerror"]],["translateerror",4]]],[[["page",3,["size4kib"]],["size4kib",4]],[["physframe",3,["size4kib"]],["result",4,["physframe","translateerror"]],["translateerror",4]]],[[["page",3,["size1gib"]],["size1gib",4]],[["result",4,["physframe","translateerror"]],["physframe",3,["size1gib"]],["translateerror",4]]],[[["size2mib",4],["page",3,["size2mib"]]],[["physframe",3,["size2mib"]],["translateerror",4],["result",4,["physframe","translateerror"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["page",3]],[["unmaperror",4],["result",4,["unmaperror"]]]],[[["size2mib",4],["page",3,["size2mib"]]],[["result",4,["unmaperror"]],["unmaperror",4]]],[[["page",3,["size1gib"]],["size1gib",4]],[["unmaperror",4],["result",4,["unmaperror"]]]],[[["page",3,["size4kib"]],["size4kib",4]],[["result",4,["unmaperror"]],["unmaperror",4]]],[[["page",3,["size4kib"]],["size4kib",4]],[["result",4,["unmaperror"]],["unmaperror",4]]],[[["size2mib",4],["page",3,["size2mib"]]],[["result",4,["unmaperror"]],["unmaperror",4]]],[[["page",3,["size1gib"]],["size1gib",4]],[["unmaperror",4],["result",4,["unmaperror"]]]],[[["page",3,["size1gib"]],["size1gib",4]],[["unmaperror",4],["result",4,["unmaperror"]]]],[[["page",3,["size4kib"]],["size4kib",4]],[["result",4,["unmaperror"]],["unmaperror",4]]],[[["size2mib",4],["page",3,["size2mib"]]],[["result",4,["unmaperror"]],["unmaperror",4]]],[[["page",3],["pagetableflags",3]],[["flagupdateerror",4],["result",4,["mapperflush","flagupdateerror"]],["mapperflush",3]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4]],[["result",4,["mapperflush","flagupdateerror"]],["mapperflush",3,["size4kib"]],["flagupdateerror",4]]],[[["size2mib",4],["pagetableflags",3],["page",3,["size2mib"]]],[["result",4,["mapperflush","flagupdateerror"]],["mapperflush",3,["size2mib"]],["flagupdateerror",4]]],[[["page",3,["size1gib"]],["size1gib",4],["pagetableflags",3]],[["result",4,["mapperflush","flagupdateerror"]],["mapperflush",3,["size1gib"]],["flagupdateerror",4]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4]],[["result",4,["mapperflush","flagupdateerror"]],["mapperflush",3,["size4kib"]],["flagupdateerror",4]]],[[["size2mib",4],["pagetableflags",3],["page",3,["size2mib"]]],[["result",4,["mapperflush","flagupdateerror"]],["mapperflush",3,["size2mib"]],["flagupdateerror",4]]],[[["page",3,["size1gib"]],["size1gib",4],["pagetableflags",3]],[["result",4,["mapperflush","flagupdateerror"]],["mapperflush",3,["size1gib"]],["flagupdateerror",4]]],[[["page",3,["size4kib"]],["pagetableflags",3],["size4kib",4]],[["result",4,["mapperflush","flagupdateerror"]],["mapperflush",3,["size4kib"]],["flagupdateerror",4]]],[[["page",3,["size1gib"]],["size1gib",4],["pagetableflags",3]],[["result",4,["mapperflush","flagupdateerror"]],["mapperflush",3,["size1gib"]],["flagupdateerror",4]]],[[["size2mib",4],["pagetableflags",3],["page",3,["size2mib"]]],[["result",4,["mapperflush","flagupdateerror"]],["mapperflush",3,["size2mib"]],["flagupdateerror",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15]]],[[["u64",15]]],[[],[["pagerange",3,["size4kib"]],["size4kib",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["size4kib",4]],[[],["size2mib",4]],[[],["size1gib",4]],[[],["page",3]],[[],["pagerange",3]],[[],["pagerangeinclusive",3]],[[["size4kib",4]],["ordering",4]],[[["size2mib",4]],["ordering",4]],[[["size1gib",4]],["ordering",4]],[[["page",3]],["ordering",4]],[[["virtaddr",3]]],null,null,[[["size4kib",4]],["bool",15]],[[["size2mib",4]],["bool",15]],[[["size1gib",4]],["bool",15]],[[["page",3]],["bool",15]],[[["pagerange",3]],["bool",15]],[[["pagerangeinclusive",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pagetableindex",3]]],[[["pagetableindex",3]]],[[["pagetableindex",3]]],[[["virtaddr",3]],[["result",4,["addressnotaligned"]],["addressnotaligned",3]]],[[["virtaddr",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["page",3]],["bool",15]],[[["pagerange",3]],["bool",15]],[[["pagerangeinclusive",3]],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[["size4kib",4]],[["option",4,["ordering"]],["ordering",4]]],[[["size2mib",4]],[["option",4,["ordering"]],["ordering",4]]],[[["size1gib",4]],[["option",4,["ordering"]],["ordering",4]]],[[["page",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["pagerange",3]],[[],["pagerangeinclusive",3]],[[],["u64",15]],null,null,[[],["virtaddr",3]],[[]],[[["u64",15]]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["physaddr",3]],[[],["pagetableflags",3]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3]]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3]]],[[],["u64",15]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["frameerror",4]],[[],["pagetableentry",3]],[[],["pagetableflags",3]],[[],["pagetable",3]],[[],["pagetableindex",3]],[[],["pageoffset",3]],[[["pagetableflags",3]],["ordering",4]],[[["pagetableindex",3]],["ordering",4]],[[["pageoffset",3]],["ordering",4]],[[["pagetableflags",3]],["bool",15]],[[]],[[],["pagetableflags",3]],[[["frameerror",4]],["bool",15]],[[["pagetableflags",3]],["bool",15]],[[["pagetableindex",3]],["bool",15]],[[["pageoffset",3]],["bool",15]],[[["intoiterator",8]]],[[],["pagetableflags",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["frameerror",4],["result",4,["physframe","frameerror"]],["physframe",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["option",4,["pagetableflags"]],["pagetableflags",3]]],[[["u64",15]],["pagetableflags",3]],[[["u64",15]],["pagetableflags",3]],[[["intoiterator",8]],["pagetableflags",3]],[[]],[[["usize",15]]],[[["pagetableindex",3]]],[[["usize",15]]],[[["pagetableindex",3]]],[[["pagetableflags",3]]],[[["pagetableflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["pagetableflags",3]],["bool",15]],[[["pagetableindex",3]],["bool",15]],[[["pageoffset",3]],["bool",15]],[[]],[[]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[],["pagetableflags",3]],[[["pagetableflags",3]],[["option",4,["ordering"]],["ordering",4]]],[[["pagetableindex",3]],[["option",4,["ordering"]],["ordering",4]]],[[["pageoffset",3]],[["option",4,["ordering"]],["ordering",4]]],[[["pagetableflags",3]]],[[["pagetableflags",3],["bool",15]]],[[["physaddr",3],["pagetableflags",3]]],[[["pagetableflags",3]]],[[["pagetableflags",3],["physframe",3]]],[[]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3]]],[[["pagetableflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,[[["u16",15]]],[[["u16",15]]],null,[[]],[[]],[[],["taskstatesegment",3]],[[["formatter",3]],["result",6]],[[]],null,[[]],null,[[],["taskstatesegment",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"PrivilegeLevel"],[3,"VirtAddr"],[3,"PhysAddr"],[3,"VirtAddrNotValid"],[3,"PhysAddrNotValid"],[3,"PortGeneric"],[3,"ReadOnlyAccess"],[3,"WriteOnlyAccess"],[3,"ReadWriteAccess"],[3,"RdRand"],[8,"Segment64"],[3,"CS"],[3,"SS"],[3,"DS"],[3,"ES"],[3,"FS"],[3,"GS"],[8,"Segment"],[4,"InvPicdCommand"],[3,"Pcid"],[3,"Cr0Flags"],[3,"Cr4Flags"],[3,"Cr3Flags"],[3,"Cr0"],[3,"Cr2"],[3,"Cr3"],[3,"Cr4"],[3,"EferFlags"],[3,"Efer"],[3,"FsBase"],[3,"GsBase"],[3,"KernelGsBase"],[3,"Star"],[3,"LStar"],[3,"SFMask"],[3,"Msr"],[3,"RFlags"],[3,"XCr0Flags"],[3,"XCr0"],[3,"DescriptorTablePointer"],[3,"SegmentSelector"],[3,"DescriptorFlags"],[4,"Descriptor"],[3,"GlobalDescriptorTable"],[3,"PageFaultErrorCode"],[4,"DescriptorTable"],[3,"InterruptDescriptorTable"],[3,"InterruptStackFrame"],[3,"Entry"],[3,"EntryOptions"],[3,"InterruptStackFrameValue"],[3,"SelectorErrorCode"],[8,"FrameAllocator"],[8,"FrameDeallocator"],[3,"PhysFrame"],[3,"PhysFrameRange"],[3,"PhysFrameRangeInclusive"],[4,"MapToError"],[4,"TranslateResult"],[4,"UnmapError"],[4,"TranslateError"],[4,"InvalidPageTable"],[4,"FlagUpdateError"],[4,"MappedFrame"],[3,"MappedPageTable"],[3,"OffsetPageTable"],[3,"RecursivePageTable"],[3,"MapperFlush"],[3,"MapperFlushAll"],[8,"PageTableFrameMapping"],[8,"Mapper"],[8,"Translate"],[13,"Mapped"],[8,"PageSize"],[3,"Page"],[3,"PageRange"],[4,"Size4KiB"],[4,"Size2MiB"],[4,"Size1GiB"],[3,"PageRangeInclusive"],[3,"AddressNotAligned"],[3,"PageTableFlags"],[4,"FrameError"],[3,"PageTableEntry"],[3,"PageTable"],[3,"PageTableIndex"],[3,"PageOffset"],[8,"PortRead"],[8,"PortWrite"],[3,"TaskStateSegment"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};