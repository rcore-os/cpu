var searchIndex = JSON.parse('{\
"bit_field":{"doc":"Provides the abstraction of a bit field, which allows for …","t":[18,8,8,10,10,10,10,10,10,10,10,10],"n":["BIT_LENGTH","BitArray","BitField","bit_length","get_bit","get_bit","get_bits","get_bits","set_bit","set_bit","set_bits","set_bits"],"q":["bit_field","","","","","","","","","","",""],"d":["The number of bits in this bit field.","","A generic trait which provides methods for extracting and …","Returns the length, eg number of bits, in this bit array.","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the range of bits specified by <code>range</code>; note that …","Obtains the range of bits specified by <code>range</code>; note that …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the range of bits defined by the range <code>range</code> to the …","Sets the range of bits defined by the range <code>range</code> to the …"],"i":[1,0,0,2,1,2,1,2,1,2,1,2],"f":[null,null,null,[[],["usize",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["rangebounds",8,[["usize",15]]]]],[[["rangebounds",8,[["usize",15]]]]],[[["usize",15],["bool",15]]],[[["usize",15],["bool",15]]],[[["rangebounds",8,[["usize",15]]]]],[[["rangebounds",8,[["usize",15]]]]]],"p":[[8,"BitField"],[8,"BitArray"]]},\
"bitflags":{"doc":"Generate types for C-style flags with ergonomic APIs.","t":[18,18,8,16,18,18,18,18,3,8,11,11,14,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,8,11,11,11,11,11,11,5,5,5,11,11,11,10,5,5,5,11,11,11,10],"n":["ALL","ALL","Bits","Bits","EMPTY","EMPTY","FLAGS","FLAGS","Flag","Flags","all","all","bitflags","bits","borrow","borrow_mut","complement","complement","contains","contains","difference","difference","empty","empty","fmt","from","from_bits","from_bits","from_bits_retain","from_bits_truncate","from_bits_truncate","from_name","from_name","insert","insert","intersection","intersection","intersects","intersects","into","is_all","is_all","is_empty","is_empty","is_named","is_unnamed","iter","iter","iter","iter_names","iter_names","name","new","parser","remove","remove","set","set","symmetric_difference","symmetric_difference","toggle","toggle","try_from","try_into","type_id","union","union","value","Iter","IterNames","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","into_iter","into_iter","next","next","remaining","try_from","try_from","try_into","try_into","type_id","type_id","ParseError","ParseHex","WriteHex","borrow","borrow_mut","empty_flag","fmt","fmt","from","from_str","from_str_strict","from_str_truncate","into","invalid_hex_flag","invalid_named_flag","parse_hex","to_writer","to_writer_strict","to_writer_truncate","try_from","try_into","type_id","write_hex"],"q":["bitflags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitflags::iter","","","","","","","","","","","","","","","","","","","","","bitflags::parser","","","","","","","","","","","","","","","","","","","","","",""],"d":["A value with all bits set.","A value with all bits set.","A bits type that can be used as storage for a flags type.","The underlying bits type.","A value with all bits unset.","A value with all bits unset.","The set of defined flags.","The set of defined flags.","A defined flags value that may be named or unnamed.","A set of defined flags using a bits type as storage.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Generate a flags type.","Get the underlying bits value.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether the flag is named.","Whether the flag is unnamed.","Yield the bits of a source flags value in a set of …","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Get the name of this flag.","Define a flag.","Parsing flags from text.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>Flags::insert</code> when <code>value</code> is <code>true</code> or <code>Flags::remove</code> …","Call <code>Flags::insert</code> when <code>value</code> is <code>true</code> or <code>Flags::remove</code> …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the flags value of this flag.","An iterator over flags values.","An iterator over flags values.","","","","","","","","","","","","","Get a flags value of any remaining bits that haven’t …","","","","","","","An error encountered while parsing flags from text.","Parse a value from a hex string.","Encode a value as a hex string.","","","A hex or named flag wasn’t found between separators.","","","","Parse a flags value from text.","Parse a flags value from text.","Parse a flags value from text.","","An invalid hex flag was encountered.","A named flag that doesn’t correspond to any on the flags …","Parse the value from hex.","Write a flags value as text.","Write only the contained, defined, named flags in a flags …","Write a flags value as text, ignoring any unknown bits.","","","","Write the value as hex."],"i":[1,1,0,2,1,1,2,2,0,0,2,2,0,2,3,3,2,2,2,2,2,2,2,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,3,3,0,2,2,2,2,3,3,0,2,2,2,2,2,2,2,2,3,3,3,2,2,3,0,0,4,5,4,5,4,5,4,5,4,5,4,5,5,4,5,4,5,4,5,0,0,0,6,6,6,6,6,6,0,0,0,6,6,6,7,0,0,0,6,6,6,8],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[["str",15]],["option",4]],[[["str",15]],["option",4]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["iter",3]],[[],["iter",3]],[[],["iternames",3]],[[],["iternames",3]],[[],["str",15]],[[["str",15]]],null,[[]],[[]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["str",15]],["result",4,[["flags",8],["parseerror",3]]]],[[["str",15]],["result",4,[["flags",8],["parseerror",3]]]],[[["str",15]],["result",4,[["flags",8],["parseerror",3]]]],[[]],[[]],[[]],[[["str",15]],["result",4,[["parseerror",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["write",8]],["result",6]]],"p":[[8,"Bits"],[8,"Flags"],[3,"Flag"],[3,"Iter"],[3,"IterNames"],[3,"ParseError"],[8,"ParseHex"],[8,"WriteHex"]]},\
"raw_cpuid":{"doc":"A library to parse the x86 CPUID instruction, written in …","t":[13,3,4,13,13,13,13,13,17,13,3,3,4,3,3,4,13,3,8,3,13,3,3,4,13,13,13,3,13,13,13,3,3,3,4,4,3,3,3,3,3,3,13,13,13,13,4,3,13,13,13,13,13,3,3,3,3,3,13,3,3,13,3,13,13,13,13,13,3,3,13,13,3,3,3,3,3,3,13,13,13,3,3,13,13,13,3,4,3,3,3,3,13,3,13,3,13,3,4,3,13,13,13,13,13,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,11,11,11,11,5,11,11,11,11,11],"n":["ACRN","ApmInfo","Associativity","Avx","Avx512Opmask","Avx512ZmmHi16","Avx512ZmmHi256","Bhyve","CACHE_INFO_TABLE","Cache","CacheInfo","CacheInfoIter","CacheInfoType","CacheParameter","CacheParametersIter","CacheType","Core","CpuId","CpuIdReader","CpuIdResult","DTLB","DatInfo","DatIter","DatType","Data","DataTLB","Die","DirectCacheAccessInfo","DirectMapped","Disabled","Epc","EpcSection","ExtendedFeatures","ExtendedProcessorFeatureIdentifiers","ExtendedRegisterStateLocation","ExtendedRegisterType","ExtendedState","ExtendedStateInfo","ExtendedStateIter","ExtendedTopologyIter","ExtendedTopologyLevel","FeatureInfo","FullyAssociative","General","Hdc","HyperV","Hypervisor","HypervisorInfo","Ia32Xss","Instruction","InstructionTLB","Invalid","KVM","L1CacheTlbInfo","L2And3CacheTlbInfo","L2CatInfo","L3CatInfo","L3MonitoringInfo","LoadOnly","MemBwAllocationInfo","MemoryEncryptionInfo","Module","MonitorMwaitInfo","MpxBndcsr","MpxBndregs","NWay","Null","Null","PerformanceMonitoringInfo","PerformanceOptimizationInfo","Pkru","Prefetch","ProcessorBrandString","ProcessorCapacityAndFeatureInfo","ProcessorFrequencyInfo","ProcessorSerial","ProcessorTopologyInfo","ProcessorTraceInfo","Pt","QEMU","QNX","RdtAllocationInfo","RdtMonitoringInfo","Reserved","SMT","STLB","SgxInfo","SgxSectionInfo","SgxSectionIter","SoCVendorAttributesIter","SoCVendorBrand","SoCVendorInfo","StoreOnly","SvmFeatures","TLB","ThermalPowerInfo","Tile","Tlb1gbPageInfo","TopologyType","TscInfo","Unified","UnifiedTLB","Unknown","Unknown","Unknown","Unknown","VMware","VendorInfo","Xcr0","Xen","all_zero","apic_frequency","apic_id_size","as_str","as_str","as_str","as_string","as_string","associativity","base_family_id","base_model_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brand_id","brand_index","bus_frequency","c_bit_position","cache_level","cache_type","cache_type","capacity_mask_length","capacity_mask_length","cflush_cache_line_size","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","coherency_line_size","configurable_address_ranges","conversion_factor","core_id","counter_bit_width","cpu_pwr_sample_time_ratio","cpuid","cpuid1","cpuid2","dcache_associativity","dcache_line_size","dcache_lines_per_tag","dcache_size","default","denominator","desc","dtlb_2m_4m_associativity","dtlb_2m_4m_associativity","dtlb_2m_4m_size","dtlb_2m_4m_size","dtlb_4k_associativity","dtlb_4k_associativity","dtlb_4k_size","dtlb_4k_size","dtlb_l1_1gb_associativity","dtlb_l1_1gb_size","dtlb_l2_1gb_associativity","dtlb_l2_1gb_size","dts_irq_threshold","eax","ebx","ebx_length","ecx","edx","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extended_family_id","extended_model_id","extended_signature","extensions_supported","family_id","fixed_function_counters","fixed_function_counters_bit_width","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_advanced_power_mgmt_info","get_cache_info","get_cache_parameters","get_dca_cap_value","get_deterministic_address_translation_info","get_direct_cache_access_info","get_extended_feature_info","get_extended_processor_and_feature_identifiers","get_extended_state_info","get_extended_topology_info","get_extended_topology_info_v2","get_feature_info","get_hypervisor_info","get_l1_cache_and_tlb_info","get_l2_l3_cache_and_tlb_info","get_memory_encryption_info","get_monitor_mwait_info","get_performance_monitoring_info","get_performance_optimization_info","get_processor_brand_string","get_processor_capacity_feature_info","get_processor_frequency_info","get_processor_serial","get_processor_topology_info","get_processor_trace_info","get_project_id","get_rdt_allocation_info","get_rdt_monitoring_info","get_sgx_info","get_soc_vendor_id","get_soc_vendor_info","get_stepping_id","get_svm_info","get_thermal_power_info","get_tlb_1gb_page_info","get_tsc_info","get_vendor_attributes","get_vendor_brand","get_vendor_info","guest_physical_address_bits","has_100mhz_steps","has_1gb_entries","has_1gib_pages","has_2mb_entries","has_3dnow","has_4k_entries","has_4mb_entries","has_64bit_mode","has_64bit_mode","has_acpi","has_addr_mask_extension","has_adx","has_aesni","has_alt_mov_cr8","has_alternate_injection","has_amd_3dnow_extensions","has_any_thread_deprecation","has_apic","has_arat","has_av512vbmi2","has_avic","has_avx","has_avx2","has_avx512_ifma","has_avx512bitalg","has_avx512bw","has_avx512cd","has_avx512dq","has_avx512er","has_avx512f","has_avx512pf","has_avx512vl","has_avx512vnni","has_avx512vpopcntdq","has_bmi1","has_bmi2","has_cet_ss","has_cl_zero","has_clflush","has_clflushopt","has_clwb","has_cmov","has_cmp_legacy","has_cmpxchg16b","has_cmpxchg8b","has_cnxtid","has_code_data_prioritization","has_complex_indexing","has_configurable_psb_and_cycle_accurate_mode","has_cpb","has_cpl","has_data_access_bkpt_extension","has_dca","has_de","has_debug_swap","has_decode_assists","has_ds","has_ds_area","has_dts","has_ecmd","has_eist","has_encls_leaves_etrackc_erdinfo_eldbc_elduc","has_enclv_leaves_einvirtchild_edecvirtchild_esetcontext","has_energy_bias_pref","has_execute_disable","has_ext_apic_space","has_f16c","has_fast_fxsave_fxstor","has_fdp","has_feedback_iface","has_flexible_hwp","has_flush_by_asid","has_fma","has_fma4","has_fp128","has_fp256","has_fpu","has_fpu_cs_ds_deprecated","has_freq_id_ctrl","has_fsgsbase","has_fxsave_fxstor","has_gfni","has_gif","has_gmet","has_hdc","has_hle","has_host_mce_override","has_htt","has_hw_coord_feedback","has_hw_enforced_cache_coh","has_hw_pstate","has_hwa","has_hwp","has_hwp_activity_window","has_hwp_capabilities","has_hwp_energy_performance_preference","has_hwp_fast_access_mode","has_hwp_notification","has_hwp_package_level_request","has_hwp_peci_override","has_hypervisor","has_ibs","has_ignore_idle_processor_hwp_request","has_inst_ret_cntr_msr","has_int_wbinvd","has_invariant_tsc","has_invlpgb","has_invlpgb_nested","has_invpcid","has_ip_tracestop_filtering","has_l2_cat","has_l3_cat","has_l3_monitoring","has_la57","has_lahf_sahf","has_lbr_virtualization","has_linear_response_delay","has_lip_with_cs_base","has_local_bandwidth_monitoring","has_lwp","has_lzcnt","has_mca","has_mca_overflow_recovery","has_mce","has_mcommit","has_memory_bandwidth_allocation","has_misaligned_sse_mode","has_mmx","has_mmx_extensions","has_monitor_mwait","has_monitorx_mwaitx","has_movbe","has_movu","has_mpx","has_msr","has_mtc_timing_packet_coefi_suppression","has_mtrr","has_nb_perf_cntr_extensions","has_nested_paging","has_nrip","has_occupancy_monitoring","has_ospke","has_osvw","has_oxsave","has_pae","has_page_flush_msr","has_pat","has_pause_filter","has_pause_filter_threshold","has_pbe","has_pcid","has_pclmulqdq","has_pdcm","has_perf_cntr_extensions","has_perf_cntr_llc_extensions","has_perf_tsc","has_pge","has_pku","has_pln","has_popcnt","has_power_event_trace","has_power_reporting_iface","has_prefetchw","has_prefetchwt1","has_prevent_host_ibs","has_processor_trace","has_pse","has_pse36","has_psn","has_ptm","has_ptwrite","has_rdpid","has_rdpru","has_rdrand","has_rdseed","has_rdta","has_rdtm","has_rdtscp","has_rep_movsb_stosb","has_restore_fp_error_ptrs","has_restricted_injection","has_ro_effective_freq_iface","has_rtit_cr3_match","has_rtm","has_sev","has_sev_es","has_sev_snp","has_sgx","has_sgx1","has_sgx2","has_sgx_lc","has_sha","has_single_range_output_scheme","has_skinit","has_smap","has_sme","has_smep","has_smx","has_spec_ctrl","has_ss","has_sse","has_sse2","has_sse3","has_sse41","has_sse42","has_sse4a","has_sss_check","has_ssse3","has_succor","has_svm","has_svm_lock","has_syscall_sysret","has_sysenter_sysexit","has_tbm","has_thermtrip","has_tlb_ctrl","has_tm","has_tm","has_tm2","has_tme_en","has_topa","has_topa_maximum_entries","has_topology_extensions","has_total_bandwidth_monitoring","has_trace_transport_subsystem","has_ts","has_tsc","has_tsc_adjust_msr","has_tsc_deadline","has_tsc_rate_msr","has_turbo_boost","has_turbo_boost3","has_umip","has_unsupported_efer_lmsle","has_vaes","has_vmcb_clean_bits","has_vme","has_vmpl","has_vmsave_virtualization","has_vmx","has_volt_id_ctrl","has_vpclmulqdq","has_vte","has_waitpkg","has_wbnoinvd","has_wdt","has_x2apic","has_xgetbv","has_xop","has_xsave","has_xsavec","has_xsaveopt","has_xsaves_xrstors","highest_cos","highest_cos","highest_cos","ia32_xss_supports_hdc","ia32_xss_supports_pt","icache_associativity","icache_line_size","icache_lines_per_tag","icache_size","identify","initial_local_apic_id","interrupts_as_break_event","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","invlpgb_max_pages","is_branch_inst_ret_ev_unavailable","is_branch_midpred_ev_unavailable","is_cache_ref_ev_unavailable","is_compacted_format","is_core_cyc_ev_unavailable","is_fully_associative","is_fully_associative","is_in_ia32_xss","is_in_xcr0","is_inclusive","is_inst_ret_ev_unavailable","is_ll_cache_miss_ev_unavailable","is_ref_cycle_ev_unavailable","is_self_initializing","is_write_back_invalidate","isolation_bitmap","isolation_bitmap","iter","iter","itlb_2m_4m_associativity","itlb_2m_4m_associativity","itlb_2m_4m_size","itlb_2m_4m_size","itlb_4k_associativity","itlb_4k_associativity","itlb_4k_size","itlb_4k_size","itlb_l1_1gb_associativity","itlb_l1_1gb_size","itlb_l2_1gb_associativity","itlb_l2_1gb_size","l2_cat","l2cache_associativity","l2cache_line_size","l2cache_lines_per_tag","l2cache_size","l3_cat","l3_monitoring","l3cache_associativity","l3cache_line_size","l3cache_lines_per_tag","l3cache_size","largest_monitor_line","level","level_number","level_type","linear_address_bits","location","mawau_value","max_addressable_ids","max_cores_for_cache","max_cores_for_package","max_enclave_size_64bit","max_enclave_size_non_64bit","max_encrypted_guests","max_hba_throttling","max_logical_processor_ids","max_rdpru_id","maximum_logical_processors","maximum_rmid_range","memory_bandwidth_allocation","min_sev_no_es_asid","miscselect","model_id","native_cpuid","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","next","next","next","next","next","next","next","node_id","nodes_per_processor","nominal_frequency","num","num_phys_threads","number_of_counters","numerator","offset","partitioning","perf_tsc_size","physical_address_bits","physical_address_reduction","physical_base","physical_line_partitions","pkg_type","processor_base_frequency","processor_max_frequency","processors","register","revision","rmid_range","secs_attributes","serial","serial_all","serial_lower","serial_middle","serial_upper","sets","sets","shift_right_for_next_apic_id","size","size","smallest_monitor_line","stepping_id","subleaf","supported_asids","supported_c0_states","supported_c1_states","supported_c2_states","supported_c3_states","supported_c4_states","supported_c5_states","supported_c6_states","supported_c7_states","supported_cycle_threshold_value_encodings","supported_mtc_period_encodings","supported_psb_frequency_encodings","threads_per_core","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tsc_frequency","tsc_frequency","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version_id","ways","with_cpuid_fn","with_cpuid_reader","x2apic_id","x2apic_id","xcr0_supports_avx512_opmask","xcr0_supports_avx512_zmm_hi16","xcr0_supports_avx512_zmm_hi256","xcr0_supports_avx_256","xcr0_supports_legacy_x87","xcr0_supports_mpx_bndcsr","xcr0_supports_mpx_bndregs","xcr0_supports_pkru","xcr0_supports_sse_128","xsave_area_size_enabled_features","xsave_area_size_supported_features","xsave_size","0","0","0","1","2","0","CpuIdReaderNative","borrow","borrow_mut","clone","cpuid2","cpuid_count","from","into","try_from","try_into","type_id"],"q":["raw_cpuidraw_cpuid::Associativity","raw_cpuid::ExtendedRegisterType","raw_cpuid::Hypervisor","","","raw_cpuid::SgxSectionInfo","raw_cpuid::native_cpuid","","","","","","","","","",""],"d":["","Processor Power Management and RAS Capabilities …","Info about cache Associativity.","","","","","","This table is taken from Intel manual (Section CPUID …","","Describes any kind of cache (TLB, Data and Instruction …","Iterates over cache information (LEAF=0x02).","What type of cache are we dealing with?","Information about an individual cache in the hierarchy.","Iterator over caches (LEAF=0x04).","Info about a what a given cache caches (instructions, …","","The main type used to query information about the CPU we’…","Implements function to read/write cpuid. This allows to …","Low-level data-structure to store result of cpuid …","","Deterministic Address Translation Structure","Deterministic Address Translation Structure Iterator …","Deterministic Address Translation cache type (EDX bits 04 …","Data cache","","","Direct cache access info (LEAF=0x09).","","","","EBX:EAX and EDX:ECX provide information on the Enclave …","Structured Extended Feature Identifiers (LEAF=0x07).","Extended Processor and Processor Feature Identifiers …","Where the extended register state is stored.","What kidn of extended register state this is.","ExtendedState subleaf structure for things that need to be …","Information for saving/restoring extended register state …","Yields ExtendedState structs.","Information about topology (LEAF=0x0B).","Gives information about the current level in the topology.","Processor and Processor Feature Identifiers (LEAF=0x01).","","","","","Identifies the different Hypervisor products.","Information about Hypervisor (LEAF=0x4000_0001)","","Instruction cache","","","","L1 Cache and TLB Information (LEAF=0x8000_0005).","L2/L3 Cache and TLB Information (LEAF=0x8000_0006).","L2 Cache Allocation Technology Enumeration Sub-leaf …","L3 Cache Allocation Technology Enumeration Sub-leaf …","Information about L3 cache monitoring.","","Memory Bandwidth Allocation Enumeration Sub-leaf …","Encrypted Memory Capabilities (LEAF=0x8000_001F).","","Information about how monitor/mwait works on this CPU …","","","","Null - No more caches","Null (indicates this sub-leaf is not valid).","Info about performance monitoring – how many counters …","Performance Optimization Identifier (LEAF=0x8000_001A).","","","Processor name (LEAF=0x8000_0002..=0x8000_0004).","Processor Capacity Parameters and Extended Feature …","Processor Frequency Information (LEAF=0x16).","Processor Serial Number (LEAF=0x3).","Processor Topology Information (LEAF=0x8000_001E).","Intel Processor Trace Information (LEAF=0x14).","","QEMU is the hypervisor identity when QEMU is used without …","","Quality of service enforcement information (LEAF=0x10).","Intel Resource Director Technology RDT (LEAF=0x0F).","4-31 = Reserved","Hyper-thread (Simultaneous multithreading)","","Intel SGX Capability Enumeration Leaf (LEAF=0x12).","Intel SGX EPC Enumeration Leaf","Iterator over the SGX sub-leafs (ECX &gt;= 2).","Iterator for SoC vendor attributes.","A vendor brand string as queried from the cpuid leaf.","SoC vendor specific information (LEAF=0x17).","","Information about the SVM features that the processory …","","Query information about thermal and power management …","","TLB 1-GiB Pages Information (LEAF=0x8000_0019).","What type of core we have at this level in the topology …","Time Stamp Counter/Core Crystal Clock Information …","Data and Instruction cache","Some unified TLBs will allow a single TLB entry to satisfy …","","","","","","Vendor Info String (LEAF=0x0)","","","","(Virtual) Bus (local apic timer) frequency in kHz.","APIC ID size.","Return the processor brand string as a rust string.","Return vendor identification as human readable string.","Return the SocVendorBrand as a string.","","","Ways of associativity (Bits 31-22)","Version Information: Family","Version Information: Model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns brand ID on AMD.","Brand Index","Bus (Reference) Frequency (in MHz).","C-bit location in page table entry","Translation cache level (starts at 1)","Translation cache type field.","Cache Type","Length of the capacity bit mask.","Length of the capacity bit mask.","CLFLUSH line size (Value ∗ 8 = cache line size in bytes)","","","","","","","","","","","","System Coherency Line Size (Bits 11-00)","Number of configurable Address Ranges for filtering (Bits …","Conversion factor from reported IA32_QM_CTR value to …","Core ID","Bit width of general-purpose, performance monitoring …","Specifies the ratio of the compute unit power accumulator …","Macro which queries cpuid directly.","","","L1 data cache associativity.","L1 data cache line size in bytes.","L1 data cache lines per tag.","L1 data cache size in KB","Create a new <code>CpuId</code> instance.","An unsigned integer which is the denominator of the …","Description of the cache (from Intel Manual)","Data TLB associativity for 2-MB and 4-MB pages.","L2 Data TLB associativity for 2-MB and 4-MB pages.","Data TLB number of entries for 2-MB and 4-MB pages.","L2 Data TLB number of entries for 2-MB and 4-MB pages.","Data TLB associativity for 4K pages.","L2 Data TLB associativity for 4K pages.","Data TLB number of entries for 4K pages.","L2 Data TLB number of entries for 4K pages.","L1 Data TLB associativity for 1-GB pages.","L1 Data TLB number of entries for 1-GB pages.","L2 Data TLB associativity for 1-GB pages.","L2 Data TLB number of entries for 1-GB pages.","Number of Interrupt Thresholds in Digital Thermal Sensor","Return value EAX register","Return value EBX register","Length of EBX bit vector to enumerate architectural …","Return value ECX register","Return value EDX register","","","","","","","","","","","","","","","","","","","","","","","","","","","Version Information: Extended Family","Version Information: Extended Model","Extended Processor Signature.","Enumeration of Monitor-Mwait extensions (beyond EAX and …","","Number of fixed-function performance counters (if Version …","Bit width of fixed-function performance counters (if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Advanced Power Management Information (LEAF=0x8000_0007).","Query basic information about caches (LEAF=0x02).","Retrieve more elaborate information about caches …","Value of bits [31:0] of IA32_PLATFORM_DCA_CAP MSR (address …","Query deterministic address translation feature …","Direct cache access info (LEAF=0x09).","Find out about more features supported by this CPU …","Extended Processor and Processor Feature Identifiers …","Information for saving/restoring extended register state …","Information about topology (LEAF=0x0B).","Extended information about topology (LEAF=0x1F).","Query a set of features that are available on this CPU …","Returns information provided by the hypervisor, if running …","L1 Instruction Cache Information (LEAF=0x8000_0005)","L2/L3 Cache and TLB Information (LEAF=0x8000_0006).","Informations about memory encryption support …","Information about how monitor/mwait works on this CPU …","Info about performance monitoring (LEAF=0x0A).","Informations about performance optimization …","Retrieve processor brand string (LEAF=0x8000_000{2..4}).","Processor Capacity Parameters and Extended Feature …","Processor Frequency Information (LEAF=0x16).","Retrieve serial number of processor (LEAF=0x03).","Informations about processor topology (LEAF=0x8000_001E)","Intel Processor Trace Enumeration Information (LEAF=0x14).","","Quality of service enforcement information (LEAF=0x10).","Quality of service monitoring information (LEAF=0x0F).","Information about secure enclave support (LEAF=0x12).","","Contains SoC vendor specific information (LEAF=0x17).","","This function provides information about the SVM features …","Query information about thermal and power management …","TLB 1-GiB Pages Information (LEAF=0x8000_0019)","Time Stamp Counter/Core Crystal Clock Information …","","","Return information about the vendor (LEAF=0x00).","Guest Physical Address Bits","Has 100 MHz multiplier Control?","1GB page size entries supported by this structure","Is there support for 1GiB pages.","2MB page size entries supported by this structure","3DNow extensions.","4K page size entries supported by this structure","4MB page size entries supported by this structure","Check support for 64-bit mode.","SEV guest execution only allowed from a 64-bit host if set.","Thermal Monitor and Software Controlled Clock Facilities. …","Breakpoint Addressing masking extended to bit 31.","Supports ADX.","A value of 1 indicates that the processor supports the …","LOCK MOV CR0 means MOV CR8. See “MOV(CRn)” in APM3.","Alternate Injection supported if set.","3DNow AMD extensions.","AnyThread deprecation","APIC On-Chip. The processor contains an Advanced …","ARAT. APIC-Timer-always-running feature is supported if …","AVX512VBMI2","Support for the AMD advanced virtual interrupt controller …","A value of 1 indicates the processor supports the AVX …","AVX2","AVX512_IFMA","AVX512BITALG","AVX512BW","AVX512CD","Supports AVX512DQ.","AVX512ER","Supports AVX512F.","AVX512PF","AVX512VL","AVX512VNNI","AVX512VPOPCNTDQ","BMI1","BMI2","Supports CET shadow stack features. Processors that set …","CLZERO instruction supported if set.","CLFLUSH Instruction. CLFLUSH Instruction is supported.","Supports CLFLUSHOPT.","CLWB","Conditional Move Instructions. The conditional move …","Check support legacy cmp.","CMPXCHG16B Available. A value of 1 indicates that the …","CMPXCHG8B Instruction. The compare-and-exchange 8 bytes …","L1 Context ID. A value of 1 indicates the L1 data cache …","Is Code and Data Prioritization Technology supported?","Complex Cache Indexing (Bit 2) False: Direct mapped cache. …","If true, Indicates support of Configurable PSB and …","Has Core performance boost?","CPL Qualified Debug Store. A value of 1 indicates the …","Data access breakpoint extension.","A value of 1 indicates the processor supports the ability …","Debugging Extensions. Support for I/O breakpoints, …","Full debug state swap supported for SEV-ES guests.","Indicates support for the decode assists if set.","Debug Store. The processor supports the ability to write …","64-bit DS Area. A value of 1 indicates the processor …","Digital temperature sensor is supported if set.","ECMD. Clock modulation duty cycle extension is supported …","Enhanced Intel SpeedStep® technology. A value of 1 …","Supports ENCLS instruction leaves ETRACKC, ERDINFO, ELDBC, …","Supports ENCLV instruction leaves EINCVIRTCHILD, …","The processor supports performance-energy bias preference …","Is there support for execute disable bit.","Extended APIC space.","A value of 1 indicates that processor supports 16-bit …","FXSAVE and FXRSTOR instruction optimizations.","FDP_EXCPTN_ONLY. x87 FPU Data Pointer updated only on x87 …","Indicates support for processor feedback interface.","Flexible HWP is supported if set.","Indicates that TLB flush events, including CR3 writes and …","A value of 1 indicates the processor supports FMA …","Four-operand FMA instruction support.","The internal FP/SIMD execution datapath is 128 bits wide …","The internal FP/SIMD execution datapath is 256 bits wide …","Floating Point Unit On-Chip. The processor contains an x87 …","Deprecates FPU CS and FPU DS values if 1.","Frequency ID control.","FSGSBASE. Supports RDFSBASE/RDGSBASE/WRFSBASE/WRGSBASE if …","FXSAVE and FXRSTOR Instructions. The FXSAVE and FXRSTOR …","GFNI","GIF – virtualized global interrupt flag if set.","Guest Mode Execution Trap supported if set.","HDC. HDC base registers IA32_PKG_HDC_CTL, IA32_PM_CTL1, …","HLE","When host <code>CR4.MCE=1</code> and guest <code>CR4.MCE=0</code>, machine check …","Max APIC IDs reserved field is Valid. A value of 0 for HTT …","Hardware Coordination Feedback Capability","Hardware cache coherency across encryption domains …","Has Hardware P-state control?","Has Hardware assert supported?","HWP. HWP base registers (IA32_PM_ENABLE[bit 0], …","HWP Activity Window. IA32_HWP_REQUEST[bits 41:32] is …","HWP Capabilities. Highest Performance change is supported …","HWP Energy Performance Preference. IA32_HWP_REQUEST[bits …","Fast access mode for the IA32_HWP_REQUEST MSR is supported …","HWP Notification. IA32_HWP_INTERRUPT MSR is supported if …","HWP Package Level Request. IA32_HWP_REQUEST_PKG MSR is …","HWP PECI override is supported if set.","A value of 1 indicates the indicates the presence of a …","Instruction based sampling.","Ignoring Idle Logical Processor HWP request is supported …","Instruction Retired Counter MSR available if set.","WBINVD/WBNOINVD are interruptible if set.","Is Invariant TSC available?","INVLPGB and TLBSYNC instruction supported if set.","INVLPGB support for invalidating guest nested translations …","INVPCID. If 1, supports INVPCID instruction for system …","If true, Indicates support of IP Filtering, TraceStop …","Supports L2 Cache Allocation.","Supports L3 Cache Allocation.","Supports L3 Cache Intel RDT Monitoring.","Supports 57-bit linear addresses and five-level paging if …","Is LAHF/SAHF available in 64-bit mode?","Indicates support for LBR Virtualization.","Reports whether the response of the delay values is linear.","If true, Generated packets which contain IP payloads have …","Supports local bandwidth monitoring.","Lightweight profiling support","Is LZCNT available?","Machine Check Architecture. A value of 1 indicates the …","Is MCA overflow recovery available?","Machine Check Exception. Exception 18 is defined for …","MCOMMIT instruction supported if set.","Supports Memory Bandwidth Allocation.","Misaligned SSE mode. See “Misaligned Access Support …","Intel MMX Technology. The processor supports the Intel MMX …","AMD extensions to MMX instructions.","MONITOR/MWAIT. A value of 1 indicates the processor …","Support for MWAITX and MONITORX instructions.","A value of 1 indicates that the processor supports MOVBE …","MOVU (Move Unaligned) SSE instructions are efficient more …","MPX. Supports Intel Memory Protection Extensions if 1.","Model Specific Registers RDMSR and WRMSR Instructions. The …","If true, Indicates support of MTC timing packet and …","Memory Type Range Registers. MTRRs are supported. The …","NB performance counter extensions support.","Nested paging supported if set.","Indicates support for NRIP save on #VMEXIT if set.","Supports occupancy monitoring.","OS has set CR4.PKE to enable protection keys (and the …","Indicates OS-visible workaround support","A value of 1 indicates that the OS has enabled …","Physical Address Extension. Physical addresses greater …","The Page Flush MSR is available if set.","Page Attribute Table. Page Attribute Table is supported. …","Indicates support for the pause intercept filter if set.","Indicates support for the PAUSE filter cycle count …","Pending Break Enable. The processor supports the use of …","Process-context identifiers. A value of 1 indicates that …","PCLMULQDQ. A value of 1 indicates the processor supports …","Perfmon and Debug Capability: A value of 1 indicates the …","Processor performance counter extensions support.","Support for L3 performance counter extension.","Performance time-stamp counter.","Page Global Bit. The global bit is supported in …","Supports protection keys for user-mode pages.","PLN. Power limit notification controls are supported if …","A value of 1 indicates that the processor supports the …","Support of Power Event Trace. Writes can set IA32_RTIT_CTL…","Has Processor power reporting interface?","Is PREFETCHW available?","Has PREFETCHWT1 (Intel® Xeon Phi™ only).","Disallowing IBS use by the host supported if set.","Supports Intel Processor Trace.","Page Size Extension. Large pages of size 4 MByte are …","36-Bit Page Size Extension. 4-MByte pages addressing …","Processor Serial Number. The processor supports the 96-bit …","PTM. Package thermal management is supported if set.","Indicates support of PTWRITE. Writes can set IA32_RTIT_CTL…","RDPID and IA32_TSC_AUX are available.","RDPRU instruction supported if set.","A value of 1 indicates that processor supports RDRAND …","Supports RDSEED.","Supports Intel Resource Director Technology (RDT) …","Supports Intel Resource Director Technology (RDT) …","Check support for rdtscp instruction.","Supports Enhanced REP MOVSB/STOSB if 1.","FP Error Pointers Restored by XRSTOR if set.","Restricted Injection supported if set.","Has Read-only effective frequency interface?","If true, Indicates that IA32_RTIT_CTL.CR3Filter can be set …","RTM","Secure Encrypted Virtualization is supported if set.","SEV Encrypted State is supported if set.","SEV Secure Nested Paging supported if set.","Supports Intel® Software Guard Extensions (Intel® SGX …","Has SGX1 support.","Has SGX2 support.","Supports SGX Launch Configuration.","Supports SHA Instructions.","If true, Indicates support of Single-Range Output scheme.","SKINIT and STGI are supported.","SMAP. Supports Supervisor-Mode Access Prevention (and the …","Secure Memory Encryption is supported if set.","SMEP. Supports Supervisor-Mode Execution Prevention if 1.","Safer Mode Extensions. A value of 1 indicates that the …","SPEC_CTRL virtualization supported if set.","Self Snoop. The processor supports the management of …","SSE. The processor supports the SSE extensions.","SSE2. The processor supports the SSE2 extensions.","Streaming SIMD Extensions 3 (SSE3). A value of 1 indicates …","A value of 1 indicates that the processor supports SSE4.1.","A value of 1 indicates that the processor supports SSE4.2.","XTRQ, INSERTQ, MOVNTSS, and MOVNTSD instruction support.","SVM supervisor shadow stack restrictions if set.","A value of 1 indicates the presence of the Supplemental …","Has Software uncorrectable error containment and recovery …","Secure virtual machine supported.","Indicates support for SVM-Lock if set.","Are fast system calls available.","SYSENTER and SYSEXIT Instructions. The SYSENTER and …","Trailing bit manipulation instruction support.","Has THERMTRIP?","Support for INVLPGB/TLBSYNC hypervisor enable in VMCB and …","Thermal Monitor. The processor implements the thermal …","Hardware thermal control (HTC)?","Thermal Monitor 2. A value of 1 indicates whether the …","Indicates the following MSRs are supported: …","If true, Tracing can be enabled with IA32_RTIT_CTL.ToPA = …","If true, ToPA tables can hold any number of output …","Topology extensions support.","Supports total bandwidth monitoring.","If true, Indicates support of output to Trace Transport …","Is Temperature Sensor available?","Time Stamp Counter. The RDTSC instruction is supported, …","IA32_TSC_ADJUST MSR is supported if 1.","A value of 1 indicates that the processors local APIC …","Indicates support for MSR TSC ratio (MSR <code>0xC000_0104</code>) if …","Intel Turbo Boost Technology Available (see description of …","Intel® Turbo Boost Max Technology 3.0 available.","Supports user-mode instruction prevention if 1.","EFER.LMSLE is unsupported if set.","VAES","Indicates support for VMCB clean bits if set.","Virtual 8086 Mode Enhancements. Virtual 8086 mode …","VM Permission Levels supported if set.","VMSAVE and VMLOAD virtualization supported if set.","Virtual Machine Extensions. A value of 1 indicates that …","Voltage ID control.","VPCLMULQDQ","Virtual Transparent Encryption supported if set.","WAITPKG","WBNOINVD instruction supported if set.","Watchdog timer support.","A value of 1 indicates that the processor supports x2APIC …","Supports XGETBV with ECX = 1 if set.","Extended operation support.","A value of 1 indicates that the processor supports the …","Supports XSAVEC and the compacted form of XRSTOR if set.","CPU has xsaveopt feature.","Supports XSAVES/XRSTORS and IA32_XSS if set.","Highest COS number supported for this Leaf.","Highest COS number supported for this Leaf.","Highest COS number supported for this Leaf.","Support for HDC in IA32_XSS.","Support for PT in IA32_XSS.","L1 instruction cache associativity.","L1 instruction cache line size in bytes.","L1 instruction cache lines per tag.","L1 instruction cache size in KB","Returns the identity of the <code>Hypervisor</code>.","Initial APIC ID","Supports treating interrupts as break-event for MWAIT, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Maximum page count for INVLPGB instruction.","Branch instruction retired event not available if 1.","Branch mispredict retired event not available if 1.","Last-level cache reference event not available if 1.","Returns true when the compacted format of an XSAVE area is …","Core cycle event not available if 1.","Fully associative structure","Fully Associative cache","True if the bit n (corresponding to the sub-leaf index) is …","True if bit n is supported in XCR0.","Cache Inclusiveness (Bit 1) False: Cache is not inclusive …","Instruction retired event not available if 1.","Last-level cache misses event not available if 1.","Reference cycles event not available if 1.","Self Initializing cache level (does not need SW …","Write-Back Invalidate/Invalidate (Bit 0) False: …","Bit-granular map of isolation/contention of allocation …","Bit-granular map of isolation/contention of allocation …","Iterator over extended state enumeration levels &gt;= 2.","Iterator over SGX sub-leafs.","Instruction TLB associativity for 2-MB and 4-MB pages.","L2 Instruction TLB associativity for 2-MB and 4-MB pages.","Instruction TLB number of entries for 2-MB and 4-MB pages.","L2 Instruction TLB number of entries for 2-MB and 4-MB …","Instruction TLB associativity for 4K pages.","L2 Instruction TLB associativity for 4K pages.","Instruction TLB number of entries for 4K pages.","L2 Instruction TLB number of entries for 4K pages.","L1 Instruction TLB associativity for 1-GB pages.","L1 Instruction TLB number of entries for 1-GB pages.","L2 Instruction TLB associativity for 1-GB pages.","L2 Instruction TLB number of entries for 1-GB pages.","L2 Cache Allocation Information.","L2 Associativity field","L2 Cache Line size in bytes","L2 cache lines per tag.","Cache size in KB.","L3 Cache Allocation Information.","L3 Cache Monitoring.","L2 Associativity field","L2 Cache Line size in bytes","L2 cache lines per tag.","Specifies the L3 cache size range","Largest monitor-line size in bytes (default is processor’…","Cache Level (starts at 1)","Level number.","","Linear Address Bits","","The value of MAWAU used by the BNDLDX and BNDSTX …","Maximum number of addressable IDs for logical processors …","Maximum number of addressable IDs for logical processors …","Maximum number of addressable IDs for processor cores in …","The maximum supported enclave size in 64-bit mode is …","The maximum supported enclave size in non-64-bit mode is …","Number of encrypted guests supported simultaneouslys","Reports the maximum MBA throttling value supported for the …","Maximum number of addressable IDs for logical processors …","The maximum ECX value recognized by RDPRU.","The size of the <code>apic_id_size</code> field determines the maximum …","Maximum range (zero-based) of RMID of L3.","Memory Bandwidth Allocation Information.","Minimum ASID value for an SEV enabled, SEV-ES disabled …","Bit vector of supported extended SGX features.","","Uses Rust’s <code>cpuid</code> function from the <code>arch</code> module.","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>CpuId</code> instance.","Iterate over all SoC vendor specific attributes.","Iterate over all cache information.","Iterate over all cache info subleafs for this CPU.","","","","Iterate over each sub-leaf with an address translation …","Node ID","Nodes per processor","An unsigned integer which is the nominal frequency of the …","Number as retrieved from cpuid","Number of physical threads in the processor.","Number of general-purpose performance monitoring counter …","An unsigned integer which is the numerator of the …","The offset in bytes of this extended state components save …","Partitioning (0: Soft partitioning between the logical …","Performance time-stamp counter size (in bits).","Physical Address Bits","Physical Address bit reduction","The physical address of the base of the EPC section","Physical Line partitions (Bits 21-12)","Returns package type on AMD.","Processor Base Frequency (in MHz).","Maximum Frequency (in MHz).","Number of logical processors at this level type. The …","Returns which register this specific extended subleaf …","SVM revision number.","Maximum range (zero-based) of RMID within this physical …","Reports the valid bits of SECS.ATTRIBUTES[127:0] that …","Combination of bits 00-31 and 32-63 of 96 bit processor …","96 bit processor serial number.","Bits 00-31 of 96 bit processor serial number.","Bits 32-63 of 96 bit processor serial number.","Bits 64-96 of 96 bit processor serial number.","Number of Sets.","Number of Sets (Bits 31-00)","Number of bits to shift right on x2APIC ID to get a unique …","The size in bytes (from the offset specified in EBX) of …","Size of the corresponding EPC section within the Processor …","Smallest monitor-line size in bytes (default is processor…","Version Information: Stepping ID","","Number of available address space identifiers (ASID).","Number of C0 sub C-states supported using MWAIT (Bits 03 - …","Number of C1 sub C-states supported using MWAIT (Bits 07 - …","Number of C2 sub C-states supported using MWAIT (Bits 11 - …","Number of C3 sub C-states supported using MWAIT (Bits 15 - …","Number of C4 sub C-states supported using MWAIT (Bits 19 - …","Number of C5 sub C-states supported using MWAIT (Bits 23 - …","Number of C6 sub C-states supported using MWAIT (Bits 27 - …","Number of C7 sub C-states supported using MWAIT (Bits 31 - …","Bitmap of supported Cycle Threshold value encodings (Bits …","Bitmap of supported MTC period encodings (Bit 31:16).","Bitmap of supported Configurable PSB frequency encodings …","Threads per core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","“TSC frequency” = “core crystal clock frequency” * …","TSC frequency in kHz.","Cache type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Version ID of architectural performance monitoring. (Bits …","Ways of associativity.","See <code>CpuId::with_cpuid_reader</code>.","Return new CpuId struct with custom reader function.","x2APIC ID","x2APIC ID the current logical processor. (Bits 31-00)","Support for AVX512 OPMASK in XCR0.","Support for AVX512 ZMM Hi16 in XCR0.","Support for AVX512 ZMM Hi256 XCR0.","Support for AVX 256-bit in XCR0.","Support for legacy x87 in XCR0.","Support for MPX BNDCSR in XCR0.","Support for MPX BNDREGS in XCR0.","Support for PKRU in XCR0.","Support for SSE 128-bit in XCR0.","Maximum size (bytes, from the beginning of the …","Maximum size (bytes, from the beginning of the …","The size in bytes of the XSAVE area containing all states …","","","","","","","The native reader uses the cpuid instruction to read the …","","","","","","","","","",""],"i":[1,0,0,2,2,2,2,1,0,3,0,0,0,0,0,0,4,0,0,0,3,0,0,0,5,6,4,0,7,7,8,0,0,0,0,0,0,0,0,0,0,0,7,3,2,1,0,0,9,5,6,4,1,0,0,0,0,0,6,0,0,4,0,2,2,7,5,6,0,0,2,3,0,0,0,0,0,0,2,1,1,0,0,5,4,3,0,0,0,0,0,0,6,0,3,0,4,0,0,0,5,6,7,2,6,1,1,0,9,1,10,11,12,13,14,15,14,15,16,17,17,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,11,36,37,7,38,12,39,40,41,42,43,44,10,14,45,3,46,47,48,16,5,49,50,51,4,52,2,9,53,54,55,8,56,57,6,15,1,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,11,36,37,7,38,12,39,40,41,42,43,44,10,14,45,3,46,47,48,16,5,49,50,51,4,52,2,9,53,54,55,8,56,57,6,15,1,18,17,32,43,33,33,16,28,53,17,44,10,45,3,46,48,16,50,52,55,57,16,30,26,42,22,38,0,58,58,36,36,36,36,44,31,46,36,37,36,37,36,37,36,37,40,40,40,40,19,10,10,22,10,10,36,37,7,38,12,39,40,41,42,43,10,14,45,47,16,5,49,51,4,2,9,53,54,6,15,1,17,17,18,49,17,22,22,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,11,36,37,7,7,38,12,39,40,41,42,43,44,10,14,14,45,3,46,46,47,48,16,5,5,49,50,51,4,4,52,2,2,9,9,53,54,55,8,56,57,6,6,15,15,1,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,11,36,37,7,38,12,39,40,41,42,43,44,10,14,45,3,46,47,48,16,5,49,50,51,4,52,2,2,9,53,54,55,8,56,57,6,15,1,44,44,44,21,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,34,44,44,44,34,44,34,44,44,44,44,34,34,44,12,38,33,18,33,18,33,33,18,43,17,18,20,17,18,43,18,22,17,19,20,39,17,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,12,17,20,20,17,18,17,17,17,28,16,30,38,17,18,17,17,43,39,17,17,19,19,17,29,29,19,18,18,17,18,20,38,19,39,17,18,41,41,17,20,38,20,17,20,39,39,19,20,39,17,19,43,38,38,19,19,19,19,19,19,19,19,17,18,19,12,12,38,12,12,20,30,27,27,25,20,18,39,54,30,26,18,18,17,38,17,12,27,18,17,18,17,18,17,41,20,17,30,17,18,39,39,26,20,18,17,17,43,17,39,39,17,17,17,17,18,18,18,17,20,19,17,30,38,18,20,43,20,17,17,17,19,30,20,12,17,20,20,20,18,20,12,43,38,30,20,43,43,43,20,29,29,20,20,30,18,20,43,20,17,39,17,17,17,17,17,17,18,39,17,38,18,39,18,17,18,38,39,17,38,17,20,30,30,18,26,30,38,17,20,17,39,19,19,20,12,20,39,17,43,39,17,38,20,43,20,12,18,17,23,18,17,23,23,23,28,53,54,23,23,36,36,36,36,11,17,49,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,11,36,37,7,38,12,39,40,41,42,43,44,10,14,45,3,46,47,48,16,5,49,50,51,4,52,2,9,53,54,55,8,56,57,6,15,1,35,45,48,50,52,55,57,12,22,22,22,24,22,33,16,24,24,16,22,22,22,16,16,28,53,23,29,36,37,36,37,36,37,36,37,40,40,40,40,27,37,37,37,37,27,25,37,37,37,37,49,16,51,51,12,24,20,33,16,16,29,29,43,54,17,12,12,26,27,43,29,17,0,36,37,7,38,12,39,40,41,42,43,10,14,45,47,16,49,51,2,53,54,15,1,44,35,45,48,50,52,55,57,42,42,31,46,12,22,31,24,33,12,12,43,56,16,18,32,32,51,24,39,25,29,47,47,47,47,47,33,16,51,24,56,49,17,24,39,49,49,49,49,49,49,49,49,30,30,30,42,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,11,36,37,7,38,12,39,40,41,42,43,44,10,14,45,3,46,47,48,16,5,49,50,51,4,52,2,9,53,54,55,8,56,57,6,15,1,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,11,36,37,7,38,12,39,40,41,42,43,44,10,14,45,3,46,47,48,16,5,49,50,51,4,52,2,9,53,54,55,8,56,57,6,15,1,31,11,46,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,11,36,37,7,38,12,39,40,41,42,43,44,10,14,45,3,46,47,48,16,5,49,50,51,4,52,2,9,53,54,55,8,56,57,6,15,1,22,33,44,44,42,51,23,23,23,23,23,23,23,23,23,23,23,23,59,60,61,61,61,62,0,63,63,63,63,0,63,63,63,63,63],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["option",4,[["u32",15]]]],[[],["u8",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["usize",15]],[[],["u8",15]],[[],["uu32",15]],[[],["u8",15]],[[],["u16",15]],[[],["u8",15]],[[],["u8",15]],[[],["dattype",4]],[[],["cachetype",4]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["cpuid",3]],[[],["cpuidresult",3]],[[],["cacheinfoiter",3]],[[],["cacheinfotype",4]],[[],["cacheinfo",3]],[[],["cacheparametersiter",3]],[[],["cacheparameter",3]],[[],["extendedtopologyiter",3]],[[],["extendedstateiter",3]],[[],["sgxsectioniter",3]],[[],["datiter",3]],[[],["usize",15]],[[],["u8",15]],[[],["u32",15]],[[],["u8",15]],[[],["u8",15]],[[],["u32",15]],null,[[["u32",15]],["cpuidresult",3]],[[["u32",15],["u32",15]],["cpuidresult",3]],[[],["associativity",4]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[]],[[],["u32",15]],[[],["str",15]],[[],["associativity",4]],[[],["associativity",4]],[[],["u8",15]],[[],["u16",15]],[[],["associativity",4]],[[],["associativity",4]],[[],["u8",15]],[[],["u16",15]],[[],["associativity",4]],[[],["u8",15]],[[],["associativity",4]],[[],["u8",15]],[[],["u8",15]],null,null,[[],["u8",15]],null,null,[[["l1cachetlbinfo",3]],["bool",15]],[[["l2and3cachetlbinfo",3]],["bool",15]],[[["associativity",4]],["bool",15]],[[["apminfo",3]],["bool",15]],[[["processorcapacityandfeatureinfo",3]],["bool",15]],[[["svmfeatures",3]],["bool",15]],[[["tlb1gbpageinfo",3]],["bool",15]],[[["performanceoptimizationinfo",3]],["bool",15]],[[["processortopologyinfo",3]],["bool",15]],[[["memoryencryptioninfo",3]],["bool",15]],[[["cpuidresult",3]],["bool",15]],[[["vendorinfo",3]],["bool",15]],[[["cacheinfoiter",3]],["bool",15]],[[["processorserial",3]],["bool",15]],[[["cacheparameter",3]],["bool",15]],[[["cachetype",4]],["bool",15]],[[["monitormwaitinfo",3]],["bool",15]],[[["extendedtopologylevel",3]],["bool",15]],[[["topologytype",4]],["bool",15]],[[["extendedregistertype",4]],["bool",15]],[[["extendedregisterstatelocation",4]],["bool",15]],[[["l2catinfo",3]],["bool",15]],[[["membwallocationinfo",3]],["bool",15]],[[["dattype",4]],["bool",15]],[[["socvendorbrand",3]],["bool",15]],[[["hypervisor",4]],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],["u32",15]],[[],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["extendedregistertype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["apminfo",3]]]],[[],["option",4,[["cacheinfoiter",3]]]],[[],["option",4,[["cacheparametersiter",3]]]],[[],["u32",15]],[[],["option",4,[["datiter",3]]]],[[],["option",4,[["directcacheaccessinfo",3]]]],[[],["option",4,[["extendedfeatures",3]]]],[[],["option",4,[["extendedprocessorfeatureidentifiers",3]]]],[[],["option",4,[["extendedstateinfo",3]]]],[[],["option",4,[["extendedtopologyiter",3]]]],[[],["option",4,[["extendedtopologyiter",3]]]],[[],["option",4,[["featureinfo",3]]]],[[],["option",4,[["hypervisorinfo",3]]]],[[],["option",4,[["l1cachetlbinfo",3]]]],[[],["option",4,[["l2and3cachetlbinfo",3]]]],[[],["option",4,[["memoryencryptioninfo",3]]]],[[],["option",4,[["monitormwaitinfo",3]]]],[[],["option",4,[["performancemonitoringinfo",3]]]],[[],["option",4,[["performanceoptimizationinfo",3]]]],[[],["option",4,[["processorbrandstring",3]]]],[[],["option",4,[["processorcapacityandfeatureinfo",3]]]],[[],["option",4,[["processorfrequencyinfo",3]]]],[[],["option",4,[["processorserial",3]]]],[[],["option",4,[["processortopologyinfo",3]]]],[[],["option",4,[["processortraceinfo",3]]]],[[],["u32",15]],[[],["option",4,[["rdtallocationinfo",3]]]],[[],["option",4,[["rdtmonitoringinfo",3]]]],[[],["option",4,[["sgxinfo",3]]]],[[],["u16",15]],[[],["option",4,[["socvendorinfo",3]]]],[[],["u32",15]],[[],["option",4,[["svmfeatures",3]]]],[[],["option",4,[["thermalpowerinfo",3]]]],[[],["option",4,[["tlb1gbpageinfo",3]]]],[[],["option",4,[["tscinfo",3]]]],[[],["option",4,[["socvendorattributesiter",3]]]],[[],["option",4,[["socvendorbrand",3]]]],[[],["option",4,[["vendorinfo",3]]]],[[],["u8",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["bool",15]],[[],["bool",15]],[[],["associativity",4]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["hypervisor",4]],[[],["u8",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u16",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["extendedstateiter",3]],[[],["sgxsectioniter",3]],[[],["associativity",4]],[[],["associativity",4]],[[],["u8",15]],[[],["u16",15]],[[],["associativity",4]],[[],["associativity",4]],[[],["u8",15]],[[],["u16",15]],[[],["associativity",4]],[[],["u8",15]],[[],["associativity",4]],[[],["u8",15]],[[],["option",4,[["l2catinfo",3]]]],[[],["associativity",4]],[[],["u8",15]],[[],["u8",15]],[[],["u16",15]],[[],["option",4,[["l3catinfo",3]]]],[[],["option",4,[["l3monitoringinfo",3]]]],[[],["associativity",4]],[[],["u8",15]],[[],["u8",15]],[[],["u16",15]],[[],["u16",15]],[[],["u8",15]],[[],["u8",15]],[[],["topologytype",4]],[[],["u8",15]],[[],["extendedregisterstatelocation",4]],[[],["u8",15]],[[],["u16",15]],[[],["usize",15]],[[],["usize",15]],[[],["u8",15]],[[],["u8",15]],[[],["u32",15]],[[],["u16",15]],[[],["u8",15]],[[],["u16",15]],[[],["usize",15]],[[],["u32",15]],[[],["option",4,[["membwallocationinfo",3]]]],[[],["u32",15]],[[],["u32",15]],[[],["u8",15]],null,[[["l1cachetlbinfo",3]],["bool",15]],[[["l2and3cachetlbinfo",3]],["bool",15]],[[["associativity",4]],["bool",15]],[[["apminfo",3]],["bool",15]],[[["processorcapacityandfeatureinfo",3]],["bool",15]],[[["svmfeatures",3]],["bool",15]],[[["tlb1gbpageinfo",3]],["bool",15]],[[["performanceoptimizationinfo",3]],["bool",15]],[[["processortopologyinfo",3]],["bool",15]],[[["memoryencryptioninfo",3]],["bool",15]],[[["cpuidresult",3]],["bool",15]],[[["vendorinfo",3]],["bool",15]],[[["cacheinfoiter",3]],["bool",15]],[[["processorserial",3]],["bool",15]],[[["cacheparameter",3]],["bool",15]],[[["monitormwaitinfo",3]],["bool",15]],[[["extendedtopologylevel",3]],["bool",15]],[[["extendedregistertype",4]],["bool",15]],[[["l2catinfo",3]],["bool",15]],[[["membwallocationinfo",3]],["bool",15]],[[["socvendorbrand",3]],["bool",15]],[[["hypervisor",4]],["bool",15]],[[]],[[],["option",4,[["cpuidresult",3]]]],[[],["option",4,[["cacheinfo",3]]]],[[],["option",4,[["cacheparameter",3]]]],[[],["option",4,[["extendedtopologylevel",3]]]],[[],["option",4,[["extendedstate",3]]]],[[],["option",4,[["sgxsectioninfo",4]]]],[[],["option",4,[["datinfo",3]]]],[[],["u8",15]],[[],["u8",15]],[[],["u32",15]],null,[[],["usize",15]],[[],["u8",15]],[[],["u32",15]],[[],["u32",15]],[[],["u8",15]],[[],["usize",15]],[[],["u8",15]],[[],["u8",15]],[[],["u64",15]],[[],["usize",15]],[[],["u32",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["extendedregistertype",4]],[[],["u8",15]],[[],["u32",15]],[[]],[[],["u64",15]],[[],["u128",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["usize",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u16",15]],[[],["u8",15]],null,[[],["u32",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u8",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4,[["u64",15]]]],[[],["option",4,[["u32",15]]]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u8",15]],[[],["u16",15]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],null,null,null,null,null,null,null,[[]],[[]],[[],["cpuidreadernative",3]],[[["u32",15],["u32",15]],["cpuidresult",3]],[[["u32",15],["u32",15]],["cpuidresult",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"Hypervisor"],[4,"ExtendedRegisterType"],[4,"CacheInfoType"],[4,"TopologyType"],[4,"CacheType"],[4,"DatType"],[4,"Associativity"],[4,"SgxSectionInfo"],[4,"ExtendedRegisterStateLocation"],[3,"CpuIdResult"],[3,"HypervisorInfo"],[3,"ProcessorCapacityAndFeatureInfo"],[3,"ProcessorBrandString"],[3,"VendorInfo"],[3,"SoCVendorBrand"],[3,"CacheParameter"],[3,"FeatureInfo"],[3,"ExtendedProcessorFeatureIdentifiers"],[3,"ThermalPowerInfo"],[3,"ExtendedFeatures"],[3,"DirectCacheAccessInfo"],[3,"PerformanceMonitoringInfo"],[3,"ExtendedStateInfo"],[3,"ExtendedState"],[3,"RdtMonitoringInfo"],[3,"L3MonitoringInfo"],[3,"RdtAllocationInfo"],[3,"L3CatInfo"],[3,"SgxInfo"],[3,"ProcessorTraceInfo"],[3,"TscInfo"],[3,"ProcessorFrequencyInfo"],[3,"DatInfo"],[3,"SoCVendorInfo"],[3,"SoCVendorAttributesIter"],[3,"L1CacheTlbInfo"],[3,"L2And3CacheTlbInfo"],[3,"ApmInfo"],[3,"SvmFeatures"],[3,"Tlb1gbPageInfo"],[3,"PerformanceOptimizationInfo"],[3,"ProcessorTopologyInfo"],[3,"MemoryEncryptionInfo"],[3,"CpuId"],[3,"CacheInfoIter"],[3,"CacheInfo"],[3,"ProcessorSerial"],[3,"CacheParametersIter"],[3,"MonitorMwaitInfo"],[3,"ExtendedTopologyIter"],[3,"ExtendedTopologyLevel"],[3,"ExtendedStateIter"],[3,"L2CatInfo"],[3,"MemBwAllocationInfo"],[3,"SgxSectionIter"],[3,"EpcSection"],[3,"DatIter"],[8,"CpuIdReader"],[13,"NWay"],[13,"Unknown"],[13,"Unknown"],[13,"Epc"],[3,"CpuIdReaderNative"]]},\
"trapframe":{"doc":"","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,5,11,11,12,11,11,11,11,11,11],"n":["GeneralRegs","UserContext","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","error_code","fmt","fmt","from","from","fsbase","general","get_sp","get_syscall_args","get_syscall_num","get_syscall_ret","gsbase","into","into","ne","ne","r10","r11","r12","r13","r14","r15","r8","r9","rax","rbp","rbx","rcx","rdi","rdx","rflags","rip","rsi","rsp","run_fncall","set_ip","set_sp","set_syscall_ret","set_tls","syscall_fn_entry","to_owned","to_owned","trap_num","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["trapframe","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["General registers","User space context","","","","","","","","","","","","","","","","","","","","Get stack pointer","Get syscall args","Get number of syscall","Get return value of syscall","","","","","","","","","","","","","","","","","","","","","","","","Go to user context by function return, within the same …","Set instruction pointer","Set stack pointer","Set return value of syscall","Set tls pointer","The syscall entry of function call.","","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,2,2,1,1,1,1,1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,1,2,1,1,2,1,2,1,2],"f":[null,null,[[]],[[]],[[]],[[]],[[],["usercontext",3]],[[],["generalregs",3]],[[]],[[]],[[],["usercontext",3]],[[],["generalregs",3]],[[["usercontext",3]],["bool",15]],[[["generalregs",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],null,null,[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[["usercontext",3]],["bool",15]],[[["generalregs",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"UserContext"],[3,"GeneralRegs"]]},\
"volatile":{"doc":"Provides the wrapper type <code>Volatile</code>, which wraps a …","t":[3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Volatile","access","as_mut_slice","as_slice","borrow","borrow_mut","clone","extract_inner","fmt","fmt","from","index","index_mut","into","map","map_mut","new","new_read_only","new_write_only","read","read_only","try_from","try_into","type_id","update","write","write_only","ReadOnly","ReadWrite","Readable","Writable","WriteOnly","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","fmt","fmt","fmt","from","from","from","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["volatile","","","","","","","","","","","","","","","","","","","","","","","","","","","volatile::access","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Wraps a reference to make accesses to the referenced value …","Allows creating read-only and write-only <code>Volatile</code> values.","Converts a mutable array reference to a mutable slice.","Converts an array reference to a shared slice.","","","","Extracts the inner value stored in the wrapper type.","","","","Applies the index operation on the wrapped slice.","Applies the mutable index operation on the wrapped slice.","","Constructs a new <code>Volatile</code> reference by mapping the wrapped …","Constructs a new mutable <code>Volatile</code> reference by mapping the …","Constructs a new volatile instance wrapping the given …","Constructs a new read-only volatile instance wrapping the …","Constructs a new write-only volatile instance wrapping the …","Performs a volatile read of the contained value.","Restricts access permissions to read-only.","","","","Updates the contained value using the given closure and …","Performs a volatile write, setting the contained value to …","Restricts access permissions to write-only.","Zero-sized marker type for allowing only read access.","Zero-sized marker type for allowing both read and write …","Helper trait that is implemented by <code>ReadWrite</code> and <code>ReadOnly</code>.","Helper trait that is implemented by <code>ReadWrite</code> and <code>WriteOnly</code>…","Zero-sized marker type for allowing only write access.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4],"f":[null,null,[[],["volatile",3]],[[],["volatile",3]],[[]],[[]],[[],["volatile",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["volatile",3]],[[],["volatile",3]],[[]],[[],["volatile",3]],[[],["volatile",3]],[[],["volatile",3]],[[],["volatile",3,[["readonly",3]]]],[[],["volatile",3,[["writeonly",3]]]],[[]],[[],["volatile",3,[["readonly",3]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["volatile",3,[["writeonly",3]]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["readwrite",3]],[[],["readonly",3]],[[],["writeonly",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Volatile"],[3,"ReadWrite"],[3,"ReadOnly"],[3,"WriteOnly"]]},\
"x86_64":{"doc":"This crate provides x86_64 specific functions and data …","t":[4,13,13,13,13,0,11,11,11,11,11,11,11,11,0,11,0,14,0,11,11,11,11,11,11,11,11,12,12,3,3,3,3,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,0,5,0,0,5,0,0,0,5,5,5,5,5,5,5,18,6,8,3,8,6,8,6,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,13,13,13,3,4,3,3,3,3,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,0,0,0,0,0,0,18,18,18,3,3,3,3,3,3,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,4,4,13,13,8,4,3,13,3,13,3,13,3,13,3,3,3,3,3,18,18,18,18,18,18,13,13,18,18,18,18,18,13,13,13,13,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,3,3,3,18,3,3,18,18,18,18,18,18,3,18,18,18,3,18,18,18,18,18,18,18,18,18,3,18,3,18,3,18,18,18,3,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,3,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,18,18,18,18,18,18,18,18,18,18,18,18,3,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,5,5,12,18,3,3,3,3,3,18,3,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,18,18,18,18,18,18,18,18,18,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,0,0,11,12,0,0,11,11,0,11,18,18,18,18,18,18,18,4,3,18,3,18,3,18,18,18,18,18,18,18,13,18,18,18,18,13,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,13,13,18,13,13,4,13,6,6,13,13,3,3,4,13,6,13,6,8,6,13,18,13,3,3,3,13,13,13,18,13,13,13,18,18,13,3,6,18,18,18,13,13,3,13,13,18,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,12,12,11,11,11,11,11,11,12,11,11,12,12,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,8,8,10,10,0,0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,8,4,13,13,13,13,4,4,13,4,3,8,8,3,3,13,13,13,3,13,13,13,13,8,13,13,13,13,3,13,13,13,8,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,3,18,8,3,3,3,8,18,18,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,4,13,18,18,13,18,18,13,18,3,3,3,3,3,4,13,13,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,10,10,3,11,11,11,11,11,12,11,12,11,12,11,11,11],"n":["PrivilegeLevel","Ring0","Ring1","Ring2","Ring3","addr","borrow","borrow_mut","clone","eq","fmt","from","from_u16","hash","instructions","into","registers","set_general_handler","structures","to_virt_addr","to_virt_addr","to_virt_addr","to_virt_addr","to_virt_addr","try_from","try_into","type_id","0","0","PhysAddr","PhysAddrNotValid","VirtAddr","VirtAddrNotValid","add","add","add_assign","add_assign","align_down","align_down","align_down","align_up","align_up","align_up","as_mut_ptr","as_ptr","as_u64","as_u64","backward_checked","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","cmp","cmp","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_checked","from","from","from","from","from_ptr","hash","hash","into","into","into","into","is_aligned","is_aligned","is_null","is_null","ne","ne","new","new","new_truncate","new_truncate","new_unsafe","new_unsafe","p1_index","p2_index","p3_index","p4_index","page_offset","page_table_index","partial_cmp","partial_cmp","steps_between","sub","sub","sub","sub","sub_assign","sub_assign","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","try_new","type_id","type_id","type_id","type_id","zero","zero","bochs_breakpoint","hlt","interrupts","nop","port","random","read_rip","segmentation","tables","tlb","are_enabled","disable","enable","enable_and_hlt","int3","software_interrupt","without_interrupts","DEBUG_STR","Port","PortAccess","PortGeneric","PortReadAccess","PortReadOnly","PortWriteAccess","PortWriteOnly","ReadOnlyAccess","ReadWriteAccess","WriteOnlyAccess","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","new","read","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","RdRand","borrow","borrow_mut","clone","fmt","from","get_u16","get_u32","get_u64","into","new","try_from","try_into","type_id","lgdt","lidt","load_tss","sgdt","sidt","Address","All","AllExceptGlobal","AsidOutOfRangeError","InvPicdCommand","Invlpgb","InvlpgbFlushBuilder","Pcid","PcidTooBig","Single","asid","asid","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","cmp","eq","final_translation_only","flush","flush","flush_all","flush_pcid","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","include_global","include_nested_translations","into","into","into","into","into","into","invlpgb_count_max","nasid","nasid","ne","new","new","pages","partial_cmp","pcid","tlb_flush_nested","tlbsync","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","0","0","1","control","debug","model_specific","mxcsr","rflags","segmentation","xcontrol","ALIGNMENT_MASK","CACHE_DISABLE","CONTROL_FLOW_ENFORCEMENT","Cr0","Cr0Flags","Cr2","Cr3","Cr3Flags","Cr4","Cr4Flags","DEBUGGING_EXTENSIONS","EMULATE_COPROCESSOR","EXTENSION_TYPE","FSGSBASE","KEY_LOCKER","L5_PAGING","MACHINE_CHECK_EXCEPTION","MONITOR_COPROCESSOR","NOT_WRITE_THROUGH","NUMERIC_ERROR","OSFXSR","OSXMMEXCPT_ENABLE","OSXSAVE","PAGE_GLOBAL","PAGE_LEVEL_CACHE_DISABLE","PAGE_LEVEL_WRITETHROUGH","PAGE_SIZE_EXTENSION","PAGING","PCID","PERFORMANCE_MONITOR_COUNTER","PHYSICAL_ADDRESS_EXTENSION","PROTECTED_MODE_ENABLE","PROTECTED_MODE_VIRTUAL_INTERRUPTS","PROTECTION_KEY_SUPERVISOR","PROTECTION_KEY_USER","SAFER_MODE_EXTENSIONS","SUPERVISOR_MODE_ACCESS_PREVENTION","SUPERVISOR_MODE_EXECUTION_PROTECTION","TASK_SWITCHED","TIMESTAMP_DISABLE","USER_MODE_INSTRUCTION_PREVENTION","VIRTUAL_8086_MODE_EXTENSIONS","VIRTUAL_MACHINE_EXTENSIONS","WRITE_PROTECT","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","eq","eq","eq","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits_retain","from_bits_retain","from_bits_retain","from_iter","from_iter","from_iter","hash","hash","hash","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","ne","ne","ne","not","not","not","partial_cmp","partial_cmp","partial_cmp","read","read","read","read","read_pcid","read_raw","read_raw","read_raw","read_raw","sub","sub","sub","sub_assign","sub_assign","sub_assign","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update","write","write","write","write_pcid","write_pcid_no_flush","write_raw","write_raw","write_raw","ACCESS_DETECTED","BreakpointCondition","BreakpointSize","DataReadsWrites","DataWrites","DebugAddressRegister","DebugAddressRegisterNumber","Dr0","Dr0","Dr1","Dr1","Dr2","Dr2","Dr3","Dr3","Dr6","Dr6Flags","Dr7","Dr7Flags","Dr7Value","GENERAL_DETECT_ENABLE","GLOBAL_BREAKPOINT_0_ENABLE","GLOBAL_BREAKPOINT_1_ENABLE","GLOBAL_BREAKPOINT_2_ENABLE","GLOBAL_BREAKPOINT_3_ENABLE","GLOBAL_EXACT_BREAKPOINT_ENABLE","InstructionExecution","IoReadsWrites","LOCAL_BREAKPOINT_0_ENABLE","LOCAL_BREAKPOINT_1_ENABLE","LOCAL_BREAKPOINT_2_ENABLE","LOCAL_BREAKPOINT_3_ENABLE","LOCAL_EXACT_BREAKPOINT_ENABLE","Length1B","Length2B","Length4B","Length8B","NUM","RESTRICTED_TRANSACTIONAL_MEMORY","RTM","STEP","SWITCH","TRAP","TRAP0","TRAP1","TRAP2","TRAP3","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","cmp","cmp","condition","eq","eq","eq","eq","eq","eq","extend","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_unchecked","from_iter","from_iter","get","global_breakpoint_enable","hash","hash","insert_flags","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","local_breakpoint_enable","ne","ne","ne","new","new","not","not","partial_cmp","partial_cmp","read","read","read","read","read","read","read","read_raw","read_raw","remove_flags","set_condition","set_flags","set_size","size","sub","sub","sub_assign","sub_assign","toggle_flags","trap","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write","write","write","write_raw","CetFlags","Efer","EferFlags","FAST_FXSAVE_FXRSTOR","FsBase","GsBase","IBT_ENABLE","IBT_LEGACY_ENABLE","IBT_LEGACY_SUPPRESS_ENABLE","IBT_NO_TRACK_ENABLE","IBT_SUPPRESS_ENABLE","IBT_TRACKED","KernelGsBase","LONG_MODE_ACTIVE","LONG_MODE_ENABLE","LONG_MODE_SEGMENT_LIMIT_ENABLE","LStar","MSR","MSR","MSR","MSR","MSR","MSR","MSR","MSR","MSR","Msr","NO_EXECUTE_ENABLE","SCet","SECURE_VIRTUAL_MACHINE_ENABLE","SFMask","SS_ENABLE","SS_WRITE_ENABLE","SYSTEM_CALL_EXTENSIONS","Star","TRANSLATION_CACHE_EXTENSION","UCet","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","cmp","cmp","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_bits_retain","from_bits_retain","from_iter","from_iter","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","ne","ne","new","not","not","partial_cmp","partial_cmp","read","read","read","read","read","read","read","read","read","read","read_raw","read_raw","sub","sub","sub_assign","sub_assign","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","write","write","write","write","write","write","write","write","write","write","write_raw","write_raw","DENORMAL","DENORMALS_ARE_ZEROS","DENORMAL_MASK","DIVIDE_BY_ZERO","DIVIDE_BY_ZERO_MASK","FLUSH_TO_ZERO","INVALID_OPERATION","INVALID_OPERATION_MASK","MxCsr","OVERFLOW","OVERFLOW_MASK","PRECISION","PRECISION_MASK","ROUNDING_CONTROL_NEGATIVE","ROUNDING_CONTROL_POSITIVE","ROUNDING_CONTROL_ZERO","UNDERFLOW","UNDERFLOW_MASK","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","cmp","default","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits_retain","from_iter","hash","into","into_iter","ne","not","partial_cmp","read","sub","sub_assign","try_from","try_into","type_id","write","ALIGNMENT_CHECK","AUXILIARY_CARRY_FLAG","CARRY_FLAG","DIRECTION_FLAG","ID","INTERRUPT_FLAG","IOPL_HIGH","IOPL_LOW","NESTED_TASK","OVERFLOW_FLAG","PARITY_FLAG","RESUME_FLAG","RFlags","SIGN_FLAG","TRAP_FLAG","VIRTUAL_8086_MODE","VIRTUAL_INTERRUPT","VIRTUAL_INTERRUPT_PENDING","ZERO_FLAG","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","cmp","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits_retain","from_iter","hash","into","into_iter","ne","not","partial_cmp","read","read_raw","sub","sub_assign","try_from","try_into","type_id","write","write_raw","0","BASE","CS","DS","ES","FS","GS","NULL","SS","Segment","Segment64","SegmentSelector","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","cmp","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_reg","get_reg","get_reg","get_reg","get_reg","get_reg","get_reg","hash","index","into","into","into","into","into","into","into","ne","new","partial_cmp","read_base","read_base","read_base","rpl","set_reg","set_reg","set_reg","set_reg","set_reg","set_reg","set_reg","set_rpl","swap","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_base","write_base","write_base","AVX","BNDCSR","BNDREG","HI16_ZMM","LWP","MPK","OPMASK","SSE","X87","XCr0","XCr0Flags","ZMM_HI256","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","cmp","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits_retain","from_iter","hash","into","into","into_iter","ne","not","partial_cmp","read","read_raw","sub","sub_assign","try_from","try_from","try_into","try_into","type_id","type_id","write","write_raw","DescriptorTablePointer","base","borrow","borrow_mut","clone","fmt","from","gdt","idt","into","limit","paging","port","try_from","try_into","tss","type_id","ACCESSED","AVAILABLE","BASE_0_23","BASE_24_31","CONFORMING","DEFAULT_SIZE","DPL_RING_3","Descriptor","DescriptorFlags","EXECUTABLE","Entry","GRANULARITY","GlobalDescriptorTable","KERNEL_CODE32","KERNEL_CODE64","KERNEL_DATA","LIMIT_0_15","LIMIT_16_19","LONG_MODE","PRESENT","SystemSegment","USER_CODE32","USER_CODE64","USER_DATA","USER_SEGMENT","UserSegment","WRITABLE","append","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","dpl","empty","entries","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits_retain","from_iter","from_raw_entries","hash","into","into","into","into","into_iter","kernel_code_segment","kernel_data_segment","load","load_unsafe","ne","new","not","partial_cmp","raw","sub","sub_assign","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tss_segment","tss_segment_unchecked","type_id","type_id","type_id","type_id","user_code_segment","user_data_segment","0","0","1","AlignmentCheck","BoundRange","Breakpoint","CAUSED_BY_WRITE","ControlProtection","Debug","DescriptorTable","DeviceNotAvailable","DivergingHandlerFunc","DivergingHandlerFuncWithErrCode","Division","Double","Entry","EntryOptions","ExceptionVector","Gdt","GeneralHandlerFunc","GeneralProtection","HandlerFunc","HandlerFuncType","HandlerFuncWithErrCode","HypervisorInjection","INSTRUCTION_FETCH","Idt","InterruptDescriptorTable","InterruptStackFrame","InterruptStackFrameValue","InvalidOpcode","InvalidTss","Ldt","MALFORMED_TABLE","MachineCheck","NonMaskableInterrupt","Overflow","PROTECTION_KEY","PROTECTION_VIOLATION","Page","PageFaultErrorCode","PageFaultHandlerFunc","RMP","SGX","SHADOW_STACK","Security","SegmentNotPresent","SelectorErrorCode","SimdFloatingPoint","Stack","USER_MODE","Virtualization","VmmCommunication","X87FloatingPoint","alignment_check","as_mut","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_range_exceeded","breakpoint","clone","clone","clone","clone","clone","clone","clone","clone","cmp","code_segment","cp_protection_exception","cpu_flags","debug","deref","descriptor_table","device_not_available","disable_interrupts","divide_error","double_fault","eq","eq","eq","eq","eq","eq","extend","external","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bits_retain","from_iter","general_protection_fault","handler_addr","hash","hash","hash","hv_injection_exception","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","instruction_pointer","into","into","into","into","into","into","into","into","into","into_iter","invalid_opcode","invalid_tss","iretq","is_null","load","load_unsafe","machine_check","missing","ne","ne","ne","new","new","new","new","new_truncate","non_maskable_interrupt","not","overflow","page_fault","partial_cmp","reset","security_exception","segment_not_present","set_code_selector","set_handler_addr","set_handler_fn","set_present","set_privilege_level","set_stack_index","simd_floating_point","slice","slice_mut","stack_pointer","stack_segment","stack_segment_fault","sub","sub_assign","to_virt_addr","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","virtualization","vmm_communication_exception","x87_floating_point","FrameAllocator","FrameDeallocator","allocate_frame","deallocate_frame","frame","mapper","page","page_table","PhysFrame","PhysFrameRange","PhysFrameRangeInclusive","add","add_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","containing_address","end","end","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_start_address","from_start_address_unchecked","hash","hash","hash","into","into","into","into_iter","into_iter","is_empty","is_empty","ne","ne","ne","next","next","partial_cmp","range","range_inclusive","size","start","start","start_address","sub","sub","sub_assign","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","CleanUp","FlagUpdateError","FrameAllocationFailed","InvalidFrameAddress","InvalidFrameAddress","InvalidFrameAddress","InvalidPageTable","MapToError","Mapped","MappedFrame","MappedPageTable","Mapper","MapperAllSizes","MapperFlush","MapperFlushAll","NotActive","NotMapped","NotRecursive","OffsetPageTable","PageAlreadyMapped","PageNotMapped","PageNotMapped","PageNotMapped","PageTableFrameMapping","ParentEntryHugePage","ParentEntryHugePage","ParentEntryHugePage","ParentEntryHugePage","RecursivePageTable","Size1GiB","Size2MiB","Size4KiB","Translate","TranslateError","TranslateResult","UnmapError","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clean_up","clean_up","clean_up","clean_up","clean_up_addr_range","clean_up_addr_range","clean_up_addr_range","clean_up_addr_range","default","flush","flush_all","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame_to_pointer","from","from","from","from","from","from","from","from","from","from","from","from","identity_map","ignore","ignore","into","into","into","into","into","into","into","into","into","into","into","into","level_4_table","level_4_table","level_4_table","level_4_table_mut","level_4_table_mut","level_4_table_mut","map_to","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","new","new","new","new","new","new_unchecked","page_table_frame_mapping","phys_offset","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","size","start_address","translate","translate","translate","translate","translate_addr","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","0","0","0","0","0","0","flags","frame","offset","0","AddressNotAligned","DEBUG_STR","NotGiantPageSize","Page","PageRange","PageRangeInclusive","PageSize","SIZE","SIZE","Size1GiB","Size2MiB","Size4KiB","add","add_assign","as_4kib_page_range","backward_checked","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","containing_address","end","end","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_checked","from","from","from","from","from","from","from","from_page_table_indices","from_page_table_indices_1gib","from_page_table_indices_2mib","from_start_address","from_start_address_unchecked","hash","hash","hash","into","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_empty","ne","ne","ne","next","next","p1_index","p2_index","p3_index","p4_index","page_table_index","partial_cmp","partial_cmp","partial_cmp","partial_cmp","range","range_inclusive","size","start","start","start_address","steps_between","sub","sub","sub_assign","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ACCESSED","BIT_10","BIT_11","BIT_52","BIT_53","BIT_54","BIT_55","BIT_56","BIT_57","BIT_58","BIT_59","BIT_60","BIT_61","BIT_62","BIT_9","DIRTY","Four","FrameError","FrameNotPresent","GLOBAL","HUGE_PAGE","HugeFrame","NO_CACHE","NO_EXECUTE","One","PRESENT","PageOffset","PageTable","PageTableEntry","PageTableFlags","PageTableIndex","PageTableLevel","Three","Two","USER_ACCESSIBLE","WRITABLE","WRITE_THROUGH","addr","backward_checked","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","default","entry_address_space_alignment","eq","eq","eq","eq","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_checked","frame","from","from","from","from","from","from","from","from_bits_retain","from_iter","hash","hash","hash","hash","index","index","index_mut","index_mut","into","into","into","into","into","into","into","into_iter","is_empty","is_unused","iter","iter_mut","ne","ne","ne","new","new","new","new","new_truncate","new_truncate","next_higher_level","next_lower_level","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_addr","set_flags","set_frame","set_unused","steps_between","sub","sub_assign","table_address_space_alignment","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","PortRead","PortWrite","read_from_port","write_to_port","TaskStateSegment","borrow","borrow_mut","clone","fmt","from","interrupt_stack_table","into","iomap_base","new","privilege_stack_table","try_from","try_into","type_id"],"q":["x86_64","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::addr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::instructions","","","","","","","","","","x86_64::instructions::interrupts","","","","","","","x86_64::instructions::port","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::instructions::random","","","","","","","","","","","","","","x86_64::instructions::tables","","","","","x86_64::instructions::tlb","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::instructions::tlb::InvPicdCommand","","","x86_64::registers","","","","","","","x86_64::registers::controlx86_64::registers::debugx86_64::registers::model_specificx86_64::registers::mxcsr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::registers::rflags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::registers::segmentation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::registers::xcontrol","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures","","","","","","","","","","","","","","","","","x86_64::structures::gdt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::gdt::Descriptor","","","x86_64::structures::idt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::paging","","","","","","","","x86_64::structures::paging::frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::paging::mapperx86_64::structures::paging::mapper::MapToError","x86_64::structures::paging::mapper::MappedFrame","","","x86_64::structures::paging::mapper::TranslateError","x86_64::structures::paging::mapper::TranslateResult","","","","x86_64::structures::paging::mapper::UnmapError","x86_64::structures::paging::page","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::paging::page_tablex86_64::structures::port","","","","x86_64::structures::tss","","","","","","","","","","","","",""],"d":["Represents a protection ring level.","Privilege-level 0 (most privilege): This level is used by …","Privilege-level 1 (moderate privilege): This level is used …","Privilege-level 2 (moderate privilege): Like level 1, this …","Privilege-level 3 (least privilege): This level is used by …","Physical and virtual addresses manipulation","","","","","","","Creates a <code>PrivilegeLevel</code> from a numeric value. The value …","","Special x86_64 instructions.","","Access to various system and model specific registers.","Set a general handler in an <code>InterruptDescriptorTable</code>.","Representations of various x86 specific structures and …","","","","","","","","","","","A 64-bit physical memory address.","A passed <code>u64</code> was not a valid physical address.","A canonical 64-bit virtual memory address.","A passed <code>u64</code> was not a valid virtual address.","","","","","Align address downwards.","Aligns the virtual address downwards to the given …","Aligns the physical address downwards to the given …","Align address upwards.","Aligns the virtual address upwards to the given alignment.","Aligns the physical address upwards to the given alignment.","Converts the address to a mutable raw pointer.","Converts the address to a raw pointer.","Converts the address to an <code>u64</code>.","Converts the address to an <code>u64</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a virtual address from the given pointer","","","","","","","Checks whether the virtual address has the demanded …","Checks whether the physical address has the demanded …","Convenience method for checking if a virtual address is …","Convenience method for checking if a physical address is …","","","Creates a new canonical virtual address.","Creates a new physical address.","Creates a new canonical virtual address, throwing out bits …","Creates a new physical address, throwing bits 52..64 away.","Creates a new virtual address, without any checks.","Creates a new physical address, without any checks.","Returns the 9-bit level 1 page table index.","Returns the 9-bit level 2 page table index.","Returns the 9-bit level 3 page table index.","Returns the 9-bit level 4 page table index.","Returns the 12-bit page offset of this virtual address.","Returns the 9-bit level page table index.","","","","","","","","","","","","","","","","","","Tries to create a new canonical virtual address.","Tries to create a new physical address.","","","","","Creates a virtual address that points to <code>0</code>.","Creates a physical address that points to <code>0</code>.","Emits a ‘magic breakpoint’ instruction for the Bochs …","Halts the CPU until the next interrupt arrives.","Enabling and disabling interrupts","Executes the <code>nop</code> instructions, which performs no operation …","Access to I/O ports","Support for build-in RNGs","Gets the current instruction pointer. Note that this is …","Provides functions to read and write segment registers.","Functions to load GDT, IDT, and TSS structures.","Functions to flush the translation lookaside buffer (TLB).","Returns whether interrupts are enabled.","Disable interrupts.","Enable interrupts.","Atomically enable interrupts and put the CPU to sleep","Cause a breakpoint exception by invoking the <code>int3</code> …","Generate a software interrupt by invoking the <code>int</code> …","Run a closure with disabled interrupts.","A string representation for debug output.","A read-write I/O port.","A marker trait for access types which allow accessing port …","An I/O port.","A marker trait for access types which allow reading port …","A read-only I/O port.","A marker trait for access types which allow writing port …","A write-only I/O port.","An access marker type indicating that a port is only …","An access marker type indicating that a port is allowed to …","An access marker type indicating that a port is only …","","","","","","","","","","","","","","","","","","","","","","","Creates an I/O port with the given port number.","Reads from the port.","","","","","","","","","","","","","Writes to the port.","Used to obtain random numbers using x86_64’s RDRAND …","","","","","","Uniformly sampled u16. May fail in rare circumstances or …","Uniformly sampled u32. May fail in rare circumstances or …","Uniformly sampled u64. May fail in rare circumstances or …","","Creates Some(RdRand) if RDRAND is supported, None otherwise","","","","Load a GDT.","Load an IDT.","Load the task state register using the <code>ltr</code> instruction.","Get the address of the current GDT.","Get the address of the current IDT.","The logical processor invalidates mappings—except global …","The logical processor invalidates all mappings—including …","The logical processor invalidates all mappings—except …","An error returned when trying to use an invalid ASID.","The Invalidate PCID Command to execute.","Used to broadcast flushes to all logical processors.","A builder struct to construct the parameters for the …","Structure of a PCID. A PCID has to be &lt;= 4096 for x86_64.","A passed <code>u16</code> was not a valid PCID.","The logical processor invalidates all mappings—except …","Only flush TLB entries with the given ASID.","The requested ASID.","","","","","","","","","","","","","Create a <code>InvlpgbFlushBuilder</code>.","","","","","","Only flush the final translation and not the cached upper …","Invalidate the given address in the TLB using the <code>invlpg</code> …","Execute the flush.","Invalidate the TLB completely by reloading the CR3 …","Invalidate the given address in the TLB using the <code>invpcid</code> …","","","","","","","","","","","","","","","","Also flush global pages.","Also flush nestred translations that could be used for …","","","","","","","Returns the maximum count of pages to be flushed supported …","Returns the number of available address space identifiers.","The number of valid ASIDS.","","Create a new PCID. Will result in a failure if the value of","Check that <code>invlpgb</code> and <code>tlbsync</code> are supported and query …","Flush a range of pages.","","Only flush TLB entries with the given PCID.","Returns whether the processor supports flushing …","Wait for all previous <code>invlpgb</code> instruction executed on the …","","","","","","","","","","","","","","","","","","","Get the value of the current PCID.","","","","Functions to read and write control registers.","Functions to read and write debug registers.","Functions to read and write model specific registers.","Functions to read and write MXCSR register.","Processor state stored in the RFLAGS register.","Abstractions for segment registers.","Access to various extended system registers","Enables automatic usermode alignment checking if […","Disables some processor caches, specifics are …","Enables Control-flow Enforcement Technology (CET)","Various control flags modifying the basic operation of the …","Configuration flags of the <code>Cr0</code> register.","Contains the Page Fault Linear Address (PFLA).","Contains the physical address of the highest-level page …","Controls cache settings for the highest-level page table.","Contains various control flags that enable architectural …","Configuration flags of the <code>Cr4</code> register.","Enables I/O breakpoint capability and enforces treatment …","Force all x87 and MMX instructions to cause an <code>#NE</code> …","Indicates support of 387DX math coprocessor instructions.","Enables software running in 64-bit mode at any privilege …","Enables the Key Locker feature (Intel Only).","Enables 5-level paging on supported CPUs (Intel Only).","Enables the machine-check exception mechanism.","Enables monitoring of the coprocessor, typical for x87 …","Ignored, should always be unset.","Enables the native (internal) error reporting mechanism …","Enables the use of legacy SSE instructions; allows using …","Enables the SIMD floating-point exception (<code>#XF</code>) for …","Enables extended processor state management instructions, …","Enables the global page feature, allowing some page …","Disable caching for the table.","Use a writethrough cache policy for the table (otherwise a …","Enables the use of 4MB physical frames; ignored if …","Enables paging.","Enables process-context identifiers (PCIDs).","Allows software running at any privilege level to use the …","Enables physical address extensions and 2MB physical …","Enables protected mode.","Enables support for protected-mode virtual interrupts.","Enables protection keys for supervisor-mode pages (Intel …","Enables protection keys for user-mode pages.","Enables SMX instructions (Intel Only).","Enables restrictions for supervisor-mode software when …","Prevents the execution of instructions that reside in …","Automatically set to 1 on <em>hardware</em> task switch.","When set, only privilege-level 0 can execute the <code>RDTSC</code> or …","Prevents the execution of the <code>SGDT</code>, <code>SIDT</code>, <code>SLDT</code>, <code>SMSW</code>, and …","Enables hardware-supported performance enhancements for …","Enables VMX instructions (Intel Only).","Controls whether supervisor-level writes to read-only …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","Read the current set of CR0 flags.","Read the current page fault linear address from the CR2 …","Read the current P4 table address from the CR3 register.","Read the current set of CR4 flags.","Read the current P4 table address from the CR3 register …","Read the current raw CR0 value.","Read the current page fault linear address from the CR2 …","Read the current P4 table address from the CR3 register","Read the current raw CR4 value.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","","","","","","","","","","","","","","","","","","","Updates CR0 flags.","Updates CR4 flags.","Write CR0 flags.","Write a new P4 table address into the CR3 register.","Write CR4 flags.","Write a new P4 table address into the CR3 register.","Write a new P4 table address into the CR3 register without …","Write raw CR0 flags.","Write a new P4 table address into the CR3 register.","Write raw CR4 flags.","Next instruction accesses one of the debug registers.","The condition for a hardware breakpoint.","The size of a hardware breakpoint.","Data reads or writes but not instruction fetches","Data writes","Debug Address Register","A valid debug address register number.","Debug Address Register","The debug address register number of <code>Dr0</code> (0).","Debug Address Register","The debug address register number of <code>Dr1</code> (1).","Debug Address Register","The debug address register number of <code>Dr2</code> (2).","Debug Address Register","The debug address register number of <code>Dr3</code> (3).","Debug Status Register (DR6).","Debug condition flags of the <code>Dr6</code> register.","Debug Control Register (DR7).","Debug control flags of the <code>Dr7</code> register.","A valid value of the <code>Dr7</code> debug register.","Enables debug register protection.","Breakpoint 0 is enabled for all tasks.","Breakpoint 1 is enabled for all tasks.","Breakpoint 2 is enabled for all tasks.","Breakpoint 3 is enabled for all tasks.","Enable detection of exact instruction causing a data …","Instruction execution","I/O reads or writes","Breakpoint 0 is enabled for the current task.","Breakpoint 1 is enabled for the current task.","Breakpoint 2 is enabled for the current task.","Breakpoint 3 is enabled for the current task.","Enable detection of exact instruction causing a data …","1 byte length","2 byte length","4 byte length","8 byte length","The corresponding <code>DebugAddressRegisterNumber</code>.","Enables advanced debugging of RTM transactional regions.","When <em>clear</em>, indicates a debug or breakpoint exception …","CPU is in single-step execution mode.","Task switch.","Breakpoint condition was detected.","Breakpoint condition 0 was detected.","Breakpoint condition 1 was detected.","Breakpoint condition 2 was detected.","Breakpoint condition 3 was detected.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","Returns the raw value of the fields currently stored.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the condition field of a debug address register.","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Returns the <code>Dr7Flags</code> in this value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new hardware breakpoint condition if <code>bits</code> is …","Creates a new hardware breakpoint size if <code>bits</code> is valid.","Convert from underlying bit representation, unless that …","","","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Returns the number as a primitive type.","Returns the global breakpoint enable flag of the provided …","","","Inserts the specified <code>Dr7Flags</code> in-place.","","","","","","","","","","","","","","","Returns the local breakpoint enable flag of the provided …","","","","Creates a debug address register number if it is valid.","Creates a new hardware breakpoint size if <code>size</code> is valid.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","Reads the current breakpoint address.","","","","","Read the current set of DR6 flags.","Read the current set of DR7 flags.","Read the current raw DR6 value.","Read the current raw DR7 value.","Removes the specified <code>Dr7Flags</code> in-place.","Sets the condition field of a debug address register.","Inserts or removes the specified <code>Dr7Flags</code> depending on the …","Sets the size field of a debug address register.","Returns the size field of a debug address register.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Toggles the specified <code>Dr7Flags</code> in-place.","Returns the trap flag of the provided debug address …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes the provided breakpoint address.","","","","","Write DR7 value.","Write raw DR7 value.","Flags stored in IA32_U_CET and IA32_S_CET (Table-2-2 in …","The Extended Feature Enable Register.","Flags of the Extended Feature Enable Register.","Enable the <code>fxsave</code> and <code>fxrstor</code> instructions to execute …","FS.Base Model Specific Register.","GS.Base Model Specific Register.","Enable indirect branch tracking (ENDBR_EN)","Enable legacy treatment for indirect branch tracking …","Disable suppression of CET on legacy compatibility …","Enable no-track opcode prefix for indirect branch tracking …","Enable suppression of indirect branch tracking (SUPPRESS)","Is IBT waiting for a branch to return? (read-only, TRACKER)","KernelGsBase Model Specific Register.","Indicates that long mode is active.","Activates long mode, requires activating paging.","Enable certain limit checks in 64-bit mode.","Syscall Register: LSTAR","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","A model specific register.","Enables the no-execute page-protection feature.","IA32_S_CET: supervisor mode CET configuration","Enables SVM extensions.","Syscall Register: SFMASK","Enable shadow stack (SH_STK_EN)","Enable WRSS{D,Q}W instructions (WR_SHTK_EN)","Enables the <code>syscall</code> and <code>sysret</code> instructions.","Syscall Register: STAR","Changes how the <code>invlpg</code> instruction operates on TLB entries …","IA32_U_CET: user mode CET configuration","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","Create an instance from a register.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","Read 64 bits msr register.","Read the current EFER flags.","Read the current FsBase register.","Read the current GsBase register.","Read the current KernelGsBase register.","Read the Ring 0 and Ring 3 segment bases. Returns","Read the current LStar register. This holds the target RIP …","Read to the SFMask register. The SFMASK register is used …","Read IA32_U_CET. Returns a tuple of the flags and the …","Read IA32_S_CET. Returns a tuple of the flags and the …","Read the current raw EFER flags.","Read the Ring 0 and Ring 3 segment bases. The remaining …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update EFER flags.","Write 64 bits to msr register.","Write the EFER flags, preserving reserved values.","Write a given virtual address to the FS.Base register.","Write a given virtual address to the GS.Base register.","Write a given virtual address to the KernelGsBase register.","Write the Ring 0 and Ring 3 segment bases. The remaining …","Write a given virtual address to the LStar register. This …","Write to the SFMask register. The SFMASK register is used …","Write IA32_U_CET.","Write IA32_S_CET.","Write the EFER flags.","Write the Ring 0 and Ring 3 segment bases. The remaining …","Denormal","Denormals are zeros","Denormal mask","Divide-by-zero","Divide-by-zero mask","Flush to zero","Invalid operation","Invalid operation mask","MXCSR register.","Overflow","Overflow mask","Precision","Precision mask","Toward negative infinity","Toward positive infinity","Toward zero (positive + negative)","Underflow","Underflow mask","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","Return the default MXCSR value at reset, as documented in …","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","Read the value of MXCSR.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","Write MXCSR.","Enable automatic alignment checking if CR0.AM is set. Only …","Set by hardware if last arithmetic operation generated a …","Set by hardware if last arithmetic operation generated a …","Determines the order in which strings are processed.","Processor feature identification flag.","Enable interrupts.","The high bit of the I/O Privilege Level field.","The low bit of the I/O Privilege Level field.","Used by <code>iret</code> in hardware task switch mode to determine if …","Set by hardware to indicate that the sign bit of the …","Set by hardware if last result has an even number of 1 …","Allows to restart an instruction following an instruction …","The RFLAGS register. All bit patterns are valid …","Set by hardware if last arithmetic operation resulted in a …","Enable single-step mode for debugging.","Enable the virtual-8086 mode.","Virtual image of the INTERRUPT_FLAG bit.","Indicates that an external, maskable interrupt is pending.","Set by hardware if last arithmetic operation resulted in a …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","Returns the current value of the RFLAGS register.","Returns the raw current value of the RFLAGS register.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","Writes the RFLAGS register, preserves reserved bits.","Writes the RFLAGS register.","","MSR containing the segment base. This MSR can be used to …","Code Segment","Data Segment","ES Segment","FS Segment","GS Segment","Can be used as a selector into a non-existent segment and …","Stack Segment","An x86 segment","An x86 segment which is actually used in 64-bit mode","Specifies which element to load into a segment from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the current value of the segment register.","","","","","","","","Returns the GDT index.","","","","","","","","","Creates a new SegmentSelector","","Reads the segment base address","","","Returns the requested privilege level.","Reload the segment register. Depending on the segment, …","Note this is special since we cannot directly move to <code>CS</code>; …","","","","","","Set the privilege level for this Segment selector.","Swap <code>KernelGsBase</code> MSR and <code>GsBase</code> MSR.","","","","","","","","","","","","","","","","","","","","","","Writes the segment base address","","","Enables AVX instructions and using the upper halves of the …","Enables MPX instructions and using the BNDCFGU and …","Enables MPX instructions and using the BND0-BND3 bound …","Enables AVX-512 instructions and using the upper ZMM …","Enables Lightweight Profiling extensions and managing LWP …","Enables using the PKRU register with <code>XSAVE</code>/<code>XRSTOR</code>.","Enables AVX-512 instructions and using the K0-K7 mask …","Enables using MXCSR and the XMM registers with <code>XSAVE</code>/<code>XRSTOR</code>…","Enables using the x87 FPU state with <code>XSAVE</code>/<code>XRSTOR</code>.","Extended feature enable mask register","Configuration flags of the XCr0 register.","Enables AVX-512 instructions and using the upper halves of …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","Read the current set of XCR0 flags.","Read the current raw XCR0 value.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","","","","Write XCR0 flags.","Write raw XCR0 flags.","A struct describing a pointer to a descriptor table (GDT / …","Pointer to the memory region containing the DT.","","","","","","Types for the Global Descriptor Table and segment …","Provides types for the Interrupt Descriptor Table and its …","","Size of the DT.","Abstractions for page tables and other paging related …","Traits for accessing I/O ports.","","","Provides a type for the task state segment structure.","","Set by the processor if this segment has been accessed. …","Available for use by the Operating System","Bits <code>0..=23</code> of the base field (ignored in 64-bit mode, …","Bits <code>24..=31</code> of the base field (ignored in 64-bit mode, …","For code segments, sets the segment as “conforming”, …","Use 32-bit (as opposed to 16-bit) operands. If <code>LONG_MODE</code> …","These two bits encode the Descriptor Privilege Level (DPL) …","A 64-bit mode segment descriptor.","Flags for a GDT descriptor. Not all flags are valid for …","This flag must be set for code segments and unset for data …","8-byte entry in a descriptor table.","Limit field is scaled by 4096 bytes. In 64-bit mode, …","A 64-bit mode global descriptor table (GDT).","A flat 32-bit kernel code segment","A 64-bit kernel code segment","A kernel data segment (64-bit or flat 32-bit)","Bits <code>0..=15</code> of the limit field (ignored in 64-bit mode)","Bits <code>16..=19</code> of the limit field (ignored in 64-bit mode)","Must be set for 64-bit code segments, unset otherwise.","Must be set for any segment, causes a segment not present …","A system segment descriptor such as a LDT or TSS …","A flat 32-bit user code segment","A 64-bit user code segment","A user data segment (64-bit or flat 32-bit)","This flag must be set for user segments (in contrast to …","Descriptor for a code or data segment.","For 32-bit data segments, sets the segment as writable. …","Appends the given segment descriptor to the GDT, returning …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","Returns the Descriptor Privilege Level (DPL). When using …","Creates an empty GDT which can hold <code>MAX</code> number of <code>Entry</code>s.","Get a reference to the internal <code>Entry</code> table.","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","Forms a GDT from a slice of <code>u64</code>.","","","","","","","Creates a segment descriptor for a 64-bit kernel code …","Creates a segment descriptor for a kernel data segment …","Loads the GDT in the CPU using the <code>lgdt</code> instruction. This …","Loads the GDT in the CPU using the <code>lgdt</code> instruction. This …","","Creates an empty GDT with the default length of 8.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","The raw bits for this entry. Depending on the <code>Descriptor</code> …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","","","","","","Creates a TSS system descriptor for the given TSS.","Similar to <code>Descriptor::tss_segment</code>, but unsafe since it …","","","","","Creates a segment descriptor for a 64-bit ring 3 code …","Creates a segment descriptor for a ring 3 data segment …","","","","Alignment Check","Bound Range Exceeded","Breakpoint","If this flag is set, the memory access that caused the …","Control Protection Exception","Debug","The possible descriptor table values.","Device Not Available","A handler function that must not return, e.g. for a …","A handler function with an error code that must not …","Error during Division","Double Fault","An Interrupt Descriptor Table entry.","Represents the 4 non-offset bytes of an IDT entry.","This structure defines the CPU-internal exception vector …","Global Descriptor Table.","A general handler function for an interrupt or an …","General Protection Fault","A handler function for an interrupt or an exception …","A common trait for all handler functions usable in <code>Entry</code>.","A handler function for an exception that pushes an error …","Hypervisor Injection (AMD-only)","If this flag is set, it indicates that the access that …","Interrupt Descriptor Table.","An Interrupt Descriptor Table with 256 entries.","Wrapper type for the interrupt stack frame pushed by the …","Represents the interrupt stack frame pushed by the CPU on …","Invalid Opcode","Invalid TSS","Logical Descriptor Table.","If this flag is set, the page fault is a result of the …","Machine Check","Non-Maskable Interrupt","Overflow","If this flag is set, it indicates that the page fault was …","If this flag is set, the page fault was caused by a …","Page Fault","Describes an page fault error code.","A page fault handler function that pushes a page fault …","If this flag is set, it indicates that the page fault is a …","If this flag is set, it indicates that the page fault was …","If this flag is set, it indicates that the page fault was …","Security Exception","Segment Not Present","Describes an error code referencing a segment selector.","SIMD Floating-Point Exception","Stack Fault","If this flag is set, an access in user mode (CPL=3) caused …","Virtualization Exception (Intel-only)","VMM Communication (AMD-only)","x87 Floating-Point Exception","An alignment check exception (<code>#AC</code>) occurs when an …","Gives mutable access to the contents of the interrupt …","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","A bound-range exception (<code>#BR</code>) exception can occur as a …","A breakpoint (<code>#BP</code>) exception occurs when an <code>INT3</code> …","","","","","","","","","","The code segment selector at the time of the interrupt.","A #CP exception is generated when shadow stacks are …","The flags register before the interrupt handler was …","When the debug-exception mechanism is enabled, a <code>#DB</code> …","","The descriptor table this error code refers to.","A device not available exception (<code>#NM</code>) occurs under any of …","Let the CPU disable hardware interrupts when the handler …","A divide error (<code>#DE</code>) occurs when the denominator of a DIV …","A double fault (<code>#DF</code>) exception can occur when a second …","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","If true, indicates that the exception occurred during …","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","A general protection fault (<code>#GP</code>) can occur in various …","Returns the virtual address of this IDT entry’s handler …","","","","The Hypervisor Injection Exception (<code>#HV</code>) is injected by a …","Returns the IDT entry with the specified index.","Returns the IDT entry with the specified index.","Returns the IDT entry with the specified index.","Returns the IDT entry with the specified index.","Returns the IDT entry with the specified index.","Returns the IDT entry with the specified index.","Returns the IDT entry with the specified index.","Returns the IDT entry with the specified index.","Returns the IDT entry with the specified index.","Returns the IDT entry with the specified index.","Returns the IDT entry with the specified index.","Returns the IDT entry with the specified index.","Returns the IDT entry with the specified index.","Returns the IDT entry with the specified index.","The index of the selector which caused the error.","Returns a mutable reference to the IDT entry with the …","Returns a mutable reference to the IDT entry with the …","Returns a mutable reference to the IDT entry with the …","Returns a mutable reference to the IDT entry with the …","Returns a mutable reference to the IDT entry with the …","Returns a mutable reference to the IDT entry with the …","Returns a mutable reference to the IDT entry with the …","Returns a mutable reference to the IDT entry with the …","Returns a mutable reference to the IDT entry with the …","Returns a mutable reference to the IDT entry with the …","Returns a mutable reference to the IDT entry with the …","Returns a mutable reference to the IDT entry with the …","Returns a mutable reference to the IDT entry with the …","Returns a mutable reference to the IDT entry with the …","This value points to the instruction that should be …","","","","","","","","","","","An invalid opcode exception (<code>#UD</code>) occurs when an attempt …","An invalid TSS exception (<code>#TS</code>) occurs only as a result of …","Call the <code>iretq</code> (interrupt return) instruction.","If true, the #SS or #GP has returned zero as opposed to a …","Loads the IDT in the CPU using the <code>lidt</code> command.","Loads the IDT in the CPU using the <code>lidt</code> command.","The machine check exception (<code>#MC</code>) is model specific. …","Creates a non-present IDT entry (but sets the must-be-one …","","","","Creates a new interrupt stack frame with the given values.","Creates a new IDT filled with non-present entries.","Creates a new interrupt stack frame with the given values.","Create a SelectorErrorCode. Returns None is any of the …","Create a new SelectorErrorCode dropping any reserved bits …","An non maskable interrupt exception (NMI) occurs as a …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","An overflow exception (<code>#OF</code>) occurs as a result of …","A page fault (<code>#PF</code>) can occur during a memory access in any …","","Resets all entries of this IDT in place.","The Security Exception (<code>#SX</code>) signals security-sensitive …","An segment-not-present exception (<code>#NP</code>) occurs when an …","Set the code segment that will be used by this interrupt.","Sets the handler address for the IDT entry and sets the …","Sets the handler function for the IDT entry and sets the …","Set or reset the preset bit.","Set the required privilege level (DPL) for invoking the …","Assigns a Interrupt Stack Table (IST) stack to this …","The SIMD Floating-Point Exception (<code>#XF</code>) is used to handle …","Returns slice of IDT entries with the specified range.","Returns a mutable slice of IDT entries with the specified …","The stack pointer at the time of the interrupt.","The stack segment descriptor at the time of the interrupt …","An stack segment exception (<code>#SS</code>) can occur in the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get the virtual address of the handler function.","","","","","","","","","","","","","","","","","","","","","","","","","","","","vector nr. 20","The VMM Communication Exception (<code>#VC</code>) is always generated …","The x87 Floating-Point Exception-Pending exception (<code>#MF</code>) …","A trait for types that can allocate a frame of memory.","A trait for types that can deallocate a frame of memory.","Allocate a frame of the appropriate size and return it if …","Deallocate the given unused frame.","Abstractions for default-sized and huge physical memory …","Abstractions for reading and modifying the mapping of …","Abstractions for default-sized and huge virtual memory …","Abstractions for page tables and page table entries.","A physical memory frame.","An range of physical memory frames, exclusive the upper …","An range of physical memory frames, inclusive the upper …","","","","","","","","","","","","","Returns the frame that contains the given physical address.","The end of the range, exclusive.","The start of the range, inclusive.","","","","","","","","","","Returns the frame that starts at the given virtual address.","Returns the frame that starts at the given virtual address.","","","","","","","","","Returns whether the range contains no frames.","Returns whether the range contains no frames.","","","","","","","Returns a range of frames, exclusive <code>end</code>.","Returns a range of frames, inclusive <code>end</code>.","Returns the size the frame (4KB, 2MB or 1GB).","The start of the range, inclusive.","The start of the range, inclusive.","Returns the start address of the frame.","","","","","","","","","","","","","Provides methods for cleaning up unused entries.","An error indicating that an <code>update_flags</code> call failed.","An additional frame was needed for the mapping process, …","The page table entry for the given virtual address points …","The page table entry for the given page points to an …","The page table entry for the given page points to an …","The given page table was not suitable to create a …","This error is returned from <code>map_to</code> and similar methods.","The virtual address is mapped to a physical frame.","Represents a physical frame mapped in a page table.","A Mapper implementation that relies on a PhysAddr to …","A trait for common page table operations on pages of size <code>S</code>…","An empty convencience trait that requires the <code>Mapper</code> trait …","This type represents a page whose mapping has changed in …","This type represents a change of a page table requiring a …","The given page table was not active on the CPU.","The given virtual address is not mapped to a physical …","The given page table was not at an recursive address.","A Mapper implementation that requires that the complete …","The given page is already mapped to a physical frame.","The given page is not mapped to a physical frame.","The given page is not mapped to a physical frame.","The given page is not mapped to a physical frame.","Provides a virtual address mapping for physical page table …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","A recursive page table is a last level page table with an …","The virtual address is mapped to a “huge” 1GiB frame.","The virtual address is mapped to a “large” 2MiB frame.","The virtual address is mapped to a 4KiB frame.","Provides methods for translating virtual addresses.","An error indicating that an <code>translate</code> call failed.","The return value of the <code>Translate::translate</code> function.","An error indicating that an <code>unmap</code> call failed.","","","","","","","","","","","","","","","","","","","","","","","","","Remove all empty P1-P3 tables","","","","Remove all empty P1-P3 tables in a certain range","","","","","Flush the page from the TLB to ensure that the newest …","Flush all pages from the TLB to ensure that the newest …","","","","","","","","","","","","","","Translate the given physical frame to a virtual page table …","","","","","","","","","","","","","Maps the given frame to the virtual page with the same …","Don’t flush the TLB and silence the “must be used” …","Don’t flush the TLB and silence the “must be used” …","","","","","","","","","","","","","Returns an immutable reference to the wrapped level 4 …","Returns an immutable reference to the wrapped level 4 …","Returns an immutable reference to the wrapped level 4 …","Returns a mutable reference to the wrapped level 4 …","Returns a mutable reference to the wrapped level 4 …","Returns a mutable reference to the wrapped level 4 …","Creates a new mapping in the page table.","Creates a new mapping in the page table.","","","","","","","","","","Creates a new <code>MappedPageTable</code> that uses the passed …","Creates a new <code>OffsetPageTable</code> that uses the given offset …","Creates a new RecursivePageTable from the passed level 4 …","Create a new flush promise","Create a new flush promise","Creates a new RecursivePageTable without performing any …","Returns the <code>PageTableFrameMapping</code> used for converting …","Returns the offset used for converting virtual to physical …","Set the flags of an existing page table level 2 entry","","","","","","","","","","Set the flags of an existing page table level 3 entry","","","","","","","","","","Set the flags of an existing page level 4 table entry","","","","","","","","","","Returns the size the frame (4KB, 2MB or 1GB).","Returns the start address of the frame.","Return the frame that the given virtual address is mapped …","","","","Translates the given virtual address to the physical …","Return the frame that the specified page is mapped to.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Removes a mapping from the page table and returns the …","","","","","","","","","","Updates the flags of an existing mapping.","","","","","","","","","","","","","","","","The entry flags in the lowest-level page table.","The mapped frame.","The offset within the mapped frame.","","The given address was not sufficiently aligned.","A string representation of the page size for debug output.","This trait is implemented for 4KiB and 2MiB pages, but not …","A virtual memory page.","A range of pages with exclusive upper bound.","A range of pages with inclusive upper bound.","Trait for abstracting over the three possible page sizes …","The page size in bytes.","The page size in bytes.","A “giant” 1GiB page.","A “huge” 2MiB page.","A standard 4KiB page.","","","Converts the range of 2MiB pages to a range of 4KiB pages.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the page that contains the given virtual address.","The end of the range, exclusive.","The end of the range, inclusive.","","","","","","","","","","","","","","","","","","","","","","","Returns the 4KiB memory page with the specified page table …","Returns the 1GiB memory page with the specified page table …","Returns the 2MiB memory page with the specified page table …","Returns the page that starts at the given virtual address.","Returns the page that starts at the given virtual address.","","","","","","","","","","","","","Returns wether this range contains no pages.","Returns whether this range contains no pages.","","","","","","Returns the level 1 page table index of this page.","Returns the level 2 page table index of this page.","Returns the level 3 page table index of this page.","Returns the level 4 page table index of this page.","Returns the table index of this page at the specified …","","","","","Returns a range of pages, exclusive <code>end</code>.","Returns a range of pages, inclusive <code>end</code>.","Returns the size the page (4KB, 2MB or 1GB).","The start of the range, inclusive.","The start of the range, inclusive.","Returns the start address of the page.","","","","","","","","","","","","","","","","","","","","","","","","","","Set by the CPU when the mapped frame or page table is …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Set by the CPU on a write to the mapped frame.","Represents the level for a page-map level-4.","The error returned by the <code>PageTableEntry::frame</code> method.","The entry does not have the <code>PRESENT</code> flag set, so it isn’…","Indicates that the mapping is present in all address …","Specifies that the entry maps a huge frame instead of a …","The entry does have the <code>HUGE_PAGE</code> flag set. The <code>frame</code> …","Disables caching for the pointed entry is cacheable.","Forbid code execution from the mapped frames.","Represents the level for a page table.","Specifies whether the mapped frame or page table is loaded …","A 12-bit offset into a 4KiB Page.","Represents a page table.","A 64-bit page table entry.","Possible flags for a page table entry.","A 9-bit index into a page table.","A value between 1 and 4.","Represents the level for a page-directory pointer.","Represents the level for a page directory.","Controls whether accesses from userspace (i.e. ring 3) are …","Controls whether writes to the mapped frames are allowed.","If this bit is set, a “write-through” policy is used …","Returns the physical address mapped by this entry, might …","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the alignment for the address space described by …","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","Returns the flags of this entry.","","","","","","","","","","","","","Returns the physical frame mapped by this entry.","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","Checks if the page table is empty (all entries are zero).","Returns whether this entry is zero.","Returns an iterator over the entries of the page table.","Returns an iterator that allows modifying the entries of …","","","","Creates an unused page table entry.","Creates an empty page table.","Creates a new index from the given <code>u16</code>. Panics if the …","Creates a new offset from the given <code>u16</code>. Panics if the …","Creates a new index from the given <code>u16</code>. Throws away bits …","Creates a new offset from the given <code>u16</code>. Throws away bits …","Returns the next higher level or <code>None</code> for level 4","Returns the next lower level or <code>None</code> for level 1","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","Map the entry to the specified physical address with the …","Sets the flags of this entry.","Map the entry to the specified physical frame with the …","Sets this entry to zero.","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Returns the alignment for the address space described by a …","","","","","","","","","","","","","","","","","","","","","","Clears all entries.","A helper trait that implements the read port operation.","A helper trait that implements the write port operation.","Reads a <code>Self</code> value from the given port.","Writes a <code>Self</code> value to the given port.","In 64-bit mode the TSS holds information that is not …","","","","","","The full 64-bit canonical forms of the interrupt stack …","","The 16-bit offset to the I/O permission bit map from the …","Creates a new TSS with zeroed privilege and interrupt …","The full 64-bit canonical forms of the stack pointers …","","",""],"i":[0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,0,0,2,3,4,5,6,1,1,1,7,8,0,0,0,0,9,10,9,10,0,9,10,0,9,10,9,9,9,10,9,7,8,9,10,7,8,9,10,9,10,9,10,9,10,7,8,9,9,9,9,9,9,10,10,10,10,10,10,9,7,8,9,10,9,9,10,7,8,9,10,9,10,9,10,9,10,9,10,9,10,9,10,9,9,9,9,9,9,9,10,9,9,9,10,10,9,10,7,8,9,10,7,8,9,10,9,10,7,8,9,10,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,12,13,14,15,12,13,14,15,12,12,12,13,14,15,12,13,14,15,12,13,14,15,12,12,12,13,14,15,12,13,14,15,12,13,14,15,12,0,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,17,17,17,0,0,0,0,0,0,17,18,19,17,20,21,22,18,19,17,20,21,22,18,19,22,20,22,18,20,20,18,0,18,0,0,17,20,21,21,22,18,19,19,17,20,21,22,18,19,20,18,18,17,20,21,22,18,19,22,22,19,20,20,22,18,20,18,22,22,17,20,21,22,18,19,17,20,21,22,18,19,17,20,21,22,18,19,20,23,24,23,0,0,0,0,0,0,0,25,25,26,0,0,0,0,0,0,0,26,25,25,26,26,26,26,25,25,25,26,26,26,26,27,27,26,25,26,26,26,25,26,26,26,26,26,26,25,26,26,26,26,25,25,27,26,25,27,26,25,27,26,25,27,26,25,27,26,25,27,26,25,27,26,28,25,29,30,27,31,26,28,25,29,30,27,31,26,25,27,26,25,27,26,25,27,26,25,27,26,28,25,25,25,25,25,29,30,27,27,27,27,27,31,26,26,26,26,26,28,25,29,30,27,31,26,25,27,26,25,27,26,25,27,26,28,25,29,30,27,31,26,25,27,26,25,27,26,25,27,26,25,27,26,28,29,30,31,30,28,29,30,31,25,27,26,25,27,26,28,25,29,30,27,31,26,28,25,29,30,27,31,26,28,25,29,30,27,31,26,28,31,28,30,31,30,30,28,30,31,32,0,0,33,33,0,0,0,34,0,34,0,34,0,34,0,0,0,0,0,35,35,35,35,35,35,33,33,35,35,35,35,35,36,36,36,36,37,35,32,32,32,32,32,32,32,32,32,35,32,35,32,35,32,35,32,35,38,32,35,32,35,39,40,41,42,34,43,32,35,33,36,38,44,39,40,41,42,34,43,32,35,33,36,38,44,34,32,35,33,36,38,32,35,38,34,32,35,33,36,38,32,35,38,39,40,41,42,34,43,32,32,32,32,32,35,35,35,35,35,33,36,38,44,39,40,41,42,34,43,32,35,33,36,38,38,44,33,36,38,32,35,38,38,32,35,34,35,32,35,38,39,40,41,42,34,43,32,35,33,36,38,44,32,35,35,32,35,38,34,36,32,35,32,35,37,39,40,41,42,43,44,43,44,38,38,38,38,38,32,35,32,35,38,32,39,40,41,42,34,43,32,35,33,36,38,44,39,40,41,42,34,43,32,35,33,36,38,44,39,40,41,42,34,43,32,35,33,36,38,44,37,39,40,41,42,44,44,0,0,0,45,0,0,46,46,46,46,46,46,0,45,45,45,0,47,48,49,50,51,52,53,54,55,0,45,0,45,0,46,46,45,0,45,0,45,46,45,46,45,46,45,46,45,46,45,46,45,46,56,47,48,49,50,51,52,53,54,55,45,46,56,47,48,49,50,51,52,53,54,55,45,46,45,46,45,46,45,46,45,46,56,47,48,49,50,51,52,53,54,55,45,45,45,45,45,46,46,46,46,46,56,47,48,49,50,51,52,53,54,55,45,46,45,46,45,46,45,46,56,47,48,49,50,51,52,53,54,55,45,46,45,46,45,46,56,45,46,45,46,56,47,48,49,50,51,52,53,54,55,47,51,45,46,45,46,56,47,48,49,50,51,52,53,54,55,45,46,56,47,48,49,50,51,52,53,54,55,45,46,56,47,48,49,50,51,52,53,54,55,45,46,47,56,47,48,49,50,51,52,53,54,55,47,51,57,57,57,57,57,57,57,57,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,57,57,57,57,57,0,58,58,58,58,58,58,58,58,58,58,58,58,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,58,58,58,58,58,0,0,59,60,0,0,0,0,0,59,0,0,0,0,59,61,62,63,64,65,66,59,61,62,63,64,65,66,59,59,59,59,61,62,63,64,65,66,59,61,62,63,64,65,66,67,61,62,63,64,65,66,59,59,59,61,62,63,64,65,66,59,59,59,60,65,66,59,67,61,62,63,64,65,66,59,66,59,61,62,63,64,65,66,59,61,62,63,64,65,66,59,61,62,63,64,65,66,60,65,66,68,68,68,68,68,68,68,68,68,0,0,68,68,68,68,68,68,68,68,69,68,69,68,68,68,68,68,69,68,68,68,68,68,69,68,68,68,68,69,68,68,68,68,68,69,69,68,68,69,68,69,68,69,68,69,69,0,70,70,70,70,70,70,0,0,70,70,0,0,70,70,0,70,71,71,71,71,71,71,71,0,0,71,0,71,0,71,71,71,71,71,71,71,72,71,71,71,71,72,71,73,71,71,71,71,71,71,71,74,73,72,71,74,73,72,71,74,73,72,71,71,72,73,73,74,71,71,74,73,72,71,71,71,71,71,74,73,72,71,71,71,73,71,74,73,72,71,71,72,72,73,73,71,73,71,71,74,71,71,74,73,72,71,74,73,72,71,72,72,74,73,72,71,72,72,75,76,76,77,77,77,78,77,77,0,77,0,0,77,77,0,0,0,79,0,77,0,0,0,77,78,79,0,0,0,77,77,79,78,77,77,77,78,78,77,0,0,78,78,78,77,77,0,77,77,78,77,77,77,80,81,78,78,78,78,78,78,78,81,80,82,83,84,78,85,79,77,81,80,82,83,84,78,85,79,77,80,80,80,82,83,84,78,85,79,77,78,84,80,84,80,81,85,80,83,80,80,82,83,78,85,79,77,78,85,81,80,82,83,84,78,78,78,78,78,85,79,77,81,80,82,83,84,78,85,79,77,78,78,80,82,78,85,79,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,85,80,80,80,80,80,80,80,80,80,80,80,80,80,80,84,81,80,82,83,84,78,85,79,77,78,80,80,84,85,80,80,80,82,83,78,85,81,80,84,85,85,80,78,80,80,78,80,80,80,83,82,82,83,83,83,80,80,80,84,84,80,78,78,86,81,80,82,83,84,78,85,79,77,81,80,82,83,84,78,85,79,77,81,80,82,83,84,78,85,79,77,80,80,80,0,0,87,88,0,0,0,0,0,0,0,89,89,89,90,91,89,90,91,89,90,91,89,89,90,91,89,90,91,89,90,91,89,90,91,89,89,89,90,91,89,90,91,90,91,90,91,89,90,91,90,91,89,89,89,89,90,91,89,89,89,89,89,90,91,89,90,91,89,90,91,0,0,92,93,94,95,0,0,93,0,0,0,0,0,0,96,93,96,0,92,94,97,95,0,92,94,97,95,0,98,98,98,0,0,0,0,99,100,101,96,93,98,102,103,92,94,97,95,99,100,101,96,93,98,102,103,92,94,97,95,104,99,100,101,104,99,100,101,103,102,103,99,100,101,96,96,93,98,102,103,92,94,97,95,105,99,100,101,96,93,98,102,103,92,94,97,95,106,102,103,99,100,101,96,93,98,102,103,92,94,97,95,99,100,101,99,100,101,106,106,99,99,99,100,100,100,101,101,101,99,100,101,102,103,101,99,100,106,99,99,99,100,100,100,101,101,101,106,99,99,99,100,100,100,101,101,101,106,99,99,99,100,100,100,101,101,101,98,98,107,99,100,101,107,106,99,99,99,100,100,100,101,101,101,99,100,101,96,93,98,102,103,92,94,97,95,99,100,101,96,93,98,102,103,92,94,97,95,99,100,101,96,93,98,102,103,92,94,97,95,106,99,99,99,100,100,100,101,101,101,106,99,99,99,100,100,100,101,101,101,108,109,110,111,112,113,114,114,114,115,0,116,0,0,0,0,0,116,117,0,0,0,117,117,118,117,119,120,121,117,118,122,123,119,120,121,117,118,122,123,119,120,121,117,118,122,119,120,121,117,117,118,122,119,120,121,117,118,122,119,120,121,117,118,122,123,123,117,119,120,121,117,118,122,123,117,117,117,117,117,117,118,122,119,120,121,117,118,122,123,118,122,118,122,117,118,122,118,122,117,117,117,117,117,119,120,121,117,117,117,117,118,122,117,117,117,117,117,119,120,121,117,118,122,123,119,120,121,117,118,122,123,119,120,121,117,118,122,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,0,126,124,124,126,124,124,125,124,0,0,0,0,0,0,125,125,124,124,124,127,128,124,124,124,124,124,124,124,126,127,124,129,128,130,125,126,127,124,129,128,130,125,126,127,124,129,128,130,125,124,128,130,125,129,125,126,124,128,130,125,124,127,126,127,124,124,124,124,124,129,128,130,125,128,127,126,127,124,129,128,130,125,124,124,124,128,130,125,129,129,129,129,126,127,124,129,128,130,125,124,129,127,129,129,124,128,130,127,129,128,130,128,130,125,125,124,124,128,130,125,127,127,127,127,128,124,124,125,126,127,124,129,128,130,125,126,127,124,129,128,130,125,126,127,124,129,128,130,125,129,0,0,131,132,0,133,133,133,133,133,133,133,133,133,133,133,133,133],"f":[null,null,null,null,null,null,[[]],[[]],[[],["privilegelevel",4]],[[["privilegelevel",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["u16",15]],["privilegelevel",4]],[[]],null,[[]],null,null,null,[[],["virtaddr",3]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15],["u64",15]],["u64",15]],[[]],[[]],[[["u64",15],["u64",15]],["u64",15]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["virtaddr",3]],[[],["physaddr",3]],[[["virtaddr",3]],["ordering",4]],[[["physaddr",3]],["ordering",4]],[[["virtaddr",3]],["bool",15]],[[["physaddr",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["virtaddr",3]],["bool",15]],[[["physaddr",3]],["bool",15]],[[["u64",15]],["virtaddr",3]],[[["u64",15]]],[[["u64",15]],["virtaddr",3]],[[["u64",15]],["physaddr",3]],[[["u64",15]],["virtaddr",3]],[[["u64",15]],["physaddr",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pageoffset",3]],[[["pagetablelevel",4]],["pagetableindex",3]],[[["virtaddr",3]],["option",4,[["ordering",4]]]],[[["physaddr",3]],["option",4,[["ordering",4]]]],[[],["option",4,[["usize",15]]]],[[["virtaddr",3]]],[[["u64",15]]],[[["physaddr",3]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15]],["result",4,[["virtaddr",3],["virtaddrnotvalid",3]]]],[[["u64",15]],["result",4,[["physaddrnotvalid",3]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["virtaddr",3]],[[],["physaddr",3]],[[]],[[]],null,[[]],null,null,[[],["virtaddr",3]],null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u16",15]],["portgeneric",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["rdrand",3]],[[["formatter",3]],["result",6]],[[]],[[],["option",4,[["u16",15]]]],[[],["option",4,[["u32",15]]]],[[],["option",4,[["u64",15]]]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["descriptortablepointer",3]]],[[["descriptortablepointer",3]]],[[["segmentselector",3]]],[[],["descriptortablepointer",3]],[[],["descriptortablepointer",3]],null,null,null,null,null,null,null,null,null,null,[[["u16",15]],["result",4,[["asidoutofrangeerror",3]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["invlpgbflushbuilder",3]],[[],["pcid",3]],[[],["invlpgb",3]],[[],["invlpgbflushbuilder",3]],[[["pcid",3]],["ordering",4]],[[["pcid",3]],["bool",15]],[[]],[[["virtaddr",3]]],[[]],[[]],[[["invpicdcommand",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u16",15]],[[],["u32",15]],null,[[["pcid",3]],["bool",15]],[[["u16",15]],["result",4,[["pcid",3],["pcidtoobig",3]]]],[[],["option",4]],[[["pagerange",3]],["invlpgbflushbuilder",3]],[[["pcid",3]],["option",4,[["ordering",4]]]],[[["pcid",3]]],[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u16",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cr0flags",3]],[[],["cr3flags",3]],[[],["cr4flags",3]],[[["cr0flags",3]],["ordering",4]],[[["cr3flags",3]],["ordering",4]],[[["cr4flags",3]],["ordering",4]],[[["cr0flags",3]],["bool",15]],[[["cr3flags",3]],["bool",15]],[[["cr4flags",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["cr0flags",3]],[[["u64",15]],["cr3flags",3]],[[["u64",15]],["cr4flags",3]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["cr0flags",3]],["bool",15]],[[["cr3flags",3]],["bool",15]],[[["cr4flags",3]],["bool",15]],[[]],[[]],[[]],[[["cr0flags",3]],["option",4,[["ordering",4]]]],[[["cr3flags",3]],["option",4,[["ordering",4]]]],[[["cr4flags",3]],["option",4,[["ordering",4]]]],[[],["cr0flags",3]],[[],["result",4,[["virtaddr",3],["virtaddrnotvalid",3]]]],[[]],[[],["cr4flags",3]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["cr0flags",3]]],[[["physframe",3],["cr3flags",3]]],[[["cr4flags",3]]],[[["physframe",3],["pcid",3]]],[[["physframe",3],["pcid",3]]],[[["u64",15]]],[[["physframe",3],["u16",15]]],[[["u64",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["dr6flags",3]]],[[["dr7flags",3]]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["debugaddressregisternumber",4]],[[],["dr6flags",3]],[[],["dr7flags",3]],[[],["breakpointcondition",4]],[[],["breakpointsize",4]],[[],["dr7value",3]],[[["dr6flags",3]],["ordering",4]],[[["dr7flags",3]],["ordering",4]],[[["debugaddressregisternumber",4]],["breakpointcondition",4]],[[["debugaddressregisternumber",4]],["bool",15]],[[["dr6flags",3]],["bool",15]],[[["dr7flags",3]],["bool",15]],[[["breakpointcondition",4]],["bool",15]],[[["breakpointsize",4]],["bool",15]],[[["dr7value",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["dr7flags",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dr7flags",3]]],[[]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["dr6flags",3]],[[["u64",15]],["dr7flags",3]],[[["u64",15]]],[[["u64",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["u8",15]],[[["debugaddressregisternumber",4]]],[[]],[[]],[[["dr7flags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["debugaddressregisternumber",4]]],[[["dr6flags",3]],["bool",15]],[[["dr7flags",3]],["bool",15]],[[["dr7value",3]],["bool",15]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[["dr6flags",3]],["option",4,[["ordering",4]]]],[[["dr7flags",3]],["option",4,[["ordering",4]]]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["dr6flags",3]],[[],["dr7value",3]],[[],["u64",15]],[[],["u64",15]],[[["dr7flags",3]]],[[["debugaddressregisternumber",4],["breakpointcondition",4]]],[[["dr7flags",3],["bool",15]]],[[["debugaddressregisternumber",4],["breakpointsize",4]]],[[["debugaddressregisternumber",4]],["breakpointsize",4]],[[]],[[]],[[]],[[]],[[["dr7flags",3]]],[[["debugaddressregisternumber",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["dr7value",3]]],[[["u64",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["eferflags",3]]],[[["cetflags",3]]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["eferflags",3]],[[],["cetflags",3]],[[["eferflags",3]],["ordering",4]],[[["cetflags",3]],["ordering",4]],[[["eferflags",3]],["bool",15]],[[["cetflags",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["eferflags",3]],[[["u64",15]],["cetflags",3]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["eferflags",3]],["bool",15]],[[["cetflags",3]],["bool",15]],[[["u32",15]],["msr",3]],[[]],[[]],[[["eferflags",3]],["option",4,[["ordering",4]]]],[[["cetflags",3]],["option",4,[["ordering",4]]]],[[],["u64",15]],[[],["eferflags",3]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[]],[[],["virtaddr",3]],[[],["rflags",3]],[[]],[[]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["u64",15]]],[[["eferflags",3]]],[[["virtaddr",3]]],[[["virtaddr",3]]],[[["virtaddr",3]]],[[["segmentselector",3],["segmentselector",3],["segmentselector",3],["segmentselector",3]],["result",4,[["invalidstarsegmentselectors",4]]]],[[["virtaddr",3]]],[[["rflags",3]]],[[["cetflags",3],["page",3]]],[[["cetflags",3],["page",3]]],[[["u64",15]]],[[["u16",15],["u16",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["mxcsr",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[],["mxcsr",3]],[[["mxcsr",3]],["ordering",4]],[[]],[[["mxcsr",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],["mxcsr",3]],[[["intoiterator",8]]],[[]],[[]],[[]],[[["mxcsr",3]],["bool",15]],[[]],[[["mxcsr",3]],["option",4,[["ordering",4]]]],[[],["mxcsr",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["mxcsr",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["rflags",3]]],[[]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[],["rflags",3]],[[["rflags",3]],["ordering",4]],[[["rflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u64",15]],["rflags",3]],[[["intoiterator",8]]],[[]],[[]],[[]],[[["rflags",3]],["bool",15]],[[]],[[["rflags",3]],["option",4,[["ordering",4]]]],[[],["rflags",3]],[[],["u64",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["rflags",3]]],[[["u64",15]]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["segmentselector",3]],[[["segmentselector",3]],["ordering",4]],[[["segmentselector",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[]],[[],["u16",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["segmentselector",3]],["bool",15]],[[["u16",15],["privilegelevel",4]],["segmentselector",3]],[[["segmentselector",3]],["option",4,[["ordering",4]]]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[],["privilegelevel",4]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["privilegelevel",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["virtaddr",3]]],[[["virtaddr",3]]],[[["virtaddr",3]]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["xcr0flags",3]]],[[]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["xcr0flags",3]],[[["xcr0flags",3]],["ordering",4]],[[["xcr0flags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u64",15]],["xcr0flags",3]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[["xcr0flags",3]],["bool",15]],[[]],[[["xcr0flags",3]],["option",4,[["ordering",4]]]],[[],["xcr0flags",3]],[[],["u64",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["xcr0flags",3]]],[[["u64",15]]],null,null,[[]],[[]],[[],["descriptortablepointer",3]],[[["formatter",3]],["result",6]],[[]],null,null,[[]],null,null,null,[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["descriptor",4]],["segmentselector",3]],[[]],[[]],[[["descriptorflags",3]]],[[]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["globaldescriptortable",3]],[[],["descriptor",4]],[[],["descriptorflags",3]],[[["descriptorflags",3]],["ordering",4]],[[],["privilegelevel",4]],[[]],[[]],[[],["bool",15]],[[["descriptorflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u64",15]],["descriptorflags",3]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["descriptor",4]],[[],["descriptor",4]],[[]],[[]],[[["descriptorflags",3]],["bool",15]],[[]],[[]],[[["descriptorflags",3]],["option",4,[["ordering",4]]]],[[],["u64",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["taskstatesegment",3]],["descriptor",4]],[[],["descriptor",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["descriptor",4]],[[],["descriptor",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["volatile",3,[["interruptstackframevalue",3]]]],[[]],[[]],[[["pagefaulterrorcode",3]]],[[]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["interruptdescriptortable",3]],[[],["entry",3]],[[],["entryoptions",3]],[[],["interruptstackframevalue",3]],[[],["pagefaulterrorcode",3]],[[],["selectorerrorcode",3]],[[],["descriptortable",4]],[[],["exceptionvector",4]],[[["pagefaulterrorcode",3]],["ordering",4]],null,null,null,null,[[]],[[],["descriptortable",4]],null,[[["bool",15]]],null,null,[[],["bool",15]],[[["entryoptions",3]],["bool",15]],[[["pagefaulterrorcode",3]],["bool",15]],[[["selectorerrorcode",3]],["bool",15]],[[["descriptortable",4]],["bool",15]],[[["exceptionvector",4]],["bool",15]],[[["intoiterator",8]]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["pagefaulterrorcode",3]],[[["intoiterator",8]]],null,[[],["virtaddr",3]],[[]],[[]],[[]],null,[[["range",3,[["u8",15]]]]],[[["rangeto",3,[["u8",15]]]]],[[["range",3,[["u8",15]]]]],[[]],[[["rangefrom",3,[["u8",15]]]]],[[]],[[["rangefull",3]]],[[["u8",15]]],[[["rangetoinclusive",3,[["u8",15]]]]],[[["rangefrom",3,[["u8",15]]]]],[[["rangeto",3,[["u8",15]]]]],[[["rangeinclusive",3,[["u8",15]]]]],[[["rangetoinclusive",3,[["u8",15]]]]],[[["rangeinclusive",3,[["u8",15]]]]],[[],["u64",15]],[[["u8",15]]],[[["rangetoinclusive",3,[["u8",15]]]]],[[["range",3,[["u8",15]]]]],[[["rangetoinclusive",3,[["u8",15]]]]],[[["rangeinclusive",3,[["u8",15]]]]],[[["rangefrom",3,[["u8",15]]]]],[[["range",3,[["u8",15]]]]],[[["rangeto",3,[["u8",15]]]]],[[["rangeinclusive",3,[["u8",15]]]]],[[["rangefrom",3,[["u8",15]]]]],[[["rangefull",3]]],[[["rangeto",3,[["u8",15]]]]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["never",15]],[[],["bool",15]],[[]],[[]],null,[[]],[[["entryoptions",3]],["bool",15]],[[["pagefaulterrorcode",3]],["bool",15]],[[["selectorerrorcode",3]],["bool",15]],[[["virtaddr",3],["segmentselector",3],["rflags",3],["virtaddr",3],["segmentselector",3]]],[[],["interruptdescriptortable",3]],[[["virtaddr",3],["segmentselector",3],["rflags",3],["virtaddr",3],["segmentselector",3]]],[[["u64",15]],["option",4]],[[["u64",15]]],null,[[]],null,null,[[["pagefaulterrorcode",3]],["option",4,[["ordering",4]]]],[[]],null,null,[[["segmentselector",3]]],[[["virtaddr",3]],["entryoptions",3]],[[],["entryoptions",3]],[[["bool",15]]],[[["privilegelevel",4]]],[[["u16",15]]],null,[[]],[[]],null,null,null,[[]],[[]],[[],["virtaddr",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[],["option",4,[["physframe",3]]]],[[["physframe",3]]],null,null,null,null,null,null,null,[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["physframe",3]],[[],["physframerange",3]],[[],["physframerangeinclusive",3]],[[["physframe",3]],["ordering",4]],[[["physaddr",3]]],null,null,[[["physframe",3]],["bool",15]],[[["physframerange",3]],["bool",15]],[[["physframerangeinclusive",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["physaddr",3]],["result",4,[["addressnotaligned",3]]]],[[["physaddr",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["physframe",3]],["bool",15]],[[["physframerange",3]],["bool",15]],[[["physframerangeinclusive",3]],["bool",15]],[[],["option",4]],[[],["option",4]],[[["physframe",3]],["option",4,[["ordering",4]]]],[[["physframe",3],["physframe",3]],["physframerange",3]],[[["physframe",3],["physframe",3]],["physframerangeinclusive",3]],[[],["u64",15]],null,null,[[],["physaddr",3]],[[["u64",15]]],[[["physframe",3]]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pagerangeinclusive",3]]],[[["pagerangeinclusive",3]]],[[["pagerangeinclusive",3]]],[[["pagerangeinclusive",3]]],[[],["mapperflushall",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["physframe",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["physframe",3],["pagetableflags",3]],["result",4,[["mapperflush",3],["maptoerror",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pagetable",3]],[[],["pagetable",3]],[[],["pagetable",3]],[[],["pagetable",3]],[[],["pagetable",3]],[[],["pagetable",3]],[[["page",3],["physframe",3],["pagetableflags",3]],["result",4,[["mapperflush",3],["maptoerror",4]]]],[[["page",3],["physframe",3],["pagetableflags",3],["pagetableflags",3]],["result",4,[["mapperflush",3],["maptoerror",4]]]],[[["page",3,[["size1gib",4]]],["physframe",3,[["size1gib",4]]],["pagetableflags",3],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size1gib",4]]],["maptoerror",4,[["size1gib",4]]]]]],[[["page",3,[["size2mib",4]]],["physframe",3,[["size2mib",4]]],["pagetableflags",3],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size2mib",4]]],["maptoerror",4,[["size2mib",4]]]]]],[[["page",3,[["size4kib",4]]],["physframe",3,[["size4kib",4]]],["pagetableflags",3],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size4kib",4]]],["maptoerror",4,[["size4kib",4]]]]]],[[["page",3,[["size1gib",4]]],["physframe",3,[["size1gib",4]]],["pagetableflags",3],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size1gib",4]]],["maptoerror",4,[["size1gib",4]]]]]],[[["page",3,[["size4kib",4]]],["physframe",3,[["size4kib",4]]],["pagetableflags",3],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size4kib",4]]],["maptoerror",4,[["size4kib",4]]]]]],[[["page",3,[["size2mib",4]]],["physframe",3,[["size2mib",4]]],["pagetableflags",3],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size2mib",4]]],["maptoerror",4,[["size2mib",4]]]]]],[[["page",3,[["size2mib",4]]],["physframe",3,[["size2mib",4]]],["pagetableflags",3],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size2mib",4]]],["maptoerror",4,[["size2mib",4]]]]]],[[["page",3,[["size1gib",4]]],["physframe",3,[["size1gib",4]]],["pagetableflags",3],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size1gib",4]]],["maptoerror",4,[["size1gib",4]]]]]],[[["page",3,[["size4kib",4]]],["physframe",3,[["size4kib",4]]],["pagetableflags",3],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size4kib",4]]],["maptoerror",4,[["size4kib",4]]]]]],[[["pagetable",3]]],[[["pagetable",3],["virtaddr",3]]],[[["pagetable",3]],["result",4,[["invalidpagetable",4]]]],[[["page",3]]],[[]],[[["pagetable",3],["pagetableindex",3]]],[[]],[[],["virtaddr",3]],[[["page",3],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[],["u64",15]],[[],["physaddr",3]],[[["virtaddr",3]],["translateresult",4]],[[["virtaddr",3]],["translateresult",4]],[[["virtaddr",3]],["translateresult",4]],[[["virtaddr",3]],["translateresult",4]],[[["virtaddr",3]],["option",4,[["physaddr",3]]]],[[["page",3]],["result",4,[["physframe",3],["translateerror",4]]]],[[["page",3,[["size4kib",4]]]],["result",4,[["physframe",3,[["size4kib",4]]],["translateerror",4]]]],[[["page",3,[["size2mib",4]]]],["result",4,[["physframe",3,[["size2mib",4]]],["translateerror",4]]]],[[["page",3,[["size1gib",4]]]],["result",4,[["physframe",3,[["size1gib",4]]],["translateerror",4]]]],[[["page",3,[["size1gib",4]]]],["result",4,[["physframe",3,[["size1gib",4]]],["translateerror",4]]]],[[["page",3,[["size2mib",4]]]],["result",4,[["physframe",3,[["size2mib",4]]],["translateerror",4]]]],[[["page",3,[["size4kib",4]]]],["result",4,[["physframe",3,[["size4kib",4]]],["translateerror",4]]]],[[["page",3,[["size2mib",4]]]],["result",4,[["physframe",3,[["size2mib",4]]],["translateerror",4]]]],[[["page",3,[["size1gib",4]]]],["result",4,[["physframe",3,[["size1gib",4]]],["translateerror",4]]]],[[["page",3,[["size4kib",4]]]],["result",4,[["physframe",3,[["size4kib",4]]],["translateerror",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["page",3]],["result",4,[["unmaperror",4]]]],[[["page",3,[["size1gib",4]]]],["result",4,[["unmaperror",4]]]],[[["page",3,[["size2mib",4]]]],["result",4,[["unmaperror",4]]]],[[["page",3,[["size4kib",4]]]],["result",4,[["unmaperror",4]]]],[[["page",3,[["size4kib",4]]]],["result",4,[["unmaperror",4]]]],[[["page",3,[["size2mib",4]]]],["result",4,[["unmaperror",4]]]],[[["page",3,[["size1gib",4]]]],["result",4,[["unmaperror",4]]]],[[["page",3,[["size1gib",4]]]],["result",4,[["unmaperror",4]]]],[[["page",3,[["size4kib",4]]]],["result",4,[["unmaperror",4]]]],[[["page",3,[["size2mib",4]]]],["result",4,[["unmaperror",4]]]],[[["page",3],["pagetableflags",3]],["result",4,[["mapperflush",3],["flagupdateerror",4]]]],[[["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size4kib",4]]],["flagupdateerror",4]]]],[[["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size1gib",4]]],["flagupdateerror",4]]]],[[["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size2mib",4]]],["flagupdateerror",4]]]],[[["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size2mib",4]]],["flagupdateerror",4]]]],[[["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size4kib",4]]],["flagupdateerror",4]]]],[[["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size1gib",4]]],["flagupdateerror",4]]]],[[["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size1gib",4]]],["flagupdateerror",4]]]],[[["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size4kib",4]]],["flagupdateerror",4]]]],[[["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size2mib",4]]],["flagupdateerror",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15]]],[[["u64",15]]],[[],["pagerange",3,[["size4kib",4]]]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["size4kib",4]],[[],["size2mib",4]],[[],["size1gib",4]],[[],["page",3]],[[],["pagerange",3]],[[],["pagerangeinclusive",3]],[[["size4kib",4]],["ordering",4]],[[["size2mib",4]],["ordering",4]],[[["size1gib",4]],["ordering",4]],[[["page",3]],["ordering",4]],[[["virtaddr",3]]],null,null,[[["size4kib",4]],["bool",15]],[[["size2mib",4]],["bool",15]],[[["size1gib",4]],["bool",15]],[[["page",3]],["bool",15]],[[["pagerange",3]],["bool",15]],[[["pagerangeinclusive",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pagetableindex",3],["pagetableindex",3],["pagetableindex",3],["pagetableindex",3]]],[[["pagetableindex",3],["pagetableindex",3]]],[[["pagetableindex",3],["pagetableindex",3],["pagetableindex",3]]],[[["virtaddr",3]],["result",4,[["addressnotaligned",3]]]],[[["virtaddr",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["page",3]],["bool",15]],[[["pagerange",3]],["bool",15]],[[["pagerangeinclusive",3]],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[["pagetablelevel",4]],["pagetableindex",3]],[[["size4kib",4]],["option",4,[["ordering",4]]]],[[["size2mib",4]],["option",4,[["ordering",4]]]],[[["size1gib",4]],["option",4,[["ordering",4]]]],[[["page",3]],["option",4,[["ordering",4]]]],[[],["pagerange",3]],[[],["pagerangeinclusive",3]],[[],["u64",15]],null,null,[[],["virtaddr",3]],[[],["option",4,[["usize",15]]]],[[]],[[["u64",15]]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["physaddr",3]],[[["usize",15]],["option",4]],[[]],[[]],[[["pagetableflags",3]]],[[]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["frameerror",4]],[[],["pagetableentry",3]],[[],["pagetableflags",3]],[[],["pagetable",3]],[[],["pagetableindex",3]],[[],["pageoffset",3]],[[],["pagetablelevel",4]],[[["pagetableflags",3]],["ordering",4]],[[["pagetableindex",3]],["ordering",4]],[[["pageoffset",3]],["ordering",4]],[[["pagetablelevel",4]],["ordering",4]],[[]],[[],["u64",15]],[[["frameerror",4]],["bool",15]],[[["pagetableflags",3]],["bool",15]],[[["pagetableindex",3]],["bool",15]],[[["pageoffset",3]],["bool",15]],[[["pagetablelevel",4]],["bool",15]],[[["intoiterator",8]]],[[],["pagetableflags",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]],["option",4]],[[],["result",4,[["physframe",3],["frameerror",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["pagetableflags",3]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[["pagetableindex",3]]],[[["usize",15]]],[[["usize",15]]],[[["pagetableindex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["pagetableflags",3]],["bool",15]],[[["pagetableindex",3]],["bool",15]],[[["pageoffset",3]],["bool",15]],[[]],[[]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[],["option",4]],[[],["option",4]],[[]],[[["pagetableflags",3]],["option",4,[["ordering",4]]]],[[["pagetableindex",3]],["option",4,[["ordering",4]]]],[[["pageoffset",3]],["option",4,[["ordering",4]]]],[[["pagetablelevel",4]],["option",4,[["ordering",4]]]],[[["physaddr",3],["pagetableflags",3]]],[[["pagetableflags",3]]],[[["physframe",3],["pagetableflags",3]]],[[]],[[],["option",4,[["usize",15]]]],[[]],[[]],[[],["u64",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,[[["u16",15]]],[[["u16",15]]],null,[[]],[[]],[[],["taskstatesegment",3]],[[["formatter",3]],["result",6]],[[]],null,[[]],null,[[],["taskstatesegment",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"PrivilegeLevel"],[6,"HandlerFunc"],[6,"HandlerFuncWithErrCode"],[6,"PageFaultHandlerFunc"],[6,"DivergingHandlerFunc"],[6,"DivergingHandlerFuncWithErrCode"],[3,"VirtAddrNotValid"],[3,"PhysAddrNotValid"],[3,"VirtAddr"],[3,"PhysAddr"],[8,"PortAccess"],[3,"PortGeneric"],[3,"ReadOnlyAccess"],[3,"WriteOnlyAccess"],[3,"ReadWriteAccess"],[3,"RdRand"],[4,"InvPicdCommand"],[3,"InvlpgbFlushBuilder"],[3,"AsidOutOfRangeError"],[3,"Pcid"],[3,"PcidTooBig"],[3,"Invlpgb"],[13,"Address"],[13,"Single"],[3,"Cr0Flags"],[3,"Cr4Flags"],[3,"Cr3Flags"],[3,"Cr0"],[3,"Cr2"],[3,"Cr3"],[3,"Cr4"],[3,"Dr6Flags"],[4,"BreakpointCondition"],[4,"DebugAddressRegisterNumber"],[3,"Dr7Flags"],[4,"BreakpointSize"],[8,"DebugAddressRegister"],[3,"Dr7Value"],[3,"Dr0"],[3,"Dr1"],[3,"Dr2"],[3,"Dr3"],[3,"Dr6"],[3,"Dr7"],[3,"EferFlags"],[3,"CetFlags"],[3,"Efer"],[3,"FsBase"],[3,"GsBase"],[3,"KernelGsBase"],[3,"Star"],[3,"LStar"],[3,"SFMask"],[3,"UCet"],[3,"SCet"],[3,"Msr"],[3,"MxCsr"],[3,"RFlags"],[3,"SegmentSelector"],[8,"Segment64"],[3,"CS"],[3,"SS"],[3,"DS"],[3,"ES"],[3,"FS"],[3,"GS"],[8,"Segment"],[3,"XCr0Flags"],[3,"XCr0"],[3,"DescriptorTablePointer"],[3,"DescriptorFlags"],[4,"Descriptor"],[3,"GlobalDescriptorTable"],[3,"Entry"],[13,"UserSegment"],[13,"SystemSegment"],[4,"ExceptionVector"],[3,"PageFaultErrorCode"],[4,"DescriptorTable"],[3,"InterruptDescriptorTable"],[3,"InterruptStackFrame"],[3,"Entry"],[3,"EntryOptions"],[3,"InterruptStackFrameValue"],[3,"SelectorErrorCode"],[8,"HandlerFuncType"],[8,"FrameAllocator"],[8,"FrameDeallocator"],[3,"PhysFrame"],[3,"PhysFrameRange"],[3,"PhysFrameRangeInclusive"],[4,"MapToError"],[4,"TranslateResult"],[4,"UnmapError"],[4,"TranslateError"],[4,"InvalidPageTable"],[4,"FlagUpdateError"],[4,"MappedFrame"],[3,"MappedPageTable"],[3,"OffsetPageTable"],[3,"RecursivePageTable"],[3,"MapperFlush"],[3,"MapperFlushAll"],[8,"CleanUp"],[8,"PageTableFrameMapping"],[8,"Mapper"],[8,"Translate"],[13,"PageAlreadyMapped"],[13,"Size4KiB"],[13,"Size2MiB"],[13,"Size1GiB"],[13,"InvalidFrameAddress"],[13,"InvalidFrameAddress"],[13,"Mapped"],[13,"InvalidFrameAddress"],[8,"PageSize"],[3,"Page"],[3,"PageRange"],[4,"Size4KiB"],[4,"Size2MiB"],[4,"Size1GiB"],[3,"PageRangeInclusive"],[3,"AddressNotAligned"],[3,"PageTableFlags"],[4,"PageTableLevel"],[4,"FrameError"],[3,"PageTableEntry"],[3,"PageTableIndex"],[3,"PageTable"],[3,"PageOffset"],[8,"PortRead"],[8,"PortWrite"],[3,"TaskStateSegment"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};